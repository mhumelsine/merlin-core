using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Isf.Core.Utils;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;

namespace Merlin.Core.Data.DataContexts
{
    public partial class MerlinWriteContext : DbContext
    {
        private readonly IUsernameProvider userNameProvider;
        private readonly IProcessNameProvider processNameProvider;

        //only for use by the read context where no writes are possible
        protected MerlinWriteContext()
        {

        }

        public MerlinWriteContext(IUsernameProvider userNameProvider, IProcessNameProvider processNameProvider)
        {
            this.userNameProvider = userNameProvider;
            this.processNameProvider = processNameProvider;
        }

        public MerlinWriteContext(DbContextOptions<MerlinWriteContext> options, IUsernameProvider userNameProvider, IProcessNameProvider processNameProvider)
            : base(options)
        {
            this.userNameProvider = userNameProvider;
            this.processNameProvider = processNameProvider;
        }

        public override int SaveChanges()
        {
            TrackChanges();
            return base.SaveChanges();
        }

        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            TrackChanges();
            return base.SaveChangesAsync(cancellationToken);
        }

        private void SetAuditFields(DateTime timestamp)
        {
            var delta = ChangeTracker.Entries()
                .Where(entry => entry.State == EntityState.Added || entry.State == EntityState.Modified)
                .Where(entry => entry.Entity is IAuditAdded || entry.Entity is IAuditChanged)
                .ToList();

            foreach (var entry in delta)
            {
                switch (entry.State)
                {
                    case EntityState.Added:
                        if (entry.Entity is IAuditAdded)
                        {
                            var added = (IAuditAdded)entry.Entity;
                            added.IdAdded = userNameProvider.GetUsername();
                            added.DtAdded = timestamp;
                        }
                        break;
                    case EntityState.Modified:
                        if (entry.Entity is IAuditChanged)
                        {
                            var changed = (IAuditChanged)entry.Entity;
                            changed.IdChanged = userNameProvider.GetUsername();
                            changed.DtChanged = timestamp;
                        }
                        break;
                }
            }
        }

        static JsonSerializerSettings serializerSettings = new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Ignore};

        private void TrackChanges()
        {
            //TODO:  enable once code is moved       
            var timestamp = DateTime.Now;

            SetAuditFields(timestamp);

            var delta = ChangeTracker.Entries()
                .Where(entry => entry.Entity is IHaveUID && entry.State != EntityState.Unchanged)
                .ToList();

            foreach (var entry in delta)
            {
                //track add
                var domainEvent = new DomainEvent
                {
                    DtEvent = timestamp,
                    NmEvent = $"{entry.CurrentValues.EntityType.Name.Replace("Merlin.Core.Data.", string.Empty)}{entry.State}",
                    UID = ((IHaveUID)entry.Entity).UID,
                    IdUser = userNameProvider.GetUsername(),
                    DsProcess = processNameProvider.GetProcessName(),
                    Data = new DomainEventData()
                };

                switch (entry.State)
                {
                    case EntityState.Added:
                        domainEvent.Data.JsEventData = JsonConvert.SerializeObject(entry.Entity, serializerSettings);
                        break;
                    case EntityState.Deleted:
                        domainEvent.Data.JsEventData = JsonConvert.SerializeObject(entry.Entity, serializerSettings);
                        break;
                    case EntityState.Modified:

                        var changes = new Dictionary<string, object>();

                        foreach (var property in entry.OriginalValues.Properties)
                        {
                            if (!Equals(entry.OriginalValues[property], entry.CurrentValues[property]))
                            {
                                changes[property.Name] = (entry.CurrentValues[property] ?? string.Empty).ToString();
                            }
                        }

                        domainEvent.Data.JsEventData = JsonConvert.SerializeObject(changes, serializerSettings);
                        break;
                }

                DomainEvent.Add(domainEvent);
            }
        }

        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<Alerts> Alerts { get; set; }
        public virtual DbSet<AlertsDetail> AlertsDetail { get; set; }
        public virtual DbSet<AmrAntibiogram> AmrAntibiogram { get; set; }
        public virtual DbSet<AmrDrug> AmrDrug { get; set; }
        public virtual DbSet<AmrGroups> AmrGroups { get; set; }
        public virtual DbSet<AnimalOwner> AnimalOwner { get; set; }
        public virtual DbSet<AnimalProfile> AnimalProfile { get; set; }
        public virtual DbSet<AnimalVictim> AnimalVictim { get; set; }
        public virtual DbSet<ArboviralExt> ArboviralExt { get; set; }
        public virtual DbSet<Assignment> Assignment { get; set; }
        public virtual DbSet<Audit> Audit { get; set; }
        public virtual DbSet<AuditChange> AuditChange { get; set; }
        public virtual DbSet<AuditDetail> AuditDetail { get; set; }
        public virtual DbSet<AutoScenario> AutoScenario { get; set; }
        public virtual DbSet<BacterialExtCommon> BacterialExtCommon { get; set; }
        public virtual DbSet<BatchHistory> BatchHistory { get; set; }
        public virtual DbSet<BrucellosisExt> BrucellosisExt { get; set; }
        public virtual DbSet<CaseAntibioticList> CaseAntibioticList { get; set; }
        public virtual DbSet<CaseDef> CaseDef { get; set; }
        public virtual DbSet<CaseDefinitionAnswers> CaseDefinitionAnswers { get; set; }
        public virtual DbSet<CaseDefinitionQuestions> CaseDefinitionQuestions { get; set; }
        public virtual DbSet<CaseDefinitionText> CaseDefinitionText { get; set; }
        public virtual DbSet<CaseDefItem> CaseDefItem { get; set; }
        public virtual DbSet<CaseDefOrder> CaseDefOrder { get; set; }
        public virtual DbSet<CaseDefOutcome> CaseDefOutcome { get; set; }
        public virtual DbSet<CaseNotes> CaseNotes { get; set; }
        public virtual DbSet<CaseReportForms> CaseReportForms { get; set; }
        public virtual DbSet<CaseSymptom> CaseSymptom { get; set; }
        public virtual DbSet<CaseTaskList> CaseTaskList { get; set; }
        public virtual DbSet<CdcHl7Control> CdcHl7Control { get; set; }
        public virtual DbSet<CdcHl7Transmission> CdcHl7Transmission { get; set; }
        public virtual DbSet<CdcTransReference> CdcTransReference { get; set; }
        public virtual DbSet<ChronicScenario> ChronicScenario { get; set; }
        public virtual DbSet<CiguateraExt> CiguateraExt { get; set; }
        public virtual DbSet<Codes> Codes { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<ContactVaccinationHistory> ContactVaccinationHistory { get; set; }
        public virtual DbSet<ContiguousCounty> ContiguousCounty { get; set; }
        public virtual DbSet<CoPoisoningExt> CoPoisoningExt { get; set; }
        public virtual DbSet<Counties> Counties { get; set; }
        public virtual DbSet<County> County { get; set; }
        public virtual DbSet<CyclosporiasisExt> CyclosporiasisExt { get; set; }
        public virtual DbSet<DeployArea> DeployArea { get; set; }
        public virtual DbSet<DeployAreaSurvey> DeployAreaSurvey { get; set; }
        public virtual DbSet<DeployLocation> DeployLocation { get; set; }
        public virtual DbSet<Deployment> Deployment { get; set; }
        public virtual DbSet<DeployPerson> DeployPerson { get; set; }
        public virtual DbSet<DeployTag> DeployTag { get; set; }
        public virtual DbSet<DeployVisit> DeployVisit { get; set; }
        public virtual DbSet<DimQuestion> DimQuestion { get; set; }
        public virtual DbSet<DomainEvent> DomainEvent { get; set; }
        public virtual DbSet<DxStatusCriteria> DxStatusCriteria { get; set; }
        public virtual DbSet<DxStatusDefinition> DxStatusDefinition { get; set; }
        public virtual DbSet<DxStatusXref> DxStatusXref { get; set; }
        public virtual DbSet<EcoliExt> EcoliExt { get; set; }
        public virtual DbSet<EharsProfile> EharsProfile { get; set; }
        public virtual DbSet<ElrAntibiogram> ElrAntibiogram { get; set; }
        public virtual DbSet<ElrFilterDetail> ElrFilterDetail { get; set; }
        public virtual DbSet<ElrFilterEvent> ElrFilterEvent { get; set; }
        public virtual DbSet<ElrFilterOutcome> ElrFilterOutcome { get; set; }
        public virtual DbSet<ElrFilterRules> ElrFilterRules { get; set; }
        public virtual DbSet<ElrFluFilterRules> ElrFluFilterRules { get; set; }
        public virtual DbSet<ElrMerlinCodeMatch> ElrMerlinCodeMatch { get; set; }
        public virtual DbSet<ElrStagingX> ElrStagingX { get; set; }
        public virtual DbSet<EmailQueue> EmailQueue { get; set; }
        public virtual DbSet<EmailQueueHistory> EmailQueueHistory { get; set; }
        public virtual DbSet<EnvDatasharingCase> EnvDatasharingCase { get; set; }
        public virtual DbSet<EnvDatasharingCaseSymptoms> EnvDatasharingCaseSymptoms { get; set; }
        public virtual DbSet<EnvDatasharingLab> EnvDatasharingLab { get; set; }
        public virtual DbSet<EpiCase> EpiCase { get; set; }
        public virtual DbSet<EpiCaseContacts> EpiCaseContacts { get; set; }
        public virtual DbSet<EpiCaseCorrespondence> EpiCaseCorrespondence { get; set; }
        public virtual DbSet<EpiCaseDefAnswers> EpiCaseDefAnswers { get; set; }
        public virtual DbSet<EpiCaseDocument> EpiCaseDocument { get; set; }
        public virtual DbSet<EpiCaseFlatfile> EpiCaseFlatfile { get; set; }
        public virtual DbSet<EpiCaseHistory> EpiCaseHistory { get; set; }
        public virtual DbSet<EpiCaseHospital> EpiCaseHospital { get; set; }
        public virtual DbSet<EpiCaseMeasuresArchive> EpiCaseMeasuresArchive { get; set; }
        public virtual DbSet<EpiCaseReview> EpiCaseReview { get; set; }
        public virtual DbSet<EpiCaseSupplemental> EpiCaseSupplemental { get; set; }
        public virtual DbSet<EpiCaseSurveyAnswers> EpiCaseSurveyAnswers { get; set; }
        public virtual DbSet<EpiDocument> EpiDocument { get; set; }
        public virtual DbSet<EpiDocumentList> EpiDocumentList { get; set; }
        public virtual DbSet<EpiProfile> EpiProfile { get; set; }
        public virtual DbSet<EpiUser> EpiUser { get; set; }
        public virtual DbSet<EpiUserAlerts> EpiUserAlerts { get; set; }
        public virtual DbSet<EpiUserDocument> EpiUserDocument { get; set; }
        public virtual DbSet<EpiUserPrivileges> EpiUserPrivileges { get; set; }
        public virtual DbSet<ExtDsValues> ExtDsValues { get; set; }
        public virtual DbSet<ExtLab> ExtLab { get; set; }
        public virtual DbSet<FacilityExposure> FacilityExposure { get; set; }
        public virtual DbSet<FactAnswers> FactAnswers { get; set; }
        public virtual DbSet<Family> Family { get; set; }
        public virtual DbSet<FamilyObservation> FamilyObservation { get; set; }
        public virtual DbSet<FollowUpEpiCase> FollowUpEpiCase { get; set; }
        public virtual DbSet<FollowUpLeadExt> FollowUpLeadExt { get; set; }
        public virtual DbSet<FuzzyMatchLog> FuzzyMatchLog { get; set; }
        public virtual DbSet<FuzzyMatchLogEntry> FuzzyMatchLogEntry { get; set; }
        public virtual DbSet<GisToolParcels> GisToolParcels { get; set; }
        public virtual DbSet<GisToolRoutes> GisToolRoutes { get; set; }
        public virtual DbSet<HepatitisAExt> HepatitisAExt { get; set; }
        public virtual DbSet<HepatitisBcAcuteExt> HepatitisBcAcuteExt { get; set; }
        public virtual DbSet<HepatitisBcChronicExt> HepatitisBcChronicExt { get; set; }
        public virtual DbSet<HepatitisExtCommon> HepatitisExtCommon { get; set; }
        public virtual DbSet<HepatitisPerinatalContactExt> HepatitisPerinatalContactExt { get; set; }
        public virtual DbSet<HepatitisPerinatalExt> HepatitisPerinatalExt { get; set; }
        public virtual DbSet<HepatitisPerinatalInfantExt> HepatitisPerinatalInfantExt { get; set; }
        public virtual DbSet<HepatitisPerinatalMotherExt> HepatitisPerinatalMotherExt { get; set; }
        public virtual DbSet<HepatitisPerinatalSourcesExt> HepatitisPerinatalSourcesExt { get; set; }
        public virtual DbSet<HflueExt> HflueExt { get; set; }
        public virtual DbSet<HivCase> HivCase { get; set; }
        public virtual DbSet<Icd9> Icd9 { get; set; }
        public virtual DbSet<Icd9CrfDetail> Icd9CrfDetail { get; set; }
        public virtual DbSet<Icd9CrfEvent> Icd9CrfEvent { get; set; }
        public virtual DbSet<Icd9Measures> Icd9Measures { get; set; }
        public virtual DbSet<Icd9Notes> Icd9Notes { get; set; }
        public virtual DbSet<Icd9Relation> Icd9Relation { get; set; }
        public virtual DbSet<Icd9Survey> Icd9Survey { get; set; }
        public virtual DbSet<Icd9Symptom> Icd9Symptom { get; set; }
        public virtual DbSet<Icd9Tables> Icd9Tables { get; set; }
        public virtual DbSet<Identifier> Identifier { get; set; }
        public virtual DbSet<IncidenceFile> IncidenceFile { get; set; }
        public virtual DbSet<IncidenceFileRow> IncidenceFileRow { get; set; }
        public virtual DbSet<IncomingTestResults> IncomingTestResults { get; set; }
        public virtual DbSet<Lab> Lab { get; set; }
        public virtual DbSet<LabDocument> LabDocument { get; set; }
        public virtual DbSet<LabElrkin> LabElrkin { get; set; }
        public virtual DbSet<LabElrOrder> LabElrOrder { get; set; }
        public virtual DbSet<LabElrpatVisit> LabElrpatVisit { get; set; }
        public virtual DbSet<LabElrRoblite> LabElrRoblite { get; set; }
        public virtual DbSet<LabElrspecimen> LabElrspecimen { get; set; }
        public virtual DbSet<LabResultValues> LabResultValues { get; set; }
        public virtual DbSet<LabTestIcd9> LabTestIcd9 { get; set; }
        public virtual DbSet<LabTestIcd9Set> LabTestIcd9Set { get; set; }
        public virtual DbSet<LabTestType> LabTestType { get; set; }
        public virtual DbSet<LeadExt> LeadExt { get; set; }
        public virtual DbSet<LeadExtAdditional> LeadExtAdditional { get; set; }
        public virtual DbSet<LeadExtArchive> LeadExtArchive { get; set; }
        public virtual DbSet<LeadExtEnvironmental> LeadExtEnvironmental { get; set; }
        public virtual DbSet<LeadExtProfile> LeadExtProfile { get; set; }
        public virtual DbSet<LeadExtTest> LeadExtTest { get; set; }
        public virtual DbSet<LegionellosisExt> LegionellosisExt { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<LoginAttempts> LoginAttempts { get; set; }
        public virtual DbSet<LoincMaster> LoincMaster { get; set; }
        public virtual DbSet<LymeExt> LymeExt { get; set; }
        public virtual DbSet<MalariaExt> MalariaExt { get; set; }
        public virtual DbSet<MeaslesExt> MeaslesExt { get; set; }
        public virtual DbSet<MeningitisExtCommon> MeningitisExtCommon { get; set; }
        public virtual DbSet<MeningitisExtHflue> MeningitisExtHflue { get; set; }
        public virtual DbSet<MeningitisExtNeisseria> MeningitisExtNeisseria { get; set; }
        public virtual DbSet<MeningococcalExt> MeningococcalExt { get; set; }
        public virtual DbSet<MumpsRubellaExt> MumpsRubellaExt { get; set; }
        public virtual DbSet<MyprofileDashboardPosition> MyprofileDashboardPosition { get; set; }
        public virtual DbSet<MessageQueue> MessageQueue { get; set; }
        public virtual DbSet<NextNumber> NextNumber { get; set; }
        public virtual DbSet<ObservationCatalog> ObservationCatalog { get; set; }
        public virtual DbSet<Outbreak> Outbreak { get; set; }
        public virtual DbSet<OutbreakAdditionalQuestions> OutbreakAdditionalQuestions { get; set; }
        public virtual DbSet<OutbreakAggregate> OutbreakAggregate { get; set; }
        public virtual DbSet<OutbreakCluster> OutbreakCluster { get; set; }
        public virtual DbSet<OutbreakClusterRule> OutbreakClusterRule { get; set; }
        public virtual DbSet<OutbreakColumnsShow> OutbreakColumnsShow { get; set; }
        public virtual DbSet<OutbreakContactRelation> OutbreakContactRelation { get; set; }
        public virtual DbSet<OutbreakDocument> OutbreakDocument { get; set; }
        public virtual DbSet<OutbreakEnvironmental> OutbreakEnvironmental { get; set; }
        public virtual DbSet<OutbreakEpilinkRelation> OutbreakEpilinkRelation { get; set; }
        public virtual DbSet<OutbreakEvents> OutbreakEvents { get; set; }
        public virtual DbSet<OutbreakLab> OutbreakLab { get; set; }
        public virtual DbSet<OutbreakLabElrKin> OutbreakLabElrKin { get; set; }
        public virtual DbSet<OutbreakLabElrOrder> OutbreakLabElrOrder { get; set; }
        public virtual DbSet<OutbreakLabElrPatvisit> OutbreakLabElrPatvisit { get; set; }
        public virtual DbSet<OutbreakLabElrSpecimen> OutbreakLabElrSpecimen { get; set; }
        public virtual DbSet<OutbreakLabResults> OutbreakLabResults { get; set; }
        public virtual DbSet<OutbreakLabResultValues> OutbreakLabResultValues { get; set; }
        public virtual DbSet<OutbreakLabSpecimen> OutbreakLabSpecimen { get; set; }
        public virtual DbSet<OutbreakLabTmp> OutbreakLabTmp { get; set; }
        public virtual DbSet<OutbreakPeople> OutbreakPeople { get; set; }
        public virtual DbSet<OutbreakPeopleLabJunk> OutbreakPeopleLabJunk { get; set; }
        public virtual DbSet<OutbreakPeopleRiskFactor> OutbreakPeopleRiskFactor { get; set; }
        public virtual DbSet<OutbreakPeopleSymptoms> OutbreakPeopleSymptoms { get; set; }
        public virtual DbSet<OutbreakRiskFactor> OutbreakRiskFactor { get; set; }
        public virtual DbSet<OutbreakRiskFactorTmp> OutbreakRiskFactorTmp { get; set; }
        public virtual DbSet<OutbreakSearchFields> OutbreakSearchFields { get; set; }
        public virtual DbSet<OutbreakSettings> OutbreakSettings { get; set; }
        public virtual DbSet<OutbreakStatistics> OutbreakStatistics { get; set; }
        public virtual DbSet<OutbreakStatusHistory> OutbreakStatusHistory { get; set; }
        public virtual DbSet<OutbreakSurvey> OutbreakSurvey { get; set; }
        public virtual DbSet<OutbreakSurveyResults> OutbreakSurveyResults { get; set; }
        public virtual DbSet<OutbreakSymptoms> OutbreakSymptoms { get; set; }
        public virtual DbSet<OutbreakTravel> OutbreakTravel { get; set; }
        public virtual DbSet<OutgoingTestRequests> OutgoingTestRequests { get; set; }
        public virtual DbSet<Page> Page { get; set; }
        public virtual DbSet<PageMessageText> PageMessageText { get; set; }
        public virtual DbSet<PediatricFluExt> PediatricFluExt { get; set; }
        public virtual DbSet<PediatricFluExt2> PediatricFluExt2 { get; set; }
        public virtual DbSet<PediatricFluPathogensExt> PediatricFluPathogensExt { get; set; }
        public virtual DbSet<PertussisExt> PertussisExt { get; set; }
        public virtual DbSet<PesticideExt> PesticideExt { get; set; }
        public virtual DbSet<PesticideProductExt> PesticideProductExt { get; set; }
        public virtual DbSet<PfgeData> PfgeData { get; set; }
        public virtual DbSet<PopulationData> PopulationData { get; set; }
        public virtual DbSet<PrintLog> PrintLog { get; set; }
        public virtual DbSet<ProfileHistory> ProfileHistory { get; set; }
        public virtual DbSet<ProfileRelation> ProfileRelation { get; set; }
        public virtual DbSet<QiAssessment> QiAssessment { get; set; }
        public virtual DbSet<QiMeasure> QiMeasure { get; set; }
        public virtual DbSet<QuestionValidation> QuestionValidation { get; set; }
        public virtual DbSet<RabiesExt> RabiesExt { get; set; }
        public virtual DbSet<Relationship> Relationship { get; set; }
        public virtual DbSet<ReportCriteria> ReportCriteria { get; set; }
        public virtual DbSet<ReportFields> ReportFields { get; set; }
        public virtual DbSet<ReportParamSelection> ReportParamSelection { get; set; }
        public virtual DbSet<Resource> Resource { get; set; }
        public virtual DbSet<ResourceSetting> ResourceSetting { get; set; }
        public virtual DbSet<RiskFactor> RiskFactor { get; set; }
        public virtual DbSet<SalmonellaContactExt> SalmonellaContactExt { get; set; }
        public virtual DbSet<SalmonellaExt> SalmonellaExt { get; set; }
        public virtual DbSet<Scenario> Scenario { get; set; }
        public virtual DbSet<ScenarioOutcome> ScenarioOutcome { get; set; }
        public virtual DbSet<ScenarioRule> ScenarioRule { get; set; }
        public virtual DbSet<ScenarioRuleGroup> ScenarioRuleGroup { get; set; }
        public virtual DbSet<ScenarioSingleRule> ScenarioSingleRule { get; set; }
        public virtual DbSet<SentinelElrMatch> SentinelElrMatch { get; set; }
        public virtual DbSet<SentinelSpecimen> SentinelSpecimen { get; set; }
        public virtual DbSet<ShigellaExt> ShigellaExt { get; set; }
        public virtual DbSet<Snomed> Snomed { get; set; }
        public virtual DbSet<Specimen> Specimen { get; set; }
        public virtual DbSet<StarhsManifest> StarhsManifest { get; set; }
        public virtual DbSet<StarhsManifestRow> StarhsManifestRow { get; set; }
        public virtual DbSet<StrepPneumoExt> StrepPneumoExt { get; set; }
        public virtual DbSet<Survey> Survey { get; set; }
        public virtual DbSet<SurveyAnswers> SurveyAnswers { get; set; }
        public virtual DbSet<SurveyDisplay> SurveyDisplay { get; set; }
        public virtual DbSet<SurveyEntity> SurveyEntity { get; set; }
        public virtual DbSet<SurveyEntityAttribute> SurveyEntityAttribute { get; set; }
        public virtual DbSet<SurveyInstance> SurveyInstance { get; set; }
        public virtual DbSet<SurveyLayout> SurveyLayout { get; set; }
        public virtual DbSet<SurveyLayoutQuestion> SurveyLayoutQuestion { get; set; }
        public virtual DbSet<SurveyLayoutTag> SurveyLayoutTag { get; set; }
        public virtual DbSet<SurveyNotes> SurveyNotes { get; set; }
        public virtual DbSet<SurveyObjectMapping> SurveyObjectMapping { get; set; }
        public virtual DbSet<SurveyQuestion> SurveyQuestion { get; set; }
        public virtual DbSet<SurveyQuestionBank> SurveyQuestionBank { get; set; }
        public virtual DbSet<SurveyQuestionValidation> SurveyQuestionValidation { get; set; }
        public virtual DbSet<SurveyValidation> SurveyValidation { get; set; }
        public virtual DbSet<Symptom> Symptom { get; set; }
        public virtual DbSet<SymptomIcd9> SymptomIcd9 { get; set; }
        public virtual DbSet<SymptomSet> SymptomSet { get; set; }
        public virtual DbSet<TableHistory> TableHistory { get; set; }
        public virtual DbSet<TaskListCounts> TaskListCounts { get; set; }
        public virtual DbSet<TblFluActivityLevel> TblFluActivityLevel { get; set; }
        public virtual DbSet<Template> Template { get; set; }
        public virtual DbSet<TemplateSurvey> TemplateSurvey { get; set; }
        public virtual DbSet<TetanusExt> TetanusExt { get; set; }
        public virtual DbSet<TravelHistory> TravelHistory { get; set; }
        public virtual DbSet<Treatment> Treatment { get; set; }
        public virtual DbSet<TyphoidExt> TyphoidExt { get; set; }
        public virtual DbSet<UserRegion> UserRegion { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<VaersExt> VaersExt { get; set; }
        public virtual DbSet<VaersFollowup> VaersFollowup { get; set; }
        public virtual DbSet<VaersPrevEvent> VaersPrevEvent { get; set; }
        public virtual DbSet<VaersVaccine> VaersVaccine { get; set; }
        public virtual DbSet<ValidationRule> ValidationRule { get; set; }
        public virtual DbSet<VaricellaExt> VaricellaExt { get; set; }
        public virtual DbSet<VibrioExt> VibrioExt { get; set; }
        public virtual DbSet<VibrioSeafood> VibrioSeafood { get; set; }
        public virtual DbSet<WeekNumber> WeekNumber { get; set; }
        public virtual DbSet<ElrOutcome> ElrOutcome { get; set; }
        public virtual DbSet<ElrSearchTemplates> ElrSearchTemplates { get; set; }

        // Unable to generate entity type for table 'dbo.Query'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SURVEY_LAYOUT_QUESTION'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PAGE_DOCUMENTS'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.REPORT_DATA'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.oldLayoutIds'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ASPSessionState'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.__SeedDataTaskList'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VACCINES'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.QFEVER_EXT'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.OUTBREAK_BUCKETS'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VACCINE_HISTORY_EXT'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.newTable1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.COUNTY_PRIVILEGES'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EPI_CASE_RECIPROCAL'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ELR_TASK_LIST'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DOMAIN_EVENT_DATA'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ICD9-AT-DOH'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ELECTRONIC_LAB'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.statements'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ELECTRONIC_LAB_TB'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.oldIds'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.oldSurveyIds'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SURVEY_DISPLAY_TT9062'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SURVEY_QUESTION_TT9062'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ENV_DATASHARING_LAB_RESULTS'. Please see the warning messages.

        //        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //        {
        //            if (!optionsBuilder.IsConfigured)
        //            {
        //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
        //                optionsBuilder.UseSqlServer("Server=merlindevsql01;Database=Merlin_17_1;Trusted_Connection=True;");
        //            }
        //        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Address>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("ADDRESS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AmLatitude).HasColumnName("AM_LATITUDE");

                entity.Property(e => e.AmLongitude).HasColumnName("AM_LONGITUDE");

                entity.Property(e => e.CdCountry)
                    .HasColumnName("CD_COUNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdZip)
                    .HasColumnName("CD_ZIP")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsStreet1)
                    .HasColumnName("DS_STREET1")
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.DsStreet2)
                    .HasColumnName("DS_STREET2")
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdEntity).HasColumnName("ID_ENTITY");

                entity.Property(e => e.IdType).HasColumnName("ID_TYPE");

                entity.Property(e => e.InCurrent).HasColumnName("IN_CURRENT");

                entity.Property(e => e.InGeocoded).HasColumnName("IN_GEOCODED");

                entity.Property(e => e.InUsAddress).HasColumnName("IN_US_ADDRESS");
            });

            modelBuilder.Entity<Alerts>(entity =>
            {
                entity.HasKey(e => e.IdAlert);

                entity.ToTable("ALERTS");

                entity.Property(e => e.IdAlert).HasColumnName("ID_ALERT");

                entity.Property(e => e.AmOrder).HasColumnName("AM_ORDER");

                entity.Property(e => e.AmTimePeriod)
                    .IsRequired()
                    .HasColumnName("AM_TIME_PERIOD")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdAlertCode)
                    .IsRequired()
                    .HasColumnName("CD_ALERT_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdAlertType)
                    .IsRequired()
                    .HasColumnName("CD_ALERT_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDescription)
                    .IsRequired()
                    .HasColumnName("DS_DESCRIPTION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsEmailMessage)
                    .HasColumnName("DS_EMAIL_MESSAGE")
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTextHelp)
                    .HasColumnName("DS_TEXT_HELP")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAdvance).HasColumnName("IN_ADVANCE");
            });

            modelBuilder.Entity<ElrOutcome>(entity =>
            {
                entity.HasKey(e => e.IdElrObservation);

                entity.ToTable("ELR_OUTCOME");

                entity.Property(p => p.IdElrObservation)
                    .HasColumnName("ID_ELR_OBSERVATION")
                    .IsRequired();

                entity.Property(p => p.CdAction)
                    .HasColumnName("CD_ACTION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(p => p.CdAssignmentType)
                    .HasColumnName("CD_ASSIGNMENT_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsRequired(false);

                entity.Property(p => p.DsAssignmentReason)
                    .HasColumnName("DS_ASSIGNMENT_REASON")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(p => p.IdProfile)
                    .HasColumnName("ID_PROFILE");

                entity.Property(p => p.IdStateno)
                    .HasColumnName("ID_STATENO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(p => p.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(p => p.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(p => p.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsRequired(false);
            });

            modelBuilder.Entity<ElrSearchTemplates>(entity =>
            {
                entity.HasKey(e => e.Id);

                entity.ToTable("ELR_SEARCH_TEMPLATES");

                entity.Property(p => p.Id)
                    .HasColumnName("ID")
                    .IsRequired();

                entity.Property(p => p.CdType)
                   .HasColumnName("CD_TYPE")
                   .HasMaxLength(8)
                   .IsUnicode(false);

                entity.Property(p => p.DsName)
                    .HasColumnName("DS_NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);
              
                entity.Property(p => p.JsData)
                    .HasColumnName("JS_DATA")
                    .IsUnicode(false);

                entity.Property(p => p.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(p => p.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(p => p.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(p => p.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<AlertsDetail>(entity =>
            {
                entity.HasKey(e => e.IdAlertDetailKey);

                entity.ToTable("ALERTS_DETAIL");

                entity.Property(e => e.IdAlertDetailKey).HasColumnName("ID_ALERT_DETAIL_KEY");

                entity.Property(e => e.CdOperand)
                    .IsRequired()
                    .HasColumnName("CD_OPERAND")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdTargetColumn)
                    .IsRequired()
                    .HasColumnName("CD_TARGET_COLUMN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsTargetValue)
                    .IsRequired()
                    .HasColumnName("DS_TARGET_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdAlert).HasColumnName("ID_ALERT");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdStep).HasColumnName("ID_STEP");

                entity.Property(e => e.InAlpha)
                    .HasColumnName("IN_ALPHA")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmrAntibiogram>(entity =>
            {
                entity.HasKey(e => e.IdAntibiogram);

                entity.ToTable("AMR_ANTIBIOGRAM");

                entity.Property(e => e.IdAntibiogram).HasColumnName("ID_ANTIBIOGRAM");

                entity.Property(e => e.AmAge).HasColumnName("AM_AGE");

                entity.Property(e => e.CdAgent)
                    .HasColumnName("CD_AGENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCaHai)
                    .HasColumnName("CD_CA_HAI")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty).HasColumnName("CD_COUNTY");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdOrganismGroup)
                    .HasColumnName("CD_ORGANISM_GROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSnomedConcept)
                    .HasColumnName("CD_SNOMED_CONCEPT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecialTesting)
                    .HasColumnName("CD_SPECIAL_TESTING")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsAlternateResult)
                    .HasColumnName("DS_ALTERNATE_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsClinicalService)
                    .HasColumnName("DS_CLINICAL_SERVICE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsGender)
                    .HasColumnName("DS_GENDER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsInterpretation)
                    .HasColumnName("DS_INTERPRETATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsLocalCode)
                    .HasColumnName("DS_LOCAL_CODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrderingFacility)
                    .HasColumnName("DS_ORDERING_FACILITY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrganism)
                    .HasColumnName("DS_ORGANISM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPatientClass)
                    .HasColumnName("DS_PATIENT_CLASS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsResult)
                    .HasColumnName("DS_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultComparator)
                    .HasColumnName("DS_RESULT_COMPARATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultNumber1)
                    .HasColumnName("DS_RESULT_NUMBER1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultNumber2)
                    .HasColumnName("DS_RESULT_NUMBER2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultSeparator)
                    .HasColumnName("DS_RESULT_SEPARATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSendingApplication)
                    .HasColumnName("DS_SENDING_APPLICATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpecimenId)
                    .HasColumnName("DS_SPECIMEN_ID")
                    .HasMaxLength(202)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpecimenSite)
                    .HasColumnName("DS_SPECIMEN_SITE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTestMethod)
                    .HasColumnName("DS_TEST_METHOD")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsUnits)
                    .HasColumnName("DS_UNITS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAdmit)
                    .HasColumnName("DT_ADMIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtElrInserted)
                    .HasColumnName("DT_ELR_INSERTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdElrObservation).HasColumnName("ID_ELR_OBSERVATION");

                entity.Property(e => e.IdElrOrder).HasColumnName("ID_ELR_ORDER");

                entity.Property(e => e.IdElrPatvisit).HasColumnName("ID_ELR_PATVISIT");

                entity.Property(e => e.IdElrRequest).HasColumnName("ID_ELR_REQUEST");

                entity.Property(e => e.IdFamily).HasColumnName("ID_FAMILY");

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.IdLrv).HasColumnName("ID_LRV");

                entity.Property(e => e.InDisqualify).HasColumnName("IN_DISQUALIFY");

                entity.Property(e => e.InParent).HasColumnName("IN_PARENT");

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmObservation)
                    .HasColumnName("NM_OBSERVATION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NmObservationAlternate)
                    .HasColumnName("NM_OBSERVATION_ALTERNATE")
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmrDrug>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("AMR_DRUG");

                entity.Property(e => e.IdKey).HasColumnName("id_key");

                entity.Property(e => e.CdClass)
                    .IsRequired()
                    .HasColumnName("CD_CLASS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DsMatch)
                    .HasColumnName("DS_MATCH")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsName)
                    .IsRequired()
                    .HasColumnName("DS_NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdDrug).HasColumnName("ID_DRUG");
            });

            modelBuilder.Entity<AmrGroups>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("AMR_GROUPS");

                entity.Property(e => e.IdKey).HasColumnName("id_key");

                entity.Property(e => e.CdGroup)
                    .IsRequired()
                    .HasColumnName("CD_GROUP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdDrug).HasColumnName("ID_DRUG");

                entity.Property(e => e.IdPanel).HasColumnName("ID_PANEL");
            });

            modelBuilder.Entity<AnimalOwner>(entity =>
            {
                entity.HasKey(e => e.IdOwner);

                entity.ToTable("ANIMAL_OWNER");

                entity.Property(e => e.IdOwner)
                    .HasColumnName("ID_OWNER")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr1Name)
                    .HasColumnName("DS_ADDR1_NAME")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr2Name)
                    .HasColumnName("DS_ADDR2_NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhone)
                    .HasColumnName("DS_PHONE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AnimalProfile>(entity =>
            {
                entity.HasKey(e => e.IdAnimalProfile);

                entity.ToTable("ANIMAL_PROFILE");

                entity.HasIndex(e => e.IdChd)
                    .HasName("IDX_ANIMAL_PROFILE_ID_CHD");

                entity.HasIndex(e => e.IdResource)
                    .HasName("IDX_ANIMAL_PROFILE_ID_RESOURCE");

                entity.Property(e => e.IdAnimalProfile)
                    .HasColumnName("ID_ANIMAL_PROFILE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAnimal)
                    .HasColumnName("CD_ANIMAL")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdAnimalType)
                    .HasColumnName("CD_ANIMAL_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCarrier)
                    .HasColumnName("CD_CARRIER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdCountyFound)
                    .HasColumnName("CD_COUNTY_FOUND")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdDeathType)
                    .HasColumnName("CD_DEATH_TYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposureSite)
                    .HasColumnName("CD_EXPOSURE_SITE")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.CdReasonTested)
                    .HasColumnName("CD_REASON_TESTED")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecies)
                    .HasColumnName("CD_SPECIES")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdStateFound)
                    .HasColumnName("CD_STATE_FOUND")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdSymptoms)
                    .HasColumnName("CD_SYMPTOMS")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.CdTypeExposure)
                    .HasColumnName("CD_TYPE_EXPOSURE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr1NameFound)
                    .HasColumnName("DS_ADDR1_NAME_FOUND")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr2NameFound)
                    .HasColumnName("DS_ADDR2_NAME_FOUND")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsAnimalType)
                    .HasColumnName("DS_ANIMAL_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsBreed)
                    .HasColumnName("DS_BREED")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsCityFound)
                    .HasColumnName("DS_CITY_FOUND")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsColor)
                    .HasColumnName("DS_COLOR")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherDeathType)
                    .HasColumnName("DS_OTHER_DEATH_TYPE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherExposureSite)
                    .HasColumnName("DS_OTHER_EXPOSURE_SITE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherExposureType)
                    .HasColumnName("DS_OTHER_EXPOSURE_TYPE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherSymptoms)
                    .HasColumnName("DS_OTHER_SYMPTOMS")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsRptPersonAlternatePhn)
                    .HasColumnName("DS_RPT_PERSON_ALTERNATE_PHN")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsRptPersonPhn)
                    .HasColumnName("DS_RPT_PERSON_PHN")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsTrackingNbr)
                    .HasColumnName("DS_TRACKING_NBR")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsZipFound)
                    .HasColumnName("DS_ZIP_FOUND")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDeath)
                    .HasColumnName("DT_DEATH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExposure)
                    .HasColumnName("DT_EXPOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInoculated)
                    .HasColumnName("DT_INOCULATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLabSent)
                    .HasColumnName("DT_LAB_SENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdAnimal)
                    .HasColumnName("ID_ANIMAL")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChd).HasColumnName("ID_CHD");

                entity.Property(e => e.IdOwner).HasColumnName("ID_OWNER");

                entity.Property(e => e.IdResource).HasColumnName("ID_RESOURCE");

                entity.Property(e => e.IdVictim).HasColumnName("ID_VICTIM");

                entity.Property(e => e.InCatColony)
                    .HasColumnName("IN_CAT_COLONY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHeadNeck)
                    .HasColumnName("IN_HEAD_NECK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInoculated)
                    .HasColumnName("IN_INOCULATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmRptPerson)
                    .HasColumnName("NM_RPT_PERSON")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdChdNavigation)
                    .WithMany(p => p.AnimalProfileIdChdNavigation)
                    .HasForeignKey(d => d.IdChd)
                    .HasConstraintName("FK_ANIMAL_PROFILE_ID_CHD");

                entity.HasOne(d => d.IdResourceNavigation)
                    .WithMany(p => p.AnimalProfileIdResourceNavigation)
                    .HasForeignKey(d => d.IdResource)
                    .HasConstraintName("FK_ANIMAL_PROFILE_ID_RESOURCE");

                entity.HasOne(d => d.IdVictimNavigation)
                    .WithMany(p => p.AnimalProfile)
                    .HasForeignKey(d => d.IdVictim)
                    .HasConstraintName("FK_ID_VICTIM_ANIMAL_VICTIM");
            });

            modelBuilder.Entity<AnimalVictim>(entity =>
            {
                entity.HasKey(e => e.IdVictim);

                entity.ToTable("ANIMAL_VICTIM");

                entity.Property(e => e.IdVictim)
                    .HasColumnName("ID_VICTIM")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr1)
                    .HasColumnName("DS_ADDR1")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr2)
                    .HasColumnName("DS_ADDR2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhone)
                    .HasColumnName("DS_PHONE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArboviralExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("ARBOVIRAL_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCountryVisited)
                    .HasColumnName("CD_COUNTRY_VISITED")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CdPrevDiagCountry)
                    .HasColumnName("CD_PREV_DIAG_COUNTRY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdPrevDiagSerotype)
                    .HasColumnName("CD_PREV_DIAG_SEROTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdPrevDiagYear)
                    .HasColumnName("CD_PREV_DIAG_YEAR")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsDonatedBlood)
                    .IsRequired()
                    .HasColumnName("DS_DONATED_BLOOD")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsMosquitoBite)
                    .IsRequired()
                    .HasColumnName("DS_MOSQUITO_BITE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsMosquitoPrevention)
                    .IsRequired()
                    .HasColumnName("DS_MOSQUITO_PREVENTION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsOccupation)
                    .IsRequired()
                    .HasColumnName("DS_OCCUPATION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsOutsideCounty)
                    .IsRequired()
                    .HasColumnName("DS_OUTSIDE_COUNTY")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsOutsideFlorida)
                    .IsRequired()
                    .HasColumnName("DS_OUTSIDE_FLORIDA")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsOutsideUs)
                    .IsRequired()
                    .HasColumnName("DS_OUTSIDE_US")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsTransfusion)
                    .IsRequired()
                    .HasColumnName("DS_TRANSFUSION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsUnderlyingMedical)
                    .IsRequired()
                    .HasColumnName("DS_UNDERLYING_MEDICAL")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsWeeksPregnant)
                    .IsRequired()
                    .HasColumnName("DS_WEEKS_PREGNANT")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDue)
                    .HasColumnName("DT_DUE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEuropeanEncepVaccine)
                    .HasColumnName("DT_EUROPEAN_ENCEP_VACCINE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFebrileOnset)
                    .HasColumnName("DT_FEBRILE_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtJapaneseEncepVaccine)
                    .HasColumnName("DT_JAPANESE_ENCEP_VACCINE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLastFollowUp)
                    .HasColumnName("DT_LAST_FOLLOW_UP")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtMosquitoNotified)
                    .HasColumnName("DT_MOSQUITO_NOTIFIED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPrevDiag)
                    .HasColumnName("DT_PREV_DIAG")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReturned)
                    .HasColumnName("DT_RETURNED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSpecimenRequested)
                    .HasColumnName("DT_SPECIMEN_REQUESTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtYellowFeverVaccine)
                    .HasColumnName("DT_YELLOW_FEVER_VACCINE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InAnyoneTraveled)
                    .HasColumnName("IN_ANYONE_TRAVELED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBreastfeeding)
                    .IsRequired()
                    .HasColumnName("IN_BREASTFEEDING")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InDeetRepellant)
                    .IsRequired()
                    .HasColumnName("IN_DEET_REPELLANT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InDonatedBlood)
                    .IsRequired()
                    .HasColumnName("IN_DONATED_BLOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InEuropeanEncepVaccine)
                    .IsRequired()
                    .HasColumnName("IN_EUROPEAN_ENCEP_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InExtendedOutdoors)
                    .IsRequired()
                    .HasColumnName("IN_EXTENDED_OUTDOORS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InFebrile)
                    .HasColumnName("IN_FEBRILE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHomeless)
                    .IsRequired()
                    .HasColumnName("IN_HOMELESS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InJapaneseEncephVaccine)
                    .IsRequired()
                    .HasColumnName("IN_JAPANESE_ENCEPH_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InMosquitoBite)
                    .IsRequired()
                    .HasColumnName("IN_MOSQUITO_BITE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InMosquitoNotified)
                    .HasColumnName("IN_MOSQUITO_NOTIFIED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMosquitoPrevention)
                    .IsRequired()
                    .HasColumnName("IN_MOSQUITO_PREVENTION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InMosquitoRepellant)
                    .IsRequired()
                    .HasColumnName("IN_MOSQUITO_REPELLANT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InOutsideCounty)
                    .IsRequired()
                    .HasColumnName("IN_OUTSIDE_COUNTY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InOutsideFlorida)
                    .IsRequired()
                    .HasColumnName("IN_OUTSIDE_FLORIDA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InOutsideUs)
                    .IsRequired()
                    .HasColumnName("IN_OUTSIDE_US")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InPregnant)
                    .IsRequired()
                    .HasColumnName("IN_PREGNANT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InPrevDiag)
                    .HasColumnName("IN_PREV_DIAG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InScreenedWindows)
                    .IsRequired()
                    .HasColumnName("IN_SCREENED_WINDOWS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InSmokeOutdoors)
                    .IsRequired()
                    .HasColumnName("IN_SMOKE_OUTDOORS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InSmoker)
                    .IsRequired()
                    .HasColumnName("IN_SMOKER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InSpecimenForwarded)
                    .HasColumnName("IN_SPECIMEN_FORWARDED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTransfusion)
                    .IsRequired()
                    .HasColumnName("IN_TRANSFUSION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTravelEndemic)
                    .HasColumnName("IN_TRAVEL_ENDEMIC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUnderlyingMedical)
                    .IsRequired()
                    .HasColumnName("IN_UNDERLYING_MEDICAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InYellowFeverVaccine)
                    .IsRequired()
                    .HasColumnName("IN_YELLOW_FEVER_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.ArboviralExt)
                    .HasForeignKey<ArboviralExt>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ID_CASE_ARBOVIRAL_EXT");
            });

            modelBuilder.Entity<Assignment>(entity =>
            {
                entity.ToTable("ASSIGNMENT");

                entity.HasIndex(e => new { e.CdAction, e.IdFamily })
                    .HasName("idx_id_family");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CdAction)
                    .HasColumnName("CD_ACTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdAssignment)
                    .IsRequired()
                    .HasColumnName("CD_ASSIGNMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDisposition)
                    .HasColumnName("CD_DISPOSITION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdRoleAssigned)
                    .IsRequired()
                    .HasColumnName("CD_ROLE_ASSIGNED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAssigned)
                    .HasColumnName("DT_ASSIGNED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPrinted)
                    .HasColumnName("DT_PRINTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtResolved)
                    .HasColumnName("DT_RESOLVED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAssigned)
                    .IsRequired()
                    .HasColumnName("ID_ASSIGNED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdFamily).HasColumnName("ID_FAMILY");

                entity.Property(e => e.IdPreviousAssignment).HasColumnName("ID_PREVIOUS_ASSIGNMENT");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.IdResolved)
                    .HasColumnName("ID_RESOLVED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFamilyNavigation)
                    .WithMany(p => p.Assignment)
                    .HasForeignKey(d => d.IdFamily)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ASSIGNMEN__ID_FA__0F44B16C");

                entity.HasOne(d => d.IdPreviousAssignmentNavigation)
                    .WithMany(p => p.InverseIdPreviousAssignmentNavigation)
                    .HasForeignKey(d => d.IdPreviousAssignment)
                    .HasConstraintName("FK__ASSIGNMEN__ID_PR__112CF9DE");

                entity.HasOne(d => d.IdProfileNavigation)
                    .WithMany(p => p.Assignment)
                    .HasForeignKey(d => d.IdProfile)
                    .HasConstraintName("FK__ASSIGNMEN__ID_PR__1038D5A5");
            });

            modelBuilder.Entity<Audit>(entity =>
            {
                entity.ToTable("AUDIT");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AuditChange>(entity =>
            {
                entity.HasKey(e => new { e.IdAudit, e.IdAuditDetail, e.Id });

                entity.ToTable("AUDIT_CHANGE");

                entity.Property(e => e.IdAudit).HasColumnName("ID_AUDIT");

                entity.Property(e => e.IdAuditDetail).HasColumnName("ID_AUDIT_DETAIL");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DsAttribute)
                    .IsRequired()
                    .HasColumnName("DS_ATTRIBUTE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsNewValue)
                    .HasColumnName("DS_NEW_VALUE")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.DsOldValue)
                    .HasColumnName("DS_OLD_VALUE")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAuditNavigation)
                    .WithMany(p => p.AuditChange)
                    .HasForeignKey(d => new { d.IdAudit, d.IdAuditDetail })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUDIT_DETAIL");
            });

            modelBuilder.Entity<AuditDetail>(entity =>
            {
                entity.HasKey(e => new { e.IdAudit, e.Id });

                entity.ToTable("AUDIT_DETAIL");

                entity.Property(e => e.IdAudit).HasColumnName("ID_AUDIT");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdEntity).HasColumnName("ID_ENTITY");

                entity.HasOne(d => d.IdAuditNavigation)
                    .WithMany(p => p.AuditDetail)
                    .HasForeignKey(d => d.IdAudit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__AUDIT_DET__ID_AU__7A499486");
            });

            modelBuilder.Entity<AutoScenario>(entity =>
            {
                entity.HasKey(e => e.IdAutoScenario);

                entity.ToTable("AUTO_SCENARIO");

                entity.Property(e => e.IdAutoScenario)
                    .HasColumnName("ID_AUTO_SCENARIO")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAutoScenario)
                    .HasColumnName("CD_AUTO_SCENARIO")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdAutoType)
                    .HasColumnName("CD_AUTO_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsCondition)
                    .HasColumnName("DS_CONDITION")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsCounty)
                    .HasColumnName("DS_COUNTY")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsMessage)
                    .HasColumnName("DS_MESSAGE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdPriority).HasColumnName("ID_PRIORITY");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.NmAutoScenario)
                    .HasColumnName("NM_AUTO_SCENARIO")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BacterialExtCommon>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("BACTERIAL_EXT_COMMON");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.DsAge)
                    .HasColumnName("DS_AGE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DsBirthweight)
                    .HasColumnName("DS_BIRTHWEIGHT")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcClusterCode)
                    .HasColumnName("DS_CDC_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsFacilityName)
                    .HasColumnName("DS_FACILITY_NAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsFetusOutcome)
                    .HasColumnName("DS_FETUS_OUTCOME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsFirstPositive)
                    .HasColumnName("DS_FIRST_POSITIVE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsInfectionCaused)
                    .HasColumnName("DS_INFECTION_CAUSED")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrganismOther)
                    .HasColumnName("DS_ORGANISM_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherSterile)
                    .HasColumnName("DS_OTHER_STERILE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfge)
                    .HasColumnName("DS_PFGE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeSecondary)
                    .HasColumnName("DS_PFGE_SECONDARY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsSsIsolatedOther)
                    .HasColumnName("DS_SS_ISOLATED_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsSterileSites)
                    .HasColumnName("DS_STERILE_SITES")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsWgsClusterCode)
                    .HasColumnName("DS_WGS_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFirstPostCult)
                    .HasColumnName("DT_FIRST_POST_CULT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InHospital)
                    .HasColumnName("IN_HOSPITAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InResident)
                    .HasColumnName("IN_RESIDENT")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BatchHistory>(entity =>
            {
                entity.ToTable("BATCH_HISTORY");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BatchType)
                    .IsRequired()
                    .HasColumnName("BATCH_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsError)
                    .HasColumnName("DS_ERROR")
                    .IsUnicode(false);

                entity.Property(e => e.DtRun)
                    .HasColumnName("DT_RUN")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsSuccess)
                    .IsRequired()
                    .HasColumnName("IS_SUCCESS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RunLength).HasColumnName("RUN_LENGTH");
            });

            modelBuilder.Entity<BrucellosisExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("BRUCELLOSIS_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmDurationIllness).HasColumnName("AM_DURATION_ILLNESS");

                entity.Property(e => e.CdBisonAnimalOwner)
                    .HasColumnName("CD_BISON_ANIMAL_OWNER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdBisonProductAcquired)
                    .HasColumnName("CD_BISON_PRODUCT_ACQUIRED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdCattleAnimalOwner)
                    .HasColumnName("CD_CATTLE_ANIMAL_OWNER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdCattleProductAcquired)
                    .HasColumnName("CD_CATTLE_PRODUCT_ACQUIRED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdContactIllness)
                    .HasColumnName("CD_CONTACT_ILLNESS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdDeerAnimalOwner)
                    .HasColumnName("CD_DEER_ANIMAL_OWNER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdDeerProductAcquired)
                    .HasColumnName("CD_DEER_PRODUCT_ACQUIRED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdDogAnimalOwner)
                    .HasColumnName("CD_DOG_ANIMAL_OWNER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdDogProductAcquired)
                    .HasColumnName("CD_DOG_PRODUCT_ACQUIRED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdDurationIllness)
                    .HasColumnName("CD_DURATION_ILLNESS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdElkAnimalOwner)
                    .HasColumnName("CD_ELK_ANIMAL_OWNER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdElkProductAcquired)
                    .HasColumnName("CD_ELK_PRODUCT_ACQUIRED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposureType)
                    .HasColumnName("CD_EXPOSURE_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdGoatAnimalOwner)
                    .HasColumnName("CD_GOAT_ANIMAL_OWNER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdGoatProductAcquired)
                    .HasColumnName("CD_GOAT_PRODUCT_ACQUIRED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabNotPep)
                    .HasColumnName("CD_LAB_NOT_PEP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdOccupationRisk)
                    .HasColumnName("CD_OCCUPATION_RISK")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdOriginalTypeOnset)
                    .HasColumnName("CD_ORIGINAL_TYPE_ONSET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdOtherAnimalOwner)
                    .HasColumnName("CD_OTHER_ANIMAL_OWNER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdOtherProductAcquired)
                    .HasColumnName("CD_OTHER_PRODUCT_ACQUIRED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdPigAnimalOwner)
                    .HasColumnName("CD_PIG_ANIMAL_OWNER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdPigProductAcquired)
                    .HasColumnName("CD_PIG_PRODUCT_ACQUIRED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdSheepAnimalOwner)
                    .HasColumnName("CD_SHEEP_ANIMAL_OWNER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdSheepProductAcquired)
                    .HasColumnName("CD_SHEEP_PRODUCT_ACQUIRED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdTreatmentDuration)
                    .HasColumnName("CD_TREATMENT_DURATION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdTypeOnset)
                    .HasColumnName("CD_TYPE_ONSET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdVaccineExposed)
                    .HasColumnName("CD_VACCINE_EXPOSED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsAnimalsContact)
                    .HasColumnName("DS_ANIMALS_CONTACT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsBisonContactTypeOther)
                    .HasColumnName("DS_BISON_CONTACT_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsBisonProductAcquiredOther)
                    .HasColumnName("DS_BISON_PRODUCT_ACQUIRED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsBisonProductOther)
                    .HasColumnName("DS_BISON_PRODUCT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsCattleContactTypeOther)
                    .HasColumnName("DS_CATTLE_CONTACT_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsCattleProductAcquiredOther)
                    .HasColumnName("DS_CATTLE_PRODUCT_ACQUIRED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsCattleProductOther)
                    .HasColumnName("DS_CATTLE_PRODUCT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactIllness)
                    .HasColumnName("DS_CONTACT_ILLNESS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDeerContactTypeOther)
                    .HasColumnName("DS_DEER_CONTACT_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDeerProductAcquiredOther)
                    .HasColumnName("DS_DEER_PRODUCT_ACQUIRED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDeerProductOther)
                    .HasColumnName("DS_DEER_PRODUCT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDogContactTypeOther)
                    .HasColumnName("DS_DOG_CONTACT_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDogProductAcquiredOther)
                    .HasColumnName("DS_DOG_PRODUCT_ACQUIRED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDogProductOther)
                    .HasColumnName("DS_DOG_PRODUCT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsElkContactTypeOther)
                    .HasColumnName("DS_ELK_CONTACT_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsElkProductAcquiredOther)
                    .HasColumnName("DS_ELK_PRODUCT_ACQUIRED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsElkProductOther)
                    .HasColumnName("DS_ELK_PRODUCT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsGoatContactTypeOther)
                    .HasColumnName("DS_GOAT_CONTACT_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsGoatProductAcquiredOther)
                    .HasColumnName("DS_GOAT_PRODUCT_ACQUIRED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsGoatProductOther)
                    .HasColumnName("DS_GOAT_PRODUCT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsImmunosuppressive)
                    .HasColumnName("DS_IMMUNOSUPPRESSIVE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsLabNotPep)
                    .HasColumnName("DS_LAB_NOT_PEP")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOccupationRisk)
                    .HasColumnName("DS_OCCUPATION_RISK")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherContactTypeOther)
                    .HasColumnName("DS_OTHER_CONTACT_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherProductAcquiredOther)
                    .HasColumnName("DS_OTHER_PRODUCT_ACQUIRED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherProductMeat)
                    .HasColumnName("DS_OTHER_PRODUCT_MEAT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherProductOther)
                    .HasColumnName("DS_OTHER_PRODUCT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPepCourseNotCompleted)
                    .HasColumnName("DS_PEP_COURSE_NOT_COMPLETED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPigContactTypeOther)
                    .HasColumnName("DS_PIG_CONTACT_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPigProductAcquiredOther)
                    .HasColumnName("DS_PIG_PRODUCT_ACQUIRED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPigProductOther)
                    .HasColumnName("DS_PIG_PRODUCT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsProsthesis)
                    .HasColumnName("DS_PROSTHESIS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsSheepContactTypeOther)
                    .HasColumnName("DS_SHEEP_CONTACT_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsSheepProductAcquiredOther)
                    .HasColumnName("DS_SHEEP_PRODUCT_ACQUIRED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsSheepProductOther)
                    .HasColumnName("DS_SHEEP_PRODUCT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOriginalOnset)
                    .HasColumnName("DT_ORIGINAL_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonAnimalContact)
                    .HasColumnName("IN_BISON_ANIMAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonContactTypeBirthing)
                    .HasColumnName("IN_BISON_CONTACT_TYPE_BIRTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonContactTypeHunting)
                    .HasColumnName("IN_BISON_CONTACT_TYPE_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonContactTypeOther)
                    .HasColumnName("IN_BISON_CONTACT_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonContactTypeSkinning)
                    .HasColumnName("IN_BISON_CONTACT_TYPE_SKINNING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonProductCheese)
                    .HasColumnName("IN_BISON_PRODUCT_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonProductMeat)
                    .HasColumnName("IN_BISON_PRODUCT_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonProductMilk)
                    .HasColumnName("IN_BISON_PRODUCT_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonProductOther)
                    .HasColumnName("IN_BISON_PRODUCT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBisonUndercookedConsume)
                    .HasColumnName("IN_BISON_UNDERCOOKED_CONSUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleAnimalContact)
                    .HasColumnName("IN_CATTLE_ANIMAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleContactTypeBirthing)
                    .HasColumnName("IN_CATTLE_CONTACT_TYPE_BIRTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleContactTypeHunting)
                    .HasColumnName("IN_CATTLE_CONTACT_TYPE_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleContactTypeOther)
                    .HasColumnName("IN_CATTLE_CONTACT_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleContactTypeSkinning)
                    .HasColumnName("IN_CATTLE_CONTACT_TYPE_SKINNING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleProductCheese)
                    .HasColumnName("IN_CATTLE_PRODUCT_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleProductMeat)
                    .HasColumnName("IN_CATTLE_PRODUCT_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleProductMilk)
                    .HasColumnName("IN_CATTLE_PRODUCT_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleProductOther)
                    .HasColumnName("IN_CATTLE_PRODUCT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCattleUndercookedConsume)
                    .HasColumnName("IN_CATTLE_UNDERCOOKED_CONSUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactAnimal)
                    .HasColumnName("IN_CONTACT_ANIMAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerAnimalContact)
                    .HasColumnName("IN_DEER_ANIMAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerContactTypeBirthing)
                    .HasColumnName("IN_DEER_CONTACT_TYPE_BIRTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerContactTypeHunting)
                    .HasColumnName("IN_DEER_CONTACT_TYPE_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerContactTypeOther)
                    .HasColumnName("IN_DEER_CONTACT_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerContactTypeSkinning)
                    .HasColumnName("IN_DEER_CONTACT_TYPE_SKINNING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerProductCheese)
                    .HasColumnName("IN_DEER_PRODUCT_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerProductMeat)
                    .HasColumnName("IN_DEER_PRODUCT_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerProductMilk)
                    .HasColumnName("IN_DEER_PRODUCT_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerProductOther)
                    .HasColumnName("IN_DEER_PRODUCT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeerUndercookedConsume)
                    .HasColumnName("IN_DEER_UNDERCOOKED_CONSUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogAnimalContact)
                    .HasColumnName("IN_DOG_ANIMAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogContactTypeBirthing)
                    .HasColumnName("IN_DOG_CONTACT_TYPE_BIRTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogContactTypeHunting)
                    .HasColumnName("IN_DOG_CONTACT_TYPE_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogContactTypeOther)
                    .HasColumnName("IN_DOG_CONTACT_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogContactTypeSkinning)
                    .HasColumnName("IN_DOG_CONTACT_TYPE_SKINNING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogProductCheese)
                    .HasColumnName("IN_DOG_PRODUCT_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogProductMeat)
                    .HasColumnName("IN_DOG_PRODUCT_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogProductMilk)
                    .HasColumnName("IN_DOG_PRODUCT_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogProductOther)
                    .HasColumnName("IN_DOG_PRODUCT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDogUndercookedConsume)
                    .HasColumnName("IN_DOG_UNDERCOOKED_CONSUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkAnimalContact)
                    .HasColumnName("IN_ELK_ANIMAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkContactTypeBirthing)
                    .HasColumnName("IN_ELK_CONTACT_TYPE_BIRTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkContactTypeHunting)
                    .HasColumnName("IN_ELK_CONTACT_TYPE_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkContactTypeOther)
                    .HasColumnName("IN_ELK_CONTACT_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkContactTypeSkinning)
                    .HasColumnName("IN_ELK_CONTACT_TYPE_SKINNING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkProductCheese)
                    .HasColumnName("IN_ELK_PRODUCT_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkProductMeat)
                    .HasColumnName("IN_ELK_PRODUCT_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkProductMilk)
                    .HasColumnName("IN_ELK_PRODUCT_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkProductOther)
                    .HasColumnName("IN_ELK_PRODUCT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElkUndercookedConsume)
                    .HasColumnName("IN_ELK_UNDERCOOKED_CONSUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedReceivedPep)
                    .HasColumnName("IN_EXPOSED_RECEIVED_PEP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedVaccine)
                    .HasColumnName("IN_EXPOSED_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InForm3Uploaded)
                    .HasColumnName("IN_FORM3_UPLOADED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatAnimalContact)
                    .HasColumnName("IN_GOAT_ANIMAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatContactTypeBirthing)
                    .HasColumnName("IN_GOAT_CONTACT_TYPE_BIRTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatContactTypeHunting)
                    .HasColumnName("IN_GOAT_CONTACT_TYPE_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatContactTypeOther)
                    .HasColumnName("IN_GOAT_CONTACT_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatContactTypeSkinning)
                    .HasColumnName("IN_GOAT_CONTACT_TYPE_SKINNING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatProductCheese)
                    .HasColumnName("IN_GOAT_PRODUCT_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatProductMeat)
                    .HasColumnName("IN_GOAT_PRODUCT_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatProductMilk)
                    .HasColumnName("IN_GOAT_PRODUCT_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatProductOther)
                    .HasColumnName("IN_GOAT_PRODUCT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGoatUndercookedConsume)
                    .HasColumnName("IN_GOAT_UNDERCOOKED_CONSUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHospitalized)
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InImmunosuppressive)
                    .HasColumnName("IN_IMMUNOSUPPRESSIVE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLabPep)
                    .HasColumnName("IN_LAB_PEP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOccupationalRisk)
                    .HasColumnName("IN_OCCUPATIONAL_RISK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherAnimalContact)
                    .HasColumnName("IN_OTHER_ANIMAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherContactTypeBirthing)
                    .HasColumnName("IN_OTHER_CONTACT_TYPE_BIRTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherContactTypeHunting)
                    .HasColumnName("IN_OTHER_CONTACT_TYPE_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherContactTypeOther)
                    .HasColumnName("IN_OTHER_CONTACT_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherContactTypeSkinning)
                    .HasColumnName("IN_OTHER_CONTACT_TYPE_SKINNING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherProductCheese)
                    .HasColumnName("IN_OTHER_PRODUCT_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherProductMeat)
                    .HasColumnName("IN_OTHER_PRODUCT_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherProductMilk)
                    .HasColumnName("IN_OTHER_PRODUCT_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherProductOther)
                    .HasColumnName("IN_OTHER_PRODUCT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherUndercookedConsume)
                    .HasColumnName("IN_OTHER_UNDERCOOKED_CONSUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientTravel)
                    .HasColumnName("IN_PATIENT_TRAVEL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPepCourseCompleted)
                    .HasColumnName("IN_PEP_COURSE_COMPLETED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigAnimalContact)
                    .HasColumnName("IN_PIG_ANIMAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigContactTypeBirthing)
                    .HasColumnName("IN_PIG_CONTACT_TYPE_BIRTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigContactTypeHunting)
                    .HasColumnName("IN_PIG_CONTACT_TYPE_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigContactTypeOther)
                    .HasColumnName("IN_PIG_CONTACT_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigContactTypeSkinning)
                    .HasColumnName("IN_PIG_CONTACT_TYPE_SKINNING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigProductCheese)
                    .HasColumnName("IN_PIG_PRODUCT_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigProductMeat)
                    .HasColumnName("IN_PIG_PRODUCT_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigProductMilk)
                    .HasColumnName("IN_PIG_PRODUCT_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigProductOther)
                    .HasColumnName("IN_PIG_PRODUCT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPigUndercookedConsume)
                    .HasColumnName("IN_PIG_UNDERCOOKED_CONSUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPregnantBreast)
                    .HasColumnName("IN_PREGNANT_BREAST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InProsthesis)
                    .HasColumnName("IN_PROSTHESIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepAnimalContact)
                    .HasColumnName("IN_SHEEP_ANIMAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepContactTypeBirthing)
                    .HasColumnName("IN_SHEEP_CONTACT_TYPE_BIRTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepContactTypeHunting)
                    .HasColumnName("IN_SHEEP_CONTACT_TYPE_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepContactTypeOther)
                    .HasColumnName("IN_SHEEP_CONTACT_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepContactTypeSkinning)
                    .HasColumnName("IN_SHEEP_CONTACT_TYPE_SKINNING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepProductCheese)
                    .HasColumnName("IN_SHEEP_PRODUCT_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepProductMeat)
                    .HasColumnName("IN_SHEEP_PRODUCT_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepProductMilk)
                    .HasColumnName("IN_SHEEP_PRODUCT_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepProductOther)
                    .HasColumnName("IN_SHEEP_PRODUCT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSheepUndercookedConsume)
                    .HasColumnName("IN_SHEEP_UNDERCOOKED_CONSUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSimilarIllness)
                    .HasColumnName("IN_SIMILAR_ILLNESS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUnpasteurized)
                    .HasColumnName("IN_UNPASTEURIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWearGloves)
                    .HasColumnName("IN_WEAR_GLOVES")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CaseAntibioticList>(entity =>
            {
                entity.HasKey(e => e.IdCaseAntibiotic);

                entity.ToTable("CASE_ANTIBIOTIC_LIST");

                entity.Property(e => e.IdCaseAntibiotic)
                    .HasColumnName("ID_CASE_ANTIBIOTIC")
                    .ValueGeneratedNever();

                entity.Property(e => e.DsAntibiotic)
                    .HasColumnName("DS_ANTIBIOTIC")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBegin)
                    .HasColumnName("DT_BEGIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("DT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.CaseAntibioticList)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CASE_ANTIBIOTIC_LIST_CASE");
            });

            modelBuilder.Entity<CaseDef>(entity =>
            {
                entity.HasKey(e => e.IdCaseDef);

                entity.ToTable("CASE_DEF");

                entity.Property(e => e.IdCaseDef)
                    .HasColumnName("ID_CASE_DEF")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .IsRequired()
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('01/01/1900')");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InSmart).HasColumnName("IN_SMART");
            });

            modelBuilder.Entity<CaseDefinitionAnswers>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdSequence });

                entity.ToTable("CASE_DEFINITION_ANSWERS");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.DsPromptInfo)
                    .IsRequired()
                    .HasColumnName("DS_PROMPT_INFO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InAnswer)
                    .IsRequired()
                    .HasColumnName("IN_ANSWER")
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CaseDefinitionQuestions>(entity =>
            {
                entity.HasKey(e => e.IdSequence);

                entity.ToTable("CASE_DEFINITION_QUESTIONS");

                entity.Property(e => e.IdSequence)
                    .HasColumnName("ID_SEQUENCE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPrompt)
                    .HasColumnName("DS_PROMPT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPromptType)
                    .HasColumnName("DS_PROMPT_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsQuestion)
                    .IsRequired()
                    .HasColumnName("DS_QUESTION")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsScriptName)
                    .HasColumnName("DS_SCRIPT_NAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCaseDef).HasColumnName("ID_CASE_DEF");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");
            });

            modelBuilder.Entity<CaseDefinitionText>(entity =>
            {
                entity.HasKey(e => e.CdIcd9);

                entity.ToTable("CASE_DEFINITION_TEXT");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DsCaseDefText)
                    .IsRequired()
                    .HasColumnName("DS_CASE_DEF_TEXT")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CaseDefItem>(entity =>
            {
                entity.HasKey(e => e.IdCaseDefItem);

                entity.ToTable("CASE_DEF_ITEM");

                entity.Property(e => e.IdCaseDefItem)
                    .HasColumnName("ID_CASE_DEF_ITEM")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdControlType)
                    .HasColumnName("CD_CONTROL_TYPE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsItemText)
                    .IsRequired()
                    .HasColumnName("DS_ITEM_TEXT")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsTargetControl)
                    .HasColumnName("DS_TARGET_CONTROL")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdCaseDefItemNavigation)
                    .WithOne(p => p.InverseIdCaseDefItemNavigation)
                    .HasForeignKey<CaseDefItem>(d => d.IdCaseDefItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CASE_DEF_ORDER_ID_CASE_DEF_ITEM");
            });

            modelBuilder.Entity<CaseDefOrder>(entity =>
            {
                entity.HasKey(e => e.IdCaseDefOrder);

                entity.ToTable("CASE_DEF_ORDER");

                entity.Property(e => e.IdCaseDefOrder)
                    .HasColumnName("ID_CASE_DEF_ORDER")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmInterpret).HasColumnName("AM_INTERPRET");

                entity.Property(e => e.AmInterpretTo).HasColumnName("AM_INTERPRET_TO");

                entity.Property(e => e.CdInterpret)
                    .HasColumnName("CD_INTERPRET")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsInterpret)
                    .HasColumnName("DS_INTERPRET")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsLengthOfDays)
                    .HasColumnName("DS_LENGTH_OF_DAYS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdCaseDef).HasColumnName("ID_CASE_DEF");

                entity.Property(e => e.IdCaseDefItem).HasColumnName("ID_CASE_DEF_ITEM");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdPaintSequence).HasColumnName("ID_PAINT_SEQUENCE");

                entity.Property(e => e.InStateOnly)
                    .HasColumnName("IN_STATE_ONLY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseDefNavigation)
                    .WithMany(p => p.CaseDefOrder)
                    .HasForeignKey(d => d.IdCaseDef)
                    .HasConstraintName("FK_CASE_DEF_ORDER_ID_CASE_DEF");
            });

            modelBuilder.Entity<CaseDefOutcome>(entity =>
            {
                entity.HasKey(e => e.IdOutcome);

                entity.ToTable("CASE_DEF_OUTCOME");

                entity.Property(e => e.IdOutcome)
                    .HasColumnName("ID_OUTCOME")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmSymptom)
                    .HasColumnName("AM_SYMPTOM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CdOutcomeDxStatus)
                    .HasColumnName("CD_OUTCOME_DX_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsAnswerSet)
                    .IsRequired()
                    .HasColumnName("DS_ANSWER_SET")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdCaseDef).HasColumnName("ID_CASE_DEF");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdPriority).HasColumnName("ID_PRIORITY");

                entity.HasOne(d => d.IdCaseDefNavigation)
                    .WithMany(p => p.CaseDefOutcome)
                    .HasForeignKey(d => d.IdCaseDef)
                    .HasConstraintName("FK_CASE_DEF_OUTCOME_ID_CASE_DEF");
            });

            modelBuilder.Entity<CaseNotes>(entity =>
            {
                entity.HasKey(e => new { e.IdNote, e.IdOrder });

                entity.ToTable("CASE_NOTES");

                entity.HasIndex(e => e.IdCase)
                    .HasName("CASE_NOTES22");

                entity.HasIndex(e => e.IdSequence)
                    .HasName("idx_id_seq");

                entity.Property(e => e.IdNote).HasColumnName("ID_NOTE");

                entity.Property(e => e.IdOrder)
                    .HasColumnName("ID_ORDER")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.CdCorrType)
                    .HasColumnName("CD_CORR_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdDeleteReason)
                    .HasColumnName("CD_DELETE_REASON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdQualityReason)
                    .HasColumnName("CD_QUALITY_REASON")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdReason)
                    .HasColumnName("CD_REASON")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAuthor)
                    .HasColumnName("DS_AUTHOR")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCaseNote)
                    .HasColumnName("DT_CASE_NOTE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdAnimalProfile).HasColumnName("ID_ANIMAL_PROFILE");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdElrObservation).HasColumnName("ID_ELR_OBSERVATION");

                entity.Property(e => e.IdElrOrder).HasColumnName("ID_ELR_ORDER");

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");
            });

            modelBuilder.Entity<CaseReportForms>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("CASE_REPORT_FORMS");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReceived)
                    .HasColumnName("DT_RECEIVED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InReviewed)
                    .HasColumnName("IN_REVIEWED")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CaseSymptom>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.CdSymptom });

                entity.ToTable("CASE_SYMPTOM");

                entity.HasIndex(e => e.IdCase)
                    .HasName("IDX_CASE_SYMPTOM_ID_CASE");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.CdSymptom)
                    .HasColumnName("CD_SYMPTOM")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmOnsetTime)
                    .HasColumnName("AM_ONSET_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsSymptomOther)
                    .HasColumnName("DS_SYMPTOM_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtOnset)
                    .HasColumnName("DT_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.CdSymptomNavigation)
                    .WithMany(p => p.CaseSymptom)
                    .HasForeignKey(d => d.CdSymptom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CASE_SYMPTOM_CD_SYMPTOM");
            });

            modelBuilder.Entity<CaseTaskList>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("CASE_TASK_LIST");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCounty).HasColumnName("CD_COUNTY");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdInvestigator)
                    .HasColumnName("CD_INVESTIGATOR")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReminder)
                    .HasColumnName("DT_REMINDER")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAutoCreated).HasColumnName("IN_AUTO_CREATED");

                entity.Property(e => e.InInterview).HasColumnName("IN_INTERVIEW");

                entity.Property(e => e.InMissingElements).HasColumnName("IN_MISSING_ELEMENTS");

                entity.Property(e => e.InMissingLab).HasColumnName("IN_MISSING_LAB");

                entity.Property(e => e.InNonFlorida).HasColumnName("IN_NON_FLORIDA");

                entity.Property(e => e.InQiCandidate).HasColumnName("IN_QI_CANDIDATE");
            });

            modelBuilder.Entity<CdcHl7Control>(entity =>
            {
                entity.HasKey(e => e.IdHl7);

                entity.ToTable("CDC_HL7_CONTROL");

                entity.Property(e => e.IdHl7).HasColumnName("ID_HL7");

                entity.Property(e => e.AmCases).HasColumnName("AM_CASES");

                entity.Property(e => e.DtHl7Built)
                    .HasColumnName("DT_HL7_BUILT")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CdcHl7Transmission>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("CDC_HL7_TRANSMISSION");

                entity.Property(e => e.IdKey).HasColumnName("ID_KEY");

                entity.Property(e => e.CdHl7Flag)
                    .HasColumnName("CD_HL7_FLAG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DsHl7Message)
                    .HasColumnName("DS_HL7_MESSAGE")
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPicked)
                    .HasColumnName("DT_PICKED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdHl7).HasColumnName("ID_HL7");
            });

            modelBuilder.Entity<CdcTransReference>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("CDC_TRANS_REFERENCE");

                entity.Property(e => e.IdKey).HasColumnName("ID_KEY");

                entity.Property(e => e.CdConvertedValue)
                    .HasColumnName("CD_CONVERTED_VALUE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdHl7DataElement)
                    .HasColumnName("CD_HL7_DATA_ELEMENT")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CdHl7DataElementCodeSystem)
                    .HasColumnName("CD_HL7_DATA_ELEMENT_CODE_SYSTEM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CdHl7DataType)
                    .HasColumnName("CD_HL7_DATA_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcFieldName)
                    .HasColumnName("DS_CDC_FIELD_NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcFieldType)
                    .HasColumnName("DS_CDC_FIELD_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcFormat)
                    .HasColumnName("DS_CDC_FORMAT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcLength).HasColumnName("DS_CDC_LENGTH");

                entity.Property(e => e.DsCdcOrder).HasColumnName("DS_CDC_ORDER");

                entity.Property(e => e.DsHl7DataElement)
                    .HasColumnName("DS_HL7_DATA_ELEMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHl7Segment)
                    .HasColumnName("DS_HL7_SEGMENT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsJoinKey)
                    .HasColumnName("DS_JOIN_KEY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsJoinTable)
                    .HasColumnName("DS_JOIN_TABLE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSourceField)
                    .HasColumnName("DS_SOURCE_FIELD")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSourceTable)
                    .HasColumnName("DS_SOURCE_TABLE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTargetField)
                    .HasColumnName("DS_TARGET_FIELD")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTargetValue)
                    .HasColumnName("DS_TARGET_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsUnits)
                    .HasColumnName("DS_UNITS")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChronicScenario>(entity =>
            {
                entity.HasKey(e => e.IdScenario);

                entity.ToTable("CHRONIC_SCENARIO");

                entity.Property(e => e.IdScenario)
                    .HasColumnName("ID_SCENARIO")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdDxStatus)
                    .HasColumnName("CD_DX_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestType1)
                    .HasColumnName("CD_TEST_TYPE1")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestType2)
                    .HasColumnName("CD_TEST_TYPE2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsCondition1)
                    .HasColumnName("DS_CONDITION1")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.DsResult1)
                    .HasColumnName("DS_RESULT1")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResult2)
                    .HasColumnName("DS_RESULT2")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsScenario)
                    .HasColumnName("DS_SCENARIO")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");
            });

            modelBuilder.Entity<CiguateraExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("CIGUATERA_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmFishConsumed).HasColumnName("AM_FISH_CONSUMED");

                entity.Property(e => e.AmFishEatenTime)
                    .HasColumnName("AM_FISH_EATEN_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmFishLength).HasColumnName("AM_FISH_LENGTH");

                entity.Property(e => e.AmFishWeight)
                    .HasColumnName("AM_FISH_WEIGHT")
                    .HasColumnType("decimal(18, 1)");

                entity.Property(e => e.CdCiguateraBefore)
                    .HasColumnName("CD_CIGUATERA_BEFORE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFishTaste)
                    .HasColumnName("CD_FISH_TASTE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdStateCompany)
                    .HasColumnName("CD_STATE_COMPANY")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestingResult)
                    .HasColumnName("CD_TESTING_RESULT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr1Company)
                    .HasColumnName("DS_ADDR1_COMPANY")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr2Company)
                    .HasColumnName("DS_ADDR2_COMPANY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsAllergies)
                    .HasColumnName("DS_ALLERGIES")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsCityCompany)
                    .HasColumnName("DS_CITY_COMPANY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsFishPartConsumed)
                    .HasColumnName("DS_FISH_PART_CONSUMED")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsFishSentWhom)
                    .HasColumnName("DS_FISH_SENT_WHOM")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsFishTypeOther)
                    .HasColumnName("DS_FISH_TYPE_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsGpsVendorLocation)
                    .HasColumnName("DS_GPS_VENDOR_LOCATION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsInsecticidesKind)
                    .HasColumnName("DS_INSECTICIDES_KIND")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsInsecticidesPlace)
                    .HasColumnName("DS_INSECTICIDES_PLACE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsPlaceFishTesting)
                    .HasColumnName("DS_PLACE_FISH_TESTING")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsPlaceObtainedOther)
                    .HasColumnName("DS_PLACE_OBTAINED_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsSymptomComplaint)
                    .HasColumnName("DS_SYMPTOM_COMPLAINT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsZipCompany)
                    .HasColumnName("DS_ZIP_COMPANY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFishEaten)
                    .HasColumnName("DT_FISH_EATEN")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFishHarvested)
                    .HasColumnName("DT_FISH_HARVESTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInsecticides)
                    .HasColumnName("DT_INSECTICIDES")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAllergiesKnown)
                    .HasColumnName("IN_ALLERGIES_KNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeAlcohol)
                    .HasColumnName("IN_CONSUME_ALCOHOL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDiagnosedCiguatera)
                    .HasColumnName("IN_DIAGNOSED_CIGUATERA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedInsecticides)
                    .HasColumnName("IN_EXPOSED_INSECTICIDES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishAmberjack)
                    .HasColumnName("IN_FISH_AMBERJACK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishBarracuda)
                    .HasColumnName("IN_FISH_BARRACUDA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishGrouper)
                    .HasColumnName("IN_FISH_GROUPER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishHogfish)
                    .HasColumnName("IN_FISH_HOGFISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishLeft)
                    .HasColumnName("IN_FISH_LEFT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishMahiMahi)
                    .HasColumnName("IN_FISH_MAHI_MAHI")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishOther)
                    .HasColumnName("IN_FISH_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishSendTesting)
                    .HasColumnName("IN_FISH_SEND_TESTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishShared)
                    .HasColumnName("IN_FISH_SHARED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishSnapper)
                    .HasColumnName("IN_FISH_SNAPPER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFishUnknown)
                    .HasColumnName("IN_FISH_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHadCiguateraBefore)
                    .HasColumnName("IN_HAD_CIGUATERA_BEFORE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPlaceObtainedFriend)
                    .HasColumnName("IN_PLACE_OBTAINED_FRIEND")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPlaceObtainedGrocerMarket)
                    .HasColumnName("IN_PLACE_OBTAINED_GROCER_MARKET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPlaceObtainedOther)
                    .HasColumnName("IN_PLACE_OBTAINED_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPlaceObtainedRestaurant)
                    .HasColumnName("IN_PLACE_OBTAINED_RESTAURANT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPlaceObtainedSelfHarvested)
                    .HasColumnName("IN_PLACE_OBTAINED_SELF_HARVESTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPlaceObtainedUnknown)
                    .HasColumnName("IN_PLACE_OBTAINED_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivedTreatment)
                    .HasColumnName("IN_RECEIVED_TREATMENT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTestingResults)
                    .HasColumnName("IN_TESTING_RESULTS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmCompany)
                    .HasColumnName("NM_COMPANY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.CiguateraExt)
                    .HasForeignKey<CiguateraExt>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CIGUATERA_EPI_CASE");
            });

            modelBuilder.Entity<Codes>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("CODES");

                entity.HasIndex(e => e.CdValue)
                    .HasName("ix_CD_VALUE");

                entity.HasIndex(e => e.IdSequence)
                    .HasName("idx_ID_SEQUENCE");

                entity.HasIndex(e => new { e.CdType, e.CdValue })
                    .HasName("IDX_CODES_TYPE_VALUE");

                entity.HasIndex(e => new { e.CdType, e.CdValue, e.DsDesc })
                    .HasName("unique_cd_type_cd_value")
                    .IsUnique()
                    .ForSqlServerIsClustered();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CdCdc)
                    .HasColumnName("CD_CDC")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdPhinType)
                    .HasColumnName("CD_PHIN_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdPhinValue)
                    .HasColumnName("CD_PHIN_VALUE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdValue)
                    .IsRequired()
                    .HasColumnName("CD_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAssociation)
                    .IsRequired()
                    .HasColumnName("DS_ASSOCIATION")
                    .HasMaxLength(125)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDesc)
                    .IsRequired()
                    .HasColumnName("DS_DESC")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsElement)
                    .HasColumnName("DS_ELEMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.InOfInterest)
                    .HasColumnName("IN_OF_INTEREST")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("COMMENT");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DsComment)
                    .IsRequired()
                    .HasColumnName("DS_COMMENT")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdEntity).HasColumnName("ID_ENTITY");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.IdType).HasColumnName("ID_TYPE");

                entity.HasOne(d => d.IdProfileNavigation)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.IdProfile)
                    .HasConstraintName("FK__COMMENT__ID_PROF__532FC765");
            });

            modelBuilder.Entity<ContactVaccinationHistory>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdContact, e.CdContactType, e.CdTestType, e.VaccHistoryCtr })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("CONTACT_VACCINATION_HISTORY");

                entity.HasIndex(e => e.IdCase)
                    .HasName("IX_CONTACT_VACC_HISTORY_CASE");

                entity.HasIndex(e => e.IdContact)
                    .HasName("IX_CONTACT_VACC_HISTORY_CONTACT");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdContact).HasColumnName("ID_CONTACT");

                entity.Property(e => e.CdContactType)
                    .HasColumnName("CD_CONTACT_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestType)
                    .HasColumnName("CD_TEST_TYPE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.VaccHistoryCtr)
                    .HasColumnName("VACC_HISTORY_CTR")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.DsDosage)
                    .IsRequired()
                    .HasColumnName("DS_DOSAGE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsResult)
                    .IsRequired()
                    .HasColumnName("DS_RESULT")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdminstered)
                    .HasColumnName("DT_ADMINSTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.NmAdministrator)
                    .IsRequired()
                    .HasColumnName("NM_ADMINISTRATOR")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmManufacturer)
                    .IsRequired()
                    .HasColumnName("NM_MANUFACTURER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<ContiguousCounty>(entity =>
            {
                entity.HasKey(e => new { e.CdCounty, e.CdContiguousCounty });

                entity.ToTable("CONTIGUOUS_COUNTY");

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CdContiguousCounty)
                    .HasColumnName("CD_CONTIGUOUS_COUNTY")
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoPoisoningExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("CO_POISONING_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdExposure)
                    .HasColumnName("CD_EXPOSURE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdIntent)
                    .HasColumnName("CD_INTENT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdSiteExposure)
                    .HasColumnName("CD_SITE_EXPOSURE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposure)
                    .HasColumnName("DS_EXPOSURE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsSiteExposure)
                    .HasColumnName("DS_SITE_EXPOSURE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsWorkRelated)
                    .HasColumnName("DS_WORK_RELATED")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InWorkRelated)
                    .HasColumnName("IN_WORK_RELATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.CoPoisoningExt)
                    .HasForeignKey<CoPoisoningExt>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COPOISONING_EPI_CASE");
            });

            modelBuilder.Entity<Counties>(entity =>
            {
                entity.ToTable("counties");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.County)
                    .HasColumnName("county")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<County>(entity =>
            {
                entity.HasKey(e => e.CdCounty);

                entity.ToTable("COUNTY");

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdHalRegion)
                    .HasColumnName("CD_HAL_REGION")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdRegion).HasColumnName("CD_REGION");

                entity.Property(e => e.CdSize)
                    .HasColumnName("CD_SIZE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTimezone)
                    .HasColumnName("CD_TIMEZONE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmName)
                    .IsRequired()
                    .HasColumnName("NM_NAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CyclosporiasisExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("CYCLOSPORIASIS_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdObtainContactInfo)
                    .HasColumnName("CD_OBTAIN_CONTACT_INFO")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsEventDetail)
                    .HasColumnName("DS_EVENT_DETAIL")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpFreshBerriesBrand)
                    .HasColumnName("DS_EXP_FRESH_BERRIES_BRAND")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpFreshBerriesOther)
                    .HasColumnName("DS_EXP_FRESH_BERRIES_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpFreshHerbsBrand)
                    .HasColumnName("DS_EXP_FRESH_HERBS_BRAND")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpFreshHerbsOther)
                    .HasColumnName("DS_EXP_FRESH_HERBS_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpFreshProduceBrand)
                    .HasColumnName("DS_EXP_FRESH_PRODUCE_BRAND")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpFreshProduceFruitType)
                    .HasColumnName("DS_EXP_FRESH_PRODUCE_FRUIT_TYPE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpFreshProduceOther)
                    .HasColumnName("DS_EXP_FRESH_PRODUCE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpLettuceBrand)
                    .HasColumnName("DS_EXP_LETTUCE_BRAND")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpLettuceOther)
                    .HasColumnName("DS_EXP_LETTUCE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsMedicationOther)
                    .HasColumnName("DS_MEDICATION_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsObtainContactComments)
                    .HasColumnName("DS_OBTAIN_CONTACT_COMMENTS")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEvent)
                    .HasColumnName("DT_EVENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshBerries)
                    .HasColumnName("IN_EXP_FRESH_BERRIES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshBerriesBlackRaspberries)
                    .HasColumnName("IN_EXP_FRESH_BERRIES_BLACK_RASPBERRIES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshBerriesBlackberries)
                    .HasColumnName("IN_EXP_FRESH_BERRIES_BLACKBERRIES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshBerriesBlueberries)
                    .HasColumnName("IN_EXP_FRESH_BERRIES_BLUEBERRIES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshBerriesGoldenRaspberries)
                    .HasColumnName("IN_EXP_FRESH_BERRIES_GOLDEN_RASPBERRIES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshBerriesOther)
                    .HasColumnName("IN_EXP_FRESH_BERRIES_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshBerriesRaspberries)
                    .HasColumnName("IN_EXP_FRESH_BERRIES_RASPBERRIES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshBerriesStrawberries)
                    .HasColumnName("IN_EXP_FRESH_BERRIES_STRAWBERRIES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshBerriesUnk)
                    .HasColumnName("IN_EXP_FRESH_BERRIES_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbs)
                    .HasColumnName("IN_EXP_FRESH_HERBS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsBasil)
                    .HasColumnName("IN_EXP_FRESH_HERBS_BASIL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsBasilPurple)
                    .HasColumnName("IN_EXP_FRESH_HERBS_BASIL_PURPLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsBasilSweet)
                    .HasColumnName("IN_EXP_FRESH_HERBS_BASIL_SWEET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsBasilThai)
                    .HasColumnName("IN_EXP_FRESH_HERBS_BASIL_THAI")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsCilantro)
                    .HasColumnName("IN_EXP_FRESH_HERBS_CILANTRO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsDill)
                    .HasColumnName("IN_EXP_FRESH_HERBS_DILL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsMint)
                    .HasColumnName("IN_EXP_FRESH_HERBS_MINT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsOregano)
                    .HasColumnName("IN_EXP_FRESH_HERBS_OREGANO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsOther)
                    .HasColumnName("IN_EXP_FRESH_HERBS_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsParsley)
                    .HasColumnName("IN_EXP_FRESH_HERBS_PARSLEY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsRosemary)
                    .HasColumnName("IN_EXP_FRESH_HERBS_ROSEMARY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsThyme)
                    .HasColumnName("IN_EXP_FRESH_HERBS_THYME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshHerbsUnk)
                    .HasColumnName("IN_EXP_FRESH_HERBS_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshProduce)
                    .HasColumnName("IN_EXP_FRESH_PRODUCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshProduceFruit)
                    .HasColumnName("IN_EXP_FRESH_PRODUCE_FRUIT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshProduceOther)
                    .HasColumnName("IN_EXP_FRESH_PRODUCE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshProduceSnowPeas)
                    .HasColumnName("IN_EXP_FRESH_PRODUCE_SNOW_PEAS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpFreshProduceUnk)
                    .HasColumnName("IN_EXP_FRESH_PRODUCE_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpLettuce)
                    .HasColumnName("IN_EXP_LETTUCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpLettuceArugula)
                    .HasColumnName("IN_EXP_LETTUCE_ARUGULA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpLettuceIceberg)
                    .HasColumnName("IN_EXP_LETTUCE_ICEBERG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpLettuceMesclun)
                    .HasColumnName("IN_EXP_LETTUCE_MESCLUN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpLettuceOther)
                    .HasColumnName("IN_EXP_LETTUCE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpLettuceRomaine)
                    .HasColumnName("IN_EXP_LETTUCE_ROMAINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExpLettuceUnk)
                    .HasColumnName("IN_EXP_LETTUCE_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InKnowOtherIllPersons)
                    .HasColumnName("IN_KNOW_OTHER_ILL_PERSONS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMedicationOther)
                    .HasColumnName("IN_MEDICATION_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMedicationTrimethoprimSulfa)
                    .HasColumnName("IN_MEDICATION_TRIMETHOPRIM_SULFA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMedicationUnk)
                    .HasColumnName("IN_MEDICATION_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientAllergic)
                    .HasColumnName("IN_PATIENT_ALLERGIC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientAttend)
                    .HasColumnName("IN_PATIENT_ATTEND")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientHospitalized)
                    .HasColumnName("IN_PATIENT_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientTreated)
                    .HasColumnName("IN_PATIENT_TREATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravel)
                    .HasColumnName("IN_TRAVEL")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DeployArea>(entity =>
            {
                entity.HasKey(e => e.IdArea);

                entity.ToTable("DEPLOY_AREA");

                entity.Property(e => e.IdArea).HasColumnName("ID_AREA");

                entity.Property(e => e.CdAreaStatus)
                    .IsRequired()
                    .HasColumnName("CD_AREA_STATUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAreaGeocoding)
                    .HasColumnName("DS_AREA_GEOCODING")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.DsGroundzero)
                    .HasColumnName("DS_GROUNDZERO")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("DT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStart)
                    .HasColumnName("DT_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.NmArea)
                    .IsRequired()
                    .HasColumnName("NM_AREA")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOutbreakNavigation)
                    .WithMany(p => p.DeployArea)
                    .HasForeignKey(d => d.IdOutbreak)
                    .HasConstraintName("FK_OUTBREAK");
            });

            modelBuilder.Entity<DeployAreaSurvey>(entity =>
            {
                entity.HasKey(e => new { e.IdArea, e.IdSurvey });

                entity.ToTable("DEPLOY_AREA_SURVEY");

                entity.Property(e => e.IdArea).HasColumnName("ID_AREA");

                entity.Property(e => e.IdSurvey).HasColumnName("ID_SURVEY");

                entity.Property(e => e.CdAreaSurveyType)
                    .IsRequired()
                    .HasColumnName("CD_AREA_SURVEY_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaNavigation)
                    .WithMany(p => p.DeployAreaSurvey)
                    .HasForeignKey(d => d.IdArea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AREA_SURVEY");

                entity.HasOne(d => d.IdSurveyNavigation)
                    .WithMany(p => p.DeployAreaSurvey)
                    .HasForeignKey(d => d.IdSurvey)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SURVEY");
            });

            modelBuilder.Entity<DeployLocation>(entity =>
            {
                entity.HasKey(e => new { e.IdArea, e.IdLocation });

                entity.ToTable("DEPLOY_LOCATION");

                entity.HasIndex(e => new { e.IdArea, e.IdGisToolParcel, e.IdLocation })
                    .HasName("IDX_LOCATION_ID_LOCATION");

                entity.Property(e => e.IdArea).HasColumnName("ID_AREA");

                entity.Property(e => e.IdLocation)
                    .HasColumnName("ID_LOCATION")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AmLatitude)
                    .HasColumnName("AM_LATITUDE")
                    .HasColumnType("decimal(9, 6)");

                entity.Property(e => e.AmLongitude)
                    .HasColumnName("AM_LONGITUDE")
                    .HasColumnType("decimal(9, 6)");

                entity.Property(e => e.AmNumOfBuildings).HasColumnName("AM_NUM_OF_BUILDINGS");

                entity.Property(e => e.AmNumOfUnits).HasColumnName("AM_NUM_OF_UNITS");

                entity.Property(e => e.CdClosure)
                    .HasColumnName("CD_CLOSURE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLocationStatus)
                    .IsRequired()
                    .HasColumnName("CD_LOCATION_STATUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLocationType)
                    .HasColumnName("CD_LOCATION_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutcome)
                    .HasColumnName("CD_OUTCOME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdParcelType)
                    .HasColumnName("CD_PARCEL_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .IsRequired()
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddress1)
                    .IsRequired()
                    .HasColumnName("DS_ADDRESS1")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddress2)
                    .HasColumnName("DS_ADDRESS2")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .IsRequired()
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsReturn)
                    .HasColumnName("DS_RETURN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsTracking)
                    .HasColumnName("DS_TRACKING")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .IsRequired()
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdGisToolParcel).HasColumnName("ID_GIS_TOOL_PARCEL");

                entity.Property(e => e.IdSurveyInstance).HasColumnName("ID_SURVEY_INSTANCE");

                entity.Property(e => e.NmLocation)
                    .HasColumnName("NM_LOCATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaNavigation)
                    .WithMany(p => p.DeployLocation)
                    .HasForeignKey(d => d.IdArea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AREA");

                entity.HasOne(d => d.IdSurveyInstanceNavigation)
                    .WithMany(p => p.DeployLocation)
                    .HasForeignKey(d => d.IdSurveyInstance)
                    .HasConstraintName("FK_SURVEY_INSTANCE");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.DeployLocation)
                    .HasForeignKey(d => new { d.IdArea, d.IdGisToolParcel })
                    .HasConstraintName("FK_GIS_TOOL_PARCEL");
            });

            modelBuilder.Entity<Deployment>(entity =>
            {
                entity.HasKey(e => e.IdDeployment);

                entity.ToTable("DEPLOYMENT");

                entity.Property(e => e.IdDeployment).HasColumnName("ID_DEPLOYMENT");

                entity.Property(e => e.CdDeploymentStatus)
                    .HasColumnName("CD_DEPLOYMENT_STATUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsContact)
                    .HasColumnName("DS_CONTACT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsToken)
                    .HasColumnName("DS_TOKEN")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCheckin)
                    .HasColumnName("DT_CHECKIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCheckout)
                    .HasColumnName("DT_CHECKOUT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDeployment)
                    .HasColumnName("DT_DEPLOYMENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdArea).HasColumnName("ID_AREA");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdUserField)
                    .HasColumnName("ID_USER_FIELD")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.JsIncoming)
                    .HasColumnName("JS_INCOMING")
                    .IsUnicode(false);

                entity.Property(e => e.JsOutgoing)
                    .HasColumnName("JS_OUTGOING")
                    .IsUnicode(false);

                entity.Property(e => e.NmDeployment)
                    .HasColumnName("NM_DEPLOYMENT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAreaNavigation)
                    .WithMany(p => p.Deployment)
                    .HasForeignKey(d => d.IdArea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DEPLOY_AREA");
            });

            modelBuilder.Entity<DeployPerson>(entity =>
            {
                entity.HasKey(e => new { e.IdArea, e.IdLocation, e.IdPerson });

                entity.ToTable("DEPLOY_PERSON");

                entity.Property(e => e.IdArea).HasColumnName("ID_AREA");

                entity.Property(e => e.IdLocation).HasColumnName("ID_LOCATION");

                entity.Property(e => e.IdPerson)
                    .HasColumnName("ID_PERSON")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CdConsentInterview)
                    .HasColumnName("CD_CONSENT_INTERVIEW")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdConsentSpecimen)
                    .HasColumnName("CD_CONSENT_SPECIMEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdGender)
                    .HasColumnName("CD_GENDER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdPersonStatus)
                    .IsRequired()
                    .HasColumnName("CD_PERSON_STATUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSuffix)
                    .HasColumnName("CD_SUFFIX")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.InEligible).HasColumnName("IN_ELIGIBLE");

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NmMiddle)
                    .HasColumnName("NM_MIDDLE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.DeployPerson)
                    .HasForeignKey(d => d.IdCase)
                    .HasConstraintName("FK_EPI_CASE");

                entity.HasOne(d => d.IdProfileNavigation)
                    .WithMany(p => p.DeployPerson)
                    .HasForeignKey(d => d.IdProfile)
                    .HasConstraintName("FK_PROFILE_PERSON");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.DeployPerson)
                    .HasForeignKey(d => new { d.IdArea, d.IdLocation })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LOCATION_PERSON");
            });

            modelBuilder.Entity<DeployTag>(entity =>
            {
                entity.HasKey(e => new { e.IdArea, e.IdLocation, e.IdTag });

                entity.ToTable("DEPLOY_TAG");

                entity.Property(e => e.IdArea).HasColumnName("ID_AREA");

                entity.Property(e => e.IdLocation).HasColumnName("ID_LOCATION");

                entity.Property(e => e.IdTag)
                    .HasColumnName("ID_TAG")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CdTagType)
                    .HasColumnName("CD_TAG_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTag)
                    .HasColumnName("DS_TAG")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.DeployTag)
                    .HasForeignKey(d => new { d.IdArea, d.IdLocation })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LOCATION_TAG");
            });

            modelBuilder.Entity<DeployVisit>(entity =>
            {
                entity.HasKey(e => new { e.IdDeployment, e.IdArea, e.IdLocation });

                entity.ToTable("DEPLOY_VISIT");

                entity.HasIndex(e => new { e.IdArea, e.IdLocation })
                    .HasName("IDX_ID_LOCATION");

                entity.Property(e => e.IdDeployment).HasColumnName("ID_DEPLOYMENT");

                entity.Property(e => e.IdArea).HasColumnName("ID_AREA");

                entity.Property(e => e.IdLocation).HasColumnName("ID_LOCATION");

                entity.Property(e => e.CdOutcome)
                    .IsRequired()
                    .HasColumnName("CD_OUTCOME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdVisitStatus)
                    .IsRequired()
                    .HasColumnName("CD_VISIT_STATUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOutcome)
                    .HasColumnName("DT_OUTCOME")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRevisit)
                    .HasColumnName("DT_REVISIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRevisitDeparture)
                    .HasColumnName("DT_REVISIT_DEPARTURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVisit)
                    .HasColumnName("DT_VISIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVisitDeparture)
                    .HasColumnName("DT_VISIT_DEPARTURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.InMaster)
                    .IsRequired()
                    .HasColumnName("IN_MASTER")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdDeploymentNavigation)
                    .WithMany(p => p.DeployVisit)
                    .HasForeignKey(d => d.IdDeployment)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DEPLOYMENT");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.DeployVisit)
                    .HasForeignKey(d => new { d.IdArea, d.IdLocation })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LOCATION");
            });

            modelBuilder.Entity<DimQuestion>(entity =>
            {
                entity.HasKey(e => e.IdQuestion);

                entity.ToTable("Dim_Question");

                entity.Property(e => e.IdQuestion)
                    .HasColumnName("ID_QUESTION")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdEntityType)
                    .HasColumnName("CD_ENTITY_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdLevel)
                    .HasColumnName("CD_LEVEL")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdQuestionType)
                    .HasColumnName("CD_QUESTION_TYPE")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CdSurveyType)
                    .HasColumnName("CD_SURVEY_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsChoices)
                    .HasColumnName("DS_CHOICES")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsEntity)
                    .HasColumnName("DS_ENTITY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsQuestion)
                    .HasColumnName("DS_QUESTION")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdUpdated)
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmSurvey)
                    .HasColumnName("NM_SURVEY")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DomainEvent>(entity =>
            {
                entity.HasKey(e => e.IdEvent);

                entity.ToTable("DOMAIN_EVENT");

                entity.Property(e => e.IdEvent)
                .HasColumnName("ID_EVENT")
                .ValueGeneratedOnAdd();

                entity.Property(e => e.NmEvent)
                    .IsRequired()
                    .HasColumnName("NM_EVENT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsProcess)
                    .IsRequired()
                    .HasColumnName("DS_PROCESS")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtEvent)
                    .HasColumnName("DT_EVENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.UID)
                    .HasColumnName("UID")
                    .HasColumnType("uniqueidentifier");

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(x => x.Data)
                .WithOne()
                .HasForeignKey(typeof(DomainEventData), "IdEvent")
                .IsRequired();
            });

            modelBuilder.Entity<DomainEventData>(entity =>
            {
                entity.HasKey(e => e.IdEvent);

                entity.ToTable("DOMAIN_EVENT_DATA");

                entity.Property(e => e.IdEvent)
                .HasColumnName("ID_EVENT");

                entity.Property(e => e.JsEventData)
                    .IsRequired()
                    .HasColumnName("JS_EVENT_DATA")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DxStatusCriteria>(entity =>
            {
                entity.HasKey(e => e.IdCriteria);

                entity.ToTable("DX_STATUS_CRITERIA");

                entity.Property(e => e.IdCriteria)
                    .HasColumnName("ID_CRITERIA")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdText)
                    .IsRequired()
                    .HasColumnName("CD_TEXT")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsText)
                    .HasColumnName("DS_TEXT")
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<DxStatusDefinition>(entity =>
            {
                entity.HasKey(e => new { e.CdIcd9, e.CdSection });

                entity.ToTable("DX_STATUS_DEFINITION");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdSection)
                    .HasColumnName("CD_SECTION")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DxStatusXref>(entity =>
            {
                entity.HasKey(e => new { e.CdIcd9, e.CdSection, e.IdCriteria });

                entity.ToTable("DX_STATUS_XREF");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdSection)
                    .HasColumnName("CD_SECTION")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.IdCriteria).HasColumnName("ID_CRITERIA");
            });

            modelBuilder.Entity<EcoliExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("ECOLI_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdActivitiesHist)
                    .HasColumnName("CD_ACTIVITIES_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdAnimalsHist)
                    .HasColumnName("CD_ANIMALS_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdConfirmed)
                    .HasColumnName("CD_CONFIRMED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdConsumeAtRestaurantHist)
                    .HasColumnName("CD_CONSUME_AT_RESTAURANT_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdConsumeRawProduceHist)
                    .HasColumnName("CD_CONSUME_RAW_PRODUCE_HIST")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdConsumeWaterHist)
                    .HasColumnName("CD_CONSUME_WATER_HIST")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdDiarrheaOnsetHist)
                    .HasColumnName("CD_DIARRHEA_ONSET_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFollowActionsHist)
                    .HasColumnName("CD_FOLLOW_ACTIONS_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFruitsHist)
                    .HasColumnName("CD_FRUITS_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdH7antigenHist)
                    .HasColumnName("CD_H7ANTIGEN_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdHusAntibioticPrior)
                    .HasColumnName("CD_HUS_ANTIBIOTIC_PRIOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdHusAntibioticPriorHist)
                    .HasColumnName("CD_HUS_ANTIBIOTIC_PRIOR_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdMeatHist)
                    .HasColumnName("CD_MEAT_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOantigenHist)
                    .HasColumnName("CD_OANTIGEN_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdRecreationalHist)
                    .HasColumnName("CD_RECREATIONAL_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdShiga)
                    .HasColumnName("CD_SHIGA")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdStrain)
                    .HasColumnName("CD_STRAIN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdTravelStateHist)
                    .HasColumnName("CD_TRAVEL_STATE_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdUnpasteurizedHist)
                    .HasColumnName("CD_UNPASTEURIZED_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdWellHist)
                    .HasColumnName("CD_WELL_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAdditionalCommentsHist)
                    .HasColumnName("DS_ADDITIONAL_COMMENTS_HIST")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.DsAnimalsOtheranimal)
                    .HasColumnName("DS_ANIMALS_OTHERANIMAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAnimalsOtherset)
                    .HasColumnName("DS_ANIMALS_OTHERSET")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcClusterCode)
                    .HasColumnName("DS_CDC_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeDriedMeat)
                    .HasColumnName("DS_CONSUME_DRIED_MEAT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeGroundBeef)
                    .HasColumnName("DS_CONSUME_GROUND_BEEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeGroup)
                    .HasColumnName("DS_CONSUME_GROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeOtherBeef)
                    .HasColumnName("DS_CONSUME_OTHER_BEEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeOtherMeat)
                    .HasColumnName("DS_CONSUME_OTHER_MEAT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeOutdoor)
                    .HasColumnName("DS_CONSUME_OUTDOOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumePork)
                    .HasColumnName("DS_CONSUME_PORK")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumePoultry)
                    .HasColumnName("DS_CONSUME_POULTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeRawJuice)
                    .HasColumnName("DS_CONSUME_RAW_JUICE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeRawMilk)
                    .HasColumnName("DS_CONSUME_RAW_MILK")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeRawOther)
                    .HasColumnName("DS_CONSUME_RAW_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeRawProduce)
                    .HasColumnName("DS_CONSUME_RAW_PRODUCE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeSteak)
                    .HasColumnName("DS_CONSUME_STEAK")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeWater)
                    .HasColumnName("DS_CONSUME_WATER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeWildMeat)
                    .HasColumnName("DS_CONSUME_WILD_MEAT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactAnimals)
                    .HasColumnName("DS_CONTACT_ANIMALS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactChiildrenDc)
                    .HasColumnName("DS_CONTACT_CHIILDREN_DC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactDiapered)
                    .HasColumnName("DS_CONTACT_DIAPERED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactHealthcare)
                    .HasColumnName("DS_CONTACT_HEALTHCARE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsEnvironmentalComments)
                    .HasColumnName("DS_ENVIRONMENTAL_COMMENTS")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.DsFood)
                    .HasColumnName("DS_FOOD")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsLiveFarm)
                    .HasColumnName("DS_LIVE_FARM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsLiveInstitution)
                    .HasColumnName("DS_LIVE_INSTITUTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOccupationalExpExcreta)
                    .HasColumnName("DS_OCCUPATIONAL_EXP_EXCRETA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherConsumeAtRestaurant)
                    .HasColumnName("DS_OTHER_CONSUME_AT_RESTAURANT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherConsumeFruitsHist)
                    .HasColumnName("DS_OTHER_CONSUME_FRUITS_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherConsumeRawProduce)
                    .HasColumnName("DS_OTHER_CONSUME_RAW_PRODUCE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherConsumeWater)
                    .HasColumnName("DS_OTHER_CONSUME_WATER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherContactAnimalsHist)
                    .HasColumnName("DS_OTHER_CONTACT_ANIMALS_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherFollowActionHist)
                    .HasColumnName("DS_OTHER_FOLLOW_ACTION_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherH7antigenHist)
                    .HasColumnName("DS_OTHER_H7ANTIGEN_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherMeat)
                    .HasColumnName("DS_OTHER_MEAT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherOantigenHist)
                    .HasColumnName("DS_OTHER_OANTIGEN_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherOutdoorActivities)
                    .HasColumnName("DS_OTHER_OUTDOOR_ACTIVITIES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherUnpasteurizedHist)
                    .HasColumnName("DS_OTHER_UNPASTEURIZED_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherWaterRecreational)
                    .HasColumnName("DS_OTHER_WATER_RECREATIONAL")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherWaterWellHist)
                    .HasColumnName("DS_OTHER_WATER_WELL_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOutdoorActivities)
                    .HasColumnName("DS_OUTDOOR_ACTIVITIES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfge)
                    .HasColumnName("DS_PFGE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeSecondary)
                    .HasColumnName("DS_PFGE_SECONDARY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsRecreational)
                    .HasColumnName("DS_RECREATIONAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSourceDetails)
                    .HasColumnName("DS_SOURCE_DETAILS")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsStateHist)
                    .HasColumnName("DS_STATE_HIST")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsVisitZoo)
                    .HasColumnName("DS_VISIT_ZOO")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsWgsClusterCode)
                    .HasColumnName("DS_WGS_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsCaged)
                    .HasColumnName("IN_ANIMALS_CAGED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsCat)
                    .HasColumnName("IN_ANIMALS_CAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsChicken)
                    .HasColumnName("IN_ANIMALS_CHICKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsCow)
                    .HasColumnName("IN_ANIMALS_COW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsDog)
                    .HasColumnName("IN_ANIMALS_DOG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsDuck)
                    .HasColumnName("IN_ANIMALS_DUCK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsFarm)
                    .HasColumnName("IN_ANIMALS_FARM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsFish)
                    .HasColumnName("IN_ANIMALS_FISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsFrog)
                    .HasColumnName("IN_ANIMALS_FROG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsGoat)
                    .HasColumnName("IN_ANIMALS_GOAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsHamster)
                    .HasColumnName("IN_ANIMALS_HAMSTER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsHorse)
                    .HasColumnName("IN_ANIMALS_HORSE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsHousepet)
                    .HasColumnName("IN_ANIMALS_HOUSEPET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsLizard)
                    .HasColumnName("IN_ANIMALS_LIZARD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsOtheranimal)
                    .HasColumnName("IN_ANIMALS_OTHERANIMAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsOtherset)
                    .HasColumnName("IN_ANIMALS_OTHERSET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsPetting)
                    .HasColumnName("IN_ANIMALS_PETTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsSchoolpet)
                    .HasColumnName("IN_ANIMALS_SCHOOLPET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsSnake)
                    .HasColumnName("IN_ANIMALS_SNAKE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsTurtle)
                    .HasColumnName("IN_ANIMALS_TURTLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalsWild)
                    .HasColumnName("IN_ANIMALS_WILD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAntibiotics)
                    .HasColumnName("IN_ANTIBIOTICS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAntibioticsHist)
                    .HasColumnName("IN_ANTIBIOTICS_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBoottledWaterHist)
                    .HasColumnName("IN_BOOTTLED_WATER_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeAtRestaurant)
                    .HasColumnName("IN_CONSUME_AT_RESTAURANT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeBuffet)
                    .HasColumnName("IN_CONSUME_BUFFET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeDelivery)
                    .HasColumnName("IN_CONSUME_DELIVERY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeDriedMeat)
                    .HasColumnName("IN_CONSUME_DRIED_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeDriedMeatRaw)
                    .HasColumnName("IN_CONSUME_DRIED_MEAT_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeFruitsHist)
                    .HasColumnName("IN_CONSUME_FRUITS_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeGroundBeef)
                    .HasColumnName("IN_CONSUME_GROUND_BEEF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeGroundBeefRaw)
                    .HasColumnName("IN_CONSUME_GROUND_BEEF_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeGroup)
                    .HasColumnName("IN_CONSUME_GROUP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeMeat)
                    .HasColumnName("IN_CONSUME_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeOther)
                    .HasColumnName("IN_CONSUME_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeOtherBeef)
                    .HasColumnName("IN_CONSUME_OTHER_BEEF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeOtherBeefRaw)
                    .HasColumnName("IN_CONSUME_OTHER_BEEF_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeOtherMeat)
                    .HasColumnName("IN_CONSUME_OTHER_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeOtherMeatRaw)
                    .HasColumnName("IN_CONSUME_OTHER_MEAT_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeOutdoor)
                    .HasColumnName("IN_CONSUME_OUTDOOR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumePork)
                    .HasColumnName("IN_CONSUME_PORK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumePorkRaw)
                    .HasColumnName("IN_CONSUME_PORK_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumePoultry)
                    .HasColumnName("IN_CONSUME_POULTRY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumePoultryRaw)
                    .HasColumnName("IN_CONSUME_POULTRY_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawFreshHerbs)
                    .HasColumnName("IN_CONSUME_RAW_FRESH_HERBS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawJuice)
                    .HasColumnName("IN_CONSUME_RAW_JUICE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawLettuce)
                    .HasColumnName("IN_CONSUME_RAW_LETTUCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawMelons)
                    .HasColumnName("IN_CONSUME_RAW_MELONS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawMilk)
                    .HasColumnName("IN_CONSUME_RAW_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawOther)
                    .HasColumnName("IN_CONSUME_RAW_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawOtherSpecify)
                    .HasColumnName("IN_CONSUME_RAW_OTHER_SPECIFY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProduce)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawSpinach)
                    .HasColumnName("IN_CONSUME_RAW_SPINACH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawSprouts)
                    .HasColumnName("IN_CONSUME_RAW_SPROUTS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRecallHist)
                    .HasColumnName("IN_CONSUME_RECALL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRestaurantHist)
                    .HasColumnName("IN_CONSUME_RESTAURANT_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeSteak)
                    .HasColumnName("IN_CONSUME_STEAK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeSteakRaw)
                    .HasColumnName("IN_CONSUME_STEAK_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeUnpasteurizedHist)
                    .HasColumnName("IN_CONSUME_UNPASTEURIZED_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeWater)
                    .HasColumnName("IN_CONSUME_WATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeWildMeat)
                    .HasColumnName("IN_CONSUME_WILD_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeWildMeatRaw)
                    .HasColumnName("IN_CONSUME_WILD_MEAT_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumedFastfood)
                    .HasColumnName("IN_CONSUMED_FASTFOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumedSitdown)
                    .HasColumnName("IN_CONSUMED_SITDOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactAnimals)
                    .HasColumnName("IN_CONTACT_ANIMALS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactChiildrenDc)
                    .HasColumnName("IN_CONTACT_CHIILDREN_DC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactDiapered)
                    .HasColumnName("IN_CONTACT_DIAPERED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactDiarrhea)
                    .HasColumnName("IN_CONTACT_DIARRHEA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactFarmAnimalsHist)
                    .HasColumnName("IN_CONTACT_FARM_ANIMALS_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactHealthcare)
                    .HasColumnName("IN_CONTACT_HEALTHCARE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactOtherAnimalsHist)
                    .HasColumnName("IN_CONTACT_OTHER_ANIMALS_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactPetAnimalsHist)
                    .HasColumnName("IN_CONTACT_PET_ANIMALS_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactWildAnimalsHist)
                    .HasColumnName("IN_CONTACT_WILD_ANIMALS_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDialysis)
                    .HasColumnName("IN_DIALYSIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrankOther)
                    .HasColumnName("IN_DRANK_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrankPrivateWell)
                    .HasColumnName("IN_DRANK_PRIVATE_WELL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrankSharedWell)
                    .HasColumnName("IN_DRANK_SHARED_WELL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEcoliHist)
                    .HasColumnName("IN_ECOLI_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEcoliStateHist)
                    .HasColumnName("IN_ECOLI_STATE_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRecreationalCamp)
                    .HasColumnName("IN_EXPOSED_RECREATIONAL_CAMP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRecreationalFish)
                    .HasColumnName("IN_EXPOSED_RECREATIONAL_FISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRecreationalHiking)
                    .HasColumnName("IN_EXPOSED_RECREATIONAL_HIKING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRecreationalHunt)
                    .HasColumnName("IN_EXPOSED_RECREATIONAL_HUNT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRecreationalOther)
                    .HasColumnName("IN_EXPOSED_RECREATIONAL_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRecreationalPlay)
                    .HasColumnName("IN_EXPOSED_RECREATIONAL_PLAY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRecreationalSports)
                    .HasColumnName("IN_EXPOSED_RECREATIONAL_SPORTS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRecreationalYardWrk)
                    .HasColumnName("IN_EXPOSED_RECREATIONAL_YARD_WRK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFollowActionHist)
                    .HasColumnName("IN_FOLLOW_ACTION_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFruitsUncookedHist)
                    .HasColumnName("IN_FRUITS_UNCOOKED_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFruitsUnwashedHist)
                    .HasColumnName("IN_FRUITS_UNWASHED_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGroupMealHist)
                    .HasColumnName("IN_GROUP_MEAL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHouseholdMember)
                    .HasColumnName("IN_HOUSEHOLD_MEMBER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHus)
                    .HasColumnName("IN_HUS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLiveFarm)
                    .HasColumnName("IN_LIVE_FARM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLiveInstitution)
                    .HasColumnName("IN_LIVE_INSTITUTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMeatUndercookedHist)
                    .HasColumnName("IN_MEAT_UNDERCOOKED_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOccupationalExpExcreta)
                    .HasColumnName("IN_OCCUPATIONAL_EXP_EXCRETA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivities)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareFood)
                    .HasColumnName("IN_PREPARE_FOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawDriedMeat)
                    .HasColumnName("IN_RAW_DRIED_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawGroundBeef)
                    .HasColumnName("IN_RAW_GROUND_BEEF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawOther)
                    .HasColumnName("IN_RAW_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawOtherBeef)
                    .HasColumnName("IN_RAW_OTHER_BEEF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawPork)
                    .HasColumnName("IN_RAW_PORK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawPoultry)
                    .HasColumnName("IN_RAW_POULTRY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawSteakRoastBeef)
                    .HasColumnName("IN_RAW_STEAK_ROAST_BEEF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawWildGameMeat)
                    .HasColumnName("IN_RAW_WILD_GAME_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecBoatKayakCanoeFish)
                    .HasColumnName("IN_REC_BOAT_KAYAK_CANOE_FISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecFountain)
                    .HasColumnName("IN_REC_FOUNTAIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecKiddiePoolHist)
                    .HasColumnName("IN_REC_KIDDIE_POOL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecKidwadPool)
                    .HasColumnName("IN_REC_KIDWAD_POOL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecOceanGulf)
                    .HasColumnName("IN_REC_OCEAN_GULF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecOther)
                    .HasColumnName("IN_REC_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecPool)
                    .HasColumnName("IN_REC_POOL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecRiverLakeCanalPond)
                    .HasColumnName("IN_REC_RIVER_LAKE_CANAL_POND")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecSpaHottubJacuzzi)
                    .HasColumnName("IN_REC_SPA_HOTTUB_JACUZZI")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWadingPoolHist)
                    .HasColumnName("IN_REC_WADING_POOL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterPark)
                    .HasColumnName("IN_REC_WATER_PARK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShigaHist)
                    .HasColumnName("IN_SHIGA_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShigaState)
                    .HasColumnName("IN_SHIGA_STATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurgery)
                    .HasColumnName("IN_SURGERY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSymptomatic24hoursAfter)
                    .HasColumnName("IN_SYMPTOMATIC_24HOURS_AFTER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSymptomatic24hoursBefore)
                    .HasColumnName("IN_SYMPTOMATIC_24HOURS_BEFORE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSymptomaticUnknown)
                    .HasColumnName("IN_SYMPTOMATIC_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSymptomaticWithin24hours)
                    .HasColumnName("IN_SYMPTOMATIC_WITHIN_24HOURS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelOvernight)
                    .HasColumnName("IN_TRAVEL_OVERNIGHT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelState)
                    .HasColumnName("IN_TRAVEL_STATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelledInstate)
                    .HasColumnName("IN_TRAVELLED_INSTATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelledOutofcountry)
                    .HasColumnName("IN_TRAVELLED_OUTOFCOUNTRY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelledOutofstate)
                    .HasColumnName("IN_TRAVELLED_OUTOFSTATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTtp)
                    .HasColumnName("IN_TTP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVisitZoo)
                    .HasColumnName("IN_VISIT_ZOO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterPublicHist)
                    .HasColumnName("IN_WATER_PUBLIC_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterRecreational)
                    .HasColumnName("IN_WATER_RECREATIONAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterUnchlorinatedHist)
                    .HasColumnName("IN_WATER_UNCHLORINATED_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterWellHist)
                    .HasColumnName("IN_WATER_WELL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EharsProfile>(entity =>
            {
                entity.HasKey(e => new { e.DsStateno, e.Id });

                entity.ToTable("EHARS_PROFILE");

                entity.HasIndex(e => e.IdHash)
                    .HasName("idx_hash");

                entity.Property(e => e.DsStateno)
                    .HasColumnName("DS_STATENO")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CdGender)
                    .HasColumnName("CD_GENDER")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdRace)
                    .HasColumnName("CD_RACE")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.DsCd4First)
                    .HasColumnName("DS_CD4_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsCd4Last)
                    .HasColumnName("DS_CD4_LAST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsCob)
                    .HasColumnName("DS_COB")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsDistrictAids)
                    .HasColumnName("DS_DISTRICT_AIDS")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsDistrictHiv)
                    .HasColumnName("DS_DISTRICT_HIV")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtAidsDx)
                    .HasColumnName("DS_DT_AIDS_DX")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtAkaBirth)
                    .HasColumnName("DS_DT_AKA_BIRTH")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtCd4First)
                    .HasColumnName("DS_DT_CD4_FIRST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtCd4Last)
                    .HasColumnName("DS_DT_CD4_LAST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtHivDx)
                    .HasColumnName("DS_DT_HIV_DX")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtViralLoadFirst)
                    .HasColumnName("DS_DT_VIRAL_LOAD_FIRST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtViralLoadLast)
                    .HasColumnName("DS_DT_VIRAL_LOAD_LAST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsStatus)
                    .HasColumnName("DS_STATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsTransCategory)
                    .HasColumnName("DS_TRANS_CATEGORY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsViralLoadFirst)
                    .HasColumnName("DS_VIRAL_LOAD_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsViralLoadLast)
                    .HasColumnName("DS_VIRAL_LOAD_LAST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsVitalStatus)
                    .HasColumnName("DS_VITAL_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDeath)
                    .HasColumnName("DT_DEATH")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtHivDx)
                    .HasColumnName("DT_HIV_DX")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdHash).HasColumnName("ID_HASH");

                entity.Property(e => e.IdPrisno)
                    .HasColumnName("ID_PRISNO")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.IdSsn).HasColumnName("ID_SSN");

                entity.Property(e => e.NmAkaFirst)
                    .HasColumnName("NM_AKA_FIRST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmAkaLast)
                    .HasColumnName("NM_AKA_LAST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NmMiddle)
                    .HasColumnName("NM_MIDDLE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NmSuffix)
                    .HasColumnName("NM_SUFFIX")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ElrAntibiogram>(entity =>
            {
                entity.HasKey(e => e.IdAntibiogram);

                entity.ToTable("ELR_ANTIBIOGRAM");

                entity.Property(e => e.IdAntibiogram).HasColumnName("ID_ANTIBIOGRAM");

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdIsolate)
                    .HasColumnName("CD_ISOLATE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestType)
                    .HasColumnName("CD_TEST_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAbnormalFlag)
                    .HasColumnName("DS_ABNORMAL_FLAG")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAccession)
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsMethodology)
                    .HasColumnName("DS_METHODOLOGY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrganism)
                    .HasColumnName("DS_ORGANISM")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResult)
                    .HasColumnName("DS_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultComparator)
                    .HasColumnName("DS_RESULT_COMPARATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultNumber1)
                    .HasColumnName("DS_RESULT_NUMBER1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultNumber2)
                    .HasColumnName("DS_RESULT_NUMBER2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultSeparator)
                    .HasColumnName("DS_RESULT_SEPARATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSendingApplication)
                    .HasColumnName("DS_SENDING_APPLICATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsUnits)
                    .HasColumnName("DS_UNITS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtElrInserted)
                    .HasColumnName("DT_ELR_INSERTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdElrObservation).HasColumnName("ID_ELR_OBSERVATION");

                entity.Property(e => e.IdElrOrder).HasColumnName("ID_ELR_ORDER");

                entity.Property(e => e.IdElrRequest).HasColumnName("ID_ELR_REQUEST");

                entity.Property(e => e.IdFamily).HasColumnName("ID_FAMILY");

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.IdLrv).HasColumnName("ID_LRV");

                entity.Property(e => e.InDisqualify)
                    .HasColumnName("IN_DISQUALIFY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InParent).HasColumnName("IN_PARENT");

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmObservation)
                    .HasColumnName("NM_OBSERVATION")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NmObservationAlternate)
                    .HasColumnName("NM_OBSERVATION_ALTERNATE")
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ElrFilterDetail>(entity =>
            {
                entity.HasKey(e => e.IdFilterDetailKey);

                entity.ToTable("ELR_FILTER_DETAIL");

                entity.Property(e => e.IdFilterDetailKey).HasColumnName("ID_FILTER_DETAIL_KEY");

                entity.Property(e => e.CdOperand)
                    .IsRequired()
                    .HasColumnName("CD_OPERAND")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdTargetColumn)
                    .IsRequired()
                    .HasColumnName("CD_TARGET_COLUMN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsTargetValue)
                    .IsRequired()
                    .HasColumnName("DS_TARGET_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdEvent).HasColumnName("ID_EVENT");

                entity.Property(e => e.IdStep).HasColumnName("ID_STEP");

                entity.Property(e => e.InAlpha)
                    .HasColumnName("IN_ALPHA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEventNavigation)
                    .WithMany(p => p.ElrFilterDetail)
                    .HasForeignKey(d => d.IdEvent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ELR_FILTER_DETAIL");
            });

            modelBuilder.Entity<ElrFilterEvent>(entity =>
            {
                entity.HasKey(e => e.IdEvent);

                entity.ToTable("ELR_FILTER_EVENT");

                entity.Property(e => e.IdEvent)
                    .HasColumnName("ID_EVENT")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAltObservation)
                    .HasColumnName("CD_ALT_OBSERVATION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabProvider)
                    .IsRequired()
                    .HasColumnName("CD_LAB_PROVIDER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdLoinc)
                    .HasColumnName("CD_LOINC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpire)
                    .HasColumnName("DT_EXPIRE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.NmEvent)
                    .HasColumnName("NM_EVENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ElrFilterOutcome>(entity =>
            {
                entity.HasKey(e => e.IdFilterOutcomeKey);

                entity.ToTable("ELR_FILTER_OUTCOME");

                entity.Property(e => e.IdFilterOutcomeKey).HasColumnName("ID_FILTER_OUTCOME_KEY");

                entity.Property(e => e.CdUpdateColumn)
                    .IsRequired()
                    .HasColumnName("CD_UPDATE_COLUMN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsUpdateValue)
                    .IsRequired()
                    .HasColumnName("DS_UPDATE_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdEvent).HasColumnName("ID_EVENT");

                entity.HasOne(d => d.IdEventNavigation)
                    .WithMany(p => p.ElrFilterOutcome)
                    .HasForeignKey(d => d.IdEvent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ELR_FILTER_OUTCOME");
            });

            modelBuilder.Entity<ElrFilterRules>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("ELR_FILTER_RULES");

                entity.HasIndex(e => new { e.CdLabProvider, e.CdAltObservation, e.CdLoinc })
                    .HasName("IX_CD_SndApp_AltOB_Loinc");

                entity.Property(e => e.IdKey)
                    .HasColumnName("ID_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmOutcomeDoiflag)
                    .HasColumnName("AM_OUTCOME_DOIFLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CdAltObservation)
                    .IsRequired()
                    .HasColumnName("CD_ALT_OBSERVATION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdCommentLookupOperand)
                    .HasColumnName("CD_COMMENT_LOOKUP_OPERAND")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdGrouped)
                    .HasColumnName("CD_GROUPED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .IsRequired()
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdLabProvider)
                    .IsRequired()
                    .HasColumnName("CD_LAB_PROVIDER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdLoinc)
                    .HasColumnName("CD_LOINC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdNumericResultOperand)
                    .IsRequired()
                    .HasColumnName("CD_NUMERIC_RESULT_OPERAND")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdResultType)
                    .IsRequired()
                    .HasColumnName("CD_RESULT_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdSpecimen)
                    .IsRequired()
                    .HasColumnName("CD_SPECIMEN")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdSpecimenOperand)
                    .IsRequired()
                    .HasColumnName("CD_SPECIMEN_OPERAND")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdTextLookupOperand)
                    .IsRequired()
                    .HasColumnName("CD_TEXT_LOOKUP_OPERAND")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsCommentLookup)
                    .IsRequired()
                    .HasColumnName("DS_COMMENT_LOOKUP")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsMerlinTestCode)
                    .IsRequired()
                    .HasColumnName("DS_MERLIN_TEST_CODE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsNumericResult)
                    .IsRequired()
                    .HasColumnName("DS_NUMERIC_RESULT")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsNumericSeparator)
                    .IsRequired()
                    .HasColumnName("DS_NUMERIC_SEPARATOR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsNumericSuffix)
                    .IsRequired()
                    .HasColumnName("DS_NUMERIC_SUFFIX")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsSnomedPhlip)
                    .HasColumnName("DS_SNOMED_PHLIP")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpecialHandling)
                    .IsRequired()
                    .HasColumnName("DS_SPECIAL_HANDLING")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsTextLookup)
                    .HasColumnName("DS_TEXT_LOOKUP")
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpire)
                    .HasColumnName("DT_EXPIRE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InCheckNotifyFlag)
                    .IsRequired()
                    .HasColumnName("IN_CHECK_NOTIFY_FLAG")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InDisplayRefRange)
                    .IsRequired()
                    .HasColumnName("IN_DISPLAY_REF_RANGE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InDisplayTwoObservationDesc)
                    .HasColumnName("IN_DISPLAY_TWO_OBSERVATION_DESC")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InDisplayUnits)
                    .IsRequired()
                    .HasColumnName("IN_DISPLAY_UNITS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InGrouped)
                    .IsRequired()
                    .HasColumnName("IN_GROUPED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InTestResult)
                    .IsRequired()
                    .HasColumnName("IN_TEST_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ElrFluFilterRules>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("ELR_FLU_FILTER_RULES");

                entity.Property(e => e.IdKey)
                    .HasColumnName("ID_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAltObservation)
                    .IsRequired()
                    .HasColumnName("CD_ALT_OBSERVATION")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CdFluHeader)
                    .IsRequired()
                    .HasColumnName("CD_FLU_HEADER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabProvider)
                    .IsRequired()
                    .HasColumnName("CD_LAB_PROVIDER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdLoinc)
                    .HasColumnName("CD_LOINC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdMerlinTestCode)
                    .IsRequired()
                    .HasColumnName("CD_MERLIN_TEST_CODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdNumericResultOperand)
                    .IsRequired()
                    .HasColumnName("CD_NUMERIC_RESULT_OPERAND")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdResultType)
                    .IsRequired()
                    .HasColumnName("CD_RESULT_TYPE")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdTestResult)
                    .HasColumnName("CD_TEST_RESULT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsFluKeyword)
                    .IsRequired()
                    .HasColumnName("DS_FLU_KEYWORD")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsNumericResult)
                    .IsRequired()
                    .HasColumnName("DS_NUMERIC_RESULT")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsNumericResult2)
                    .HasColumnName("DS_NUMERIC_RESULT2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DsNumericSeparator)
                    .IsRequired()
                    .HasColumnName("DS_NUMERIC_SEPARATOR")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsNumericSuffix)
                    .IsRequired()
                    .HasColumnName("DS_NUMERIC_SUFFIX")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsResultKeyword)
                    .IsRequired()
                    .HasColumnName("DS_RESULT_KEYWORD")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsSnomedPhlip)
                    .HasColumnName("DS_SNOMED_PHLIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InKeywords)
                    .IsRequired()
                    .HasColumnName("IN_KEYWORDS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InMumpsData)
                    .IsRequired()
                    .HasColumnName("IN_MUMPS_DATA")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InOnlyFluResults)
                    .IsRequired()
                    .HasColumnName("IN_ONLY_FLU_RESULTS")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ElrMerlinCodeMatch>(entity =>
            {
                entity.HasKey(e => e.IdMerlinCodeMatch);

                entity.ToTable("ELR_MERLIN_CODE_MATCH");

                entity.Property(e => e.IdMerlinCodeMatch)
                    .HasColumnName("ID_MERLIN_CODE_MATCH")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrValue)
                    .IsRequired()
                    .HasColumnName("DS_ELR_VALUE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsMerlinValue)
                    .IsRequired()
                    .HasColumnName("DS_MERLIN_VALUE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsSendingApplication)
                    .HasColumnName("DS_SENDING_APPLICATION")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ElrStagingX>(entity =>
            {
                entity.HasKey(e => e.IdElr);

                entity.ToTable("ELR_STAGING_X");

                entity.HasIndex(e => e.IdProfile)
                    .HasName("IDX_ELR_STAGING_X_ID_PROFILE");

                entity.HasIndex(e => new { e.IdElr, e.IdFamily, e.CdElrStatus })
                    .HasName("IDX_ELR_STAGING_X_FAMILY_STATUS");

                entity.Property(e => e.IdElr)
                    .HasColumnName("ID_ELR")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAlternateResult)
                    .HasColumnName("CD_ALTERNATE_RESULT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdElrSpecimen)
                    .HasColumnName("CD_ELR_SPECIMEN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdElrStatus)
                    .HasColumnName("CD_ELR_STATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdEthnicity)
                    .HasColumnName("CD_ETHNICITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdGender)
                    .HasColumnName("CD_GENDER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabTest)
                    .HasColumnName("CD_LAB_TEST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdMerlinSpecimen)
                    .HasColumnName("CD_MERLIN_SPECIMEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdObxAlt)
                    .HasColumnName("CD_OBX_ALT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdObxType)
                    .HasColumnName("CD_OBX_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdObxTypeAlt)
                    .HasColumnName("CD_OBX_TYPE_ALT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdOrdFacCounty)
                    .HasColumnName("CD_ORD_FAC_COUNTY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdOrdFacState)
                    .HasColumnName("CD_ORD_FAC_STATE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdOrdProvCounty)
                    .HasColumnName("CD_ORD_PROV_COUNTY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdOrdProvState)
                    .HasColumnName("CD_ORD_PROV_STATE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdOrderStatus)
                    .HasColumnName("CD_ORDER_STATUS")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CdProcessDisposition)
                    .HasColumnName("CD_PROCESS_DISPOSITION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdRace)
                    .HasColumnName("CD_RACE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdResult)
                    .HasColumnName("CD_RESULT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdRob)
                    .HasColumnName("CD_ROB")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdSendingFac)
                    .HasColumnName("CD_SENDING_FAC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecimen)
                    .HasColumnName("CD_SPECIMEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSuffix)
                    .HasColumnName("CD_SUFFIX")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsAbnormalFlag)
                    .HasColumnName("DS_ABNORMAL_FLAG")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAccession)
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAdd1)
                    .HasColumnName("DS_ADD1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAdd2)
                    .HasColumnName("DS_ADD2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsBadReason)
                    .HasColumnName("DS_BAD_REASON")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrSpecimen)
                    .HasColumnName("DS_ELR_SPECIMEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFillernumber)
                    .HasColumnName("DS_FILLERNUMBER")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsFluHeader)
                    .HasColumnName("DS_FLU_HEADER")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsLoinc)
                    .HasColumnName("DS_LOINC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsMethodology)
                    .HasColumnName("DS_METHODOLOGY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrdFacAdd1)
                    .HasColumnName("DS_ORD_FAC_ADD1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrdFacAdd2)
                    .HasColumnName("DS_ORD_FAC_ADD2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrdFacCity)
                    .HasColumnName("DS_ORD_FAC_CITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrdFacZip)
                    .HasColumnName("DS_ORD_FAC_ZIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrdProvAdd1)
                    .HasColumnName("DS_ORD_PROV_ADD1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrdProvAdd2)
                    .HasColumnName("DS_ORD_PROV_ADD2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrdProvCity)
                    .HasColumnName("DS_ORD_PROV_CITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrdProvZip)
                    .HasColumnName("DS_ORD_PROV_ZIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsParentResult)
                    .HasColumnName("DS_PARENT_RESULT")
                    .IsUnicode(false);

                entity.Property(e => e.DsParentfillernum)
                    .HasColumnName("DS_PARENTFILLERNUM")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsParentplacernum)
                    .HasColumnName("DS_PARENTPLACERNUM")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhone)
                    .HasColumnName("DS_PHONE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPlacernumber)
                    .HasColumnName("DS_PLACERNUMBER")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsRefRange)
                    .HasColumnName("DS_REF_RANGE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsRefRange2)
                    .HasColumnName("DS_REF_RANGE2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsResult)
                    .HasColumnName("DS_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultAlternate)
                    .HasColumnName("DS_RESULT_ALTERNATE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultComparator)
                    .HasColumnName("DS_RESULT_COMPARATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultNumber1)
                    .HasColumnName("DS_RESULT_NUMBER1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultNumber2)
                    .HasColumnName("DS_RESULT_NUMBER2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultSeparator)
                    .HasColumnName("DS_RESULT_SEPARATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultType)
                    .HasColumnName("DS_RESULT_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSendingApp)
                    .HasColumnName("DS_SENDING_APP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsUnits)
                    .HasColumnName("DS_UNITS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAddedToStage)
                    .HasColumnName("DT_ADDED_TO_STAGE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtElrInserted)
                    .HasColumnName("DT_ELR_INSERTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtObservation)
                    .HasColumnName("DT_OBSERVATION")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtProcess)
                    .HasColumnName("DT_PROCESS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReceived)
                    .HasColumnName("DT_RECEIVED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.FilterAssignedMerlinResult)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdElrObservation).HasColumnName("ID_ELR_OBSERVATION");

                entity.Property(e => e.IdElrOrder).HasColumnName("ID_ELR_ORDER");

                entity.Property(e => e.IdElrRequest).HasColumnName("ID_ELR_REQUEST");

                entity.Property(e => e.IdEvent).HasColumnName("ID_EVENT");

                entity.Property(e => e.IdFamily).HasColumnName("ID_FAMILY");

                entity.Property(e => e.IdOrdFac)
                    .HasColumnName("ID_ORD_FAC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrdProv)
                    .HasColumnName("ID_ORD_PROV")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrdProvSentinel)
                    .HasColumnName("ID_ORD_PROV_SENTINEL")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdPatient)
                    .HasColumnName("ID_PATIENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.IdSsn).HasColumnName("ID_SSN");

                entity.Property(e => e.IdSsnTemp)
                    .HasColumnName("ID_SSN_TEMP")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.IdSub)
                    .HasColumnName("ID_SUB")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InDoiflag).HasColumnName("IN_DOIFLAG");

                entity.Property(e => e.InImportChanges).HasColumnName("IN_IMPORT_CHANGES");

                entity.Property(e => e.InOutput).HasColumnName("IN_OUTPUT");

                entity.Property(e => e.InParent).HasColumnName("IN_PARENT");

                entity.Property(e => e.InPickupStatus).HasColumnName("IN_PICKUP_STATUS");

                entity.Property(e => e.InPregnant)
                    .HasColumnName("IN_PREGNANT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSuperceded).HasColumnName("IN_SUPERCEDED");

                entity.Property(e => e.IsValidSsn).HasColumnName("IS_VALID_SSN");

                entity.Property(e => e.NmFacility)
                    .HasColumnName("NM_FACILITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmMiddle)
                    .HasColumnName("NM_MIDDLE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NmObservation)
                    .HasColumnName("NM_OBSERVATION")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NmObservationAlternate)
                    .HasColumnName("NM_OBSERVATION_ALTERNATE")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NmProvider)
                    .HasColumnName("NM_PROVIDER")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailQueue>(entity =>
            {
                entity.HasKey(e => e.IdEmail);

                entity.ToTable("EMAIL_QUEUE");

                entity.Property(e => e.IdEmail)
                    .HasColumnName("id_email")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAlert)
                    .HasColumnName("cd_alert")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdEntity)
                    .HasColumnName("cd_entity")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdProcessed)
                    .IsRequired()
                    .HasColumnName("cd_processed")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('U')");

                entity.Property(e => e.DsComments)
                    .HasColumnName("ds_comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("dt_added")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtProcessed)
                    .HasColumnName("dt_processed")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("id_added")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdEmailHistory).HasColumnName("id_email_history");

                entity.Property(e => e.IdEntity)
                    .HasColumnName("id_entity")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdUserRecipient)
                    .HasColumnName("id_user_recipient")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailQueueHistory>(entity =>
            {
                entity.HasKey(e => e.IdEmailHistory);

                entity.ToTable("EMAIL_QUEUE_HISTORY");

                entity.Property(e => e.IdEmailHistory)
                    .HasColumnName("id_email_history")
                    .ValueGeneratedNever();

                entity.Property(e => e.DsEmailRecipient)
                    .IsRequired()
                    .HasColumnName("ds_email_recipient")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsEmailText)
                    .HasColumnName("ds_email_text")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("dt_added")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<EnvDatasharingCase>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("ENV_DATASHARING_CASE");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCountyOrig)
                    .HasColumnName("CD_COUNTY_ORIG")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdDxStatus)
                    .HasColumnName("CD_DX_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdEthnicity)
                    .HasColumnName("CD_ETHNICITY")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CdGender)
                    .HasColumnName("CD_GENDER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdHomeCounty)
                    .HasColumnName("CD_HOME_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdImported)
                    .HasColumnName("CD_IMPORTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdInvestigator)
                    .HasColumnName("CD_INVESTIGATOR")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutcome)
                    .HasColumnName("CD_OUTCOME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdRace)
                    .HasColumnName("CD_RACE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CdStatus)
                    .HasColumnName("CD_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsHomeAddr)
                    .HasColumnName("DS_HOME_ADDR")
                    .HasMaxLength(115)
                    .IsUnicode(false);

                entity.Property(e => e.DsHomeCity)
                    .HasColumnName("DS_HOME_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsHomeState)
                    .HasColumnName("DS_HOME_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsHomeZip)
                    .HasColumnName("DS_HOME_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhnHome)
                    .HasColumnName("DS_PHN_HOME")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhnWork)
                    .HasColumnName("DS_PHN_WORK")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsProfileNotes)
                    .HasColumnName("DS_PROFILE_NOTES")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResourcePhone)
                    .HasColumnName("DS_RESOURCE_PHONE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCaseAdded)
                    .HasColumnName("DT_CASE_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDeath)
                    .HasColumnName("DT_DEATH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInserted)
                    .HasColumnName("DT_INSERTED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtOnset)
                    .HasColumnName("DT_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPicked)
                    .HasColumnName("DT_PICKED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdSsn)
                    .HasColumnName("ID_SSN")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NmResource)
                    .HasColumnName("NM_RESOURCE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EnvDatasharingCaseSymptoms>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.CdSymptoms });

                entity.ToTable("ENV_DATASHARING_CASE_SYMPTOMS");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.CdSymptoms)
                    .HasColumnName("CD_SYMPTOMS")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmSymptoms)
                    .HasColumnName("NM_SYMPTOMS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.EnvDatasharingCaseSymptoms)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ENV_DATASHARING_CASE_SYMPTOMS_ID_CASE");
            });

            modelBuilder.Entity<EnvDatasharingLab>(entity =>
            {
                entity.HasKey(e => e.IdLab);

                entity.ToTable("ENV_DATASHARING_LAB");

                entity.Property(e => e.IdLab)
                    .HasColumnName("ID_LAB")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdSpecimen)
                    .HasColumnName("CD_SPECIMEN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsLabAddress)
                    .HasColumnName("DS_LAB_ADDRESS")
                    .HasMaxLength(115)
                    .IsUnicode(false);

                entity.Property(e => e.DsLabName)
                    .HasColumnName("DS_LAB_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsLabNotes)
                    .HasColumnName("DS_LAB_NOTES")
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.EnvDatasharingLab)
                    .HasForeignKey(d => d.IdCase)
                    .HasConstraintName("FK_ENV_DATASHARING_CASE_LAB_ID_CASE");
            });

            modelBuilder.Entity<EpiCase>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("EPI_CASE");

                entity.HasIndex(e => e.CdIcd9)
                    .HasName("EPI_CASE_CD_ICD9");

                entity.HasIndex(e => e.CdInvestigator)
                    .HasName("IDX_EPI_CASE_CD_INVESTIGATOR");

                entity.HasIndex(e => e.DtAdded)
                    .HasName("EPI_CASE_DTADDED");

                entity.HasIndex(e => e.DtEpiReported)
                    .HasName("EPI_CASE_DT_EPI_REPORTED");

                entity.HasIndex(e => e.IdPhysician)
                    .HasName("IDX_EPI_CASE_ID_PHYSICIAN");

                entity.HasIndex(e => e.IdProfile)
                    .HasName("idxEpiCase_Profile");

                entity.HasIndex(e => new { e.CdStatus, e.CdExtdStatus, e.CdIcd9 })
                    .HasName("idx_EPI_CASE3");

                entity.HasIndex(e => new { e.CdCountyOrig, e.CdIcd9, e.CdStatus, e.CdRecipStatus, e.CdJurisdiction })
                    .HasName("IDX_EPI_CASE_ICD9_STATUS_RECIP_JURIS");

                entity.HasIndex(e => new { e.CdCountyOrig, e.CdRecipStatus, e.IdCase, e.CdJurisdiction, e.CdStatus, e.CdIcd9 })
                    .HasName("IDX_EPI_CASE_RECIP");

                entity.HasIndex(e => new { e.CdExtdStatus, e.CdCountyOrig, e.IdCase, e.CdStatus, e.CdIcd9, e.IdProfile })
                    .HasName("IDX_EPI_CASE_COUNTY_STATUS_ICD9_PROFILE");

                entity.HasIndex(e => new { e.CdIcd9, e.DsZipOrig, e.CdStatus, e.CdExtdStatus, e.DtEvent, e.DtEpiReported, e.CdCountyOrig })
                    .HasName("EPI_CASE2");

                entity.HasIndex(e => new { e.DtAdded, e.IdCase, e.IdProfile, e.CdIcd9, e.CdDxStatus, e.DtEvent, e.CdStatus, e.DtEpiReported, e.DtCdcReported, e.IdAdded })
                    .HasName("EPI_CASE4");

                entity.HasIndex(e => new { e.CdOutbreak, e.DsZipOrig, e.CdCountyOrig, e.CdDxStatus, e.CdStatus, e.DsDaycare, e.CdOccupation, e.CdImported, e.CdIcd9, e.DtEvent, e.IdCase, e.CdJurisdiction, e.IdProfile })
                    .HasName("IDX_EPI_CASE_INCIDENCE_RPT2");

                entity.HasIndex(e => new { e.IdCase, e.CdOutbreak, e.DsZipOrig, e.DtEvent, e.CdImported, e.CdOccupation, e.DsDaycare, e.CdStatus, e.CdDxStatus, e.CdCountyOrig, e.CdIcd9, e.IdProfile, e.CdJurisdiction })
                    .HasName("IDX_EPI_CASE_INCIDENCE_RPT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmAge).HasColumnName("AM_AGE");

                entity.Property(e => e.AmWeek).HasColumnName("AM_WEEK");

                entity.Property(e => e.AmYear).HasColumnName("AM_YEAR");

                entity.Property(e => e.CdAnimalType)
                    .HasColumnName("CD_ANIMAL_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCaseStatus)
                    .HasColumnName("CD_CASE_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdClass)
                    .IsRequired()
                    .HasColumnName("CD_CLASS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdClosureReason)
                    .HasColumnName("CD_CLOSURE_REASON")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCorrectional)
                    .HasColumnName("CD_CORRECTIONAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCountry)
                    .HasColumnName("CD_COUNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCountyAssigned)
                    .HasColumnName("CD_COUNTY_ASSIGNED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdCountyOrig)
                    .HasColumnName("CD_COUNTY_ORIG")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdDxStatus)
                    .HasColumnName("CD_DX_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExtdStatus)
                    .HasColumnName("CD_EXTD_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdFollowStatus)
                    .HasColumnName("CD_FOLLOW_STATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .IsRequired()
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdImported)
                    .HasColumnName("CD_IMPORTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdInsurance)
                    .HasColumnName("CD_INSURANCE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdInvestigator)
                    .HasColumnName("CD_INVESTIGATOR")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdJurisdiction)
                    .HasColumnName("CD_JURISDICTION")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('FLORIDA')");

                entity.Property(e => e.CdLevel)
                    .HasColumnName("CD_LEVEL")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdMilitaryBase)
                    .HasColumnName("CD_MILITARY_BASE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdOccupation)
                    .IsRequired()
                    .HasColumnName("CD_OCCUPATION")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutbreak)
                    .HasColumnName("CD_OUTBREAK")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutcomeHist)
                    .HasColumnName("CD_OUTCOME_HIST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdRecipStatus)
                    .HasColumnName("CD_RECIP_STATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportedType)
                    .HasColumnName("CD_REPORTED_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdStatus)
                    .IsRequired()
                    .HasColumnName("CD_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('INCOMPLETE ')");

                entity.Property(e => e.CdTravel)
                    .HasColumnName("CD_TRAVEL")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTravelFlorida)
                    .HasColumnName("CD_TRAVEL_FLORIDA")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsAdd1Company)
                    .HasColumnName("DS_ADD1_COMPANY")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsAdd2Company)
                    .HasColumnName("DS_ADD2_COMPANY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsCityCompany)
                    .HasColumnName("DS_CITY_COMPANY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsCoReference)
                    .HasColumnName("DS_CO_REFERENCE")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DsDaycare)
                    .IsRequired()
                    .HasColumnName("DS_DAYCARE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsEventType)
                    .HasColumnName("DS_EVENT_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsFacility)
                    .HasColumnName("DS_FACILITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsFaxCompany)
                    .HasColumnName("DS_FAX_COMPANY")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsInsurance)
                    .HasColumnName("DS_INSURANCE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrigin)
                    .HasColumnName("DS_ORIGIN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhnCompany)
                    .HasColumnName("DS_PHN_COMPANY")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsReason)
                    .HasColumnName("DS_REASON")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsReportedBy)
                    .HasColumnName("DS_REPORTED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsStateCompany)
                    .HasColumnName("DS_STATE_COMPANY")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsZipCompany)
                    .HasColumnName("DS_ZIP_COMPANY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsZipOrig)
                    .HasColumnName("DS_ZIP_ORIG")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtAssignedAsOf)
                    .HasColumnName("DT_ASSIGNED_AS_OF")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCaseAccepted)
                    .HasColumnName("DT_CASE_ACCEPTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCdcReported)
                    .HasColumnName("DT_CDC_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtClosure)
                    .HasColumnName("DT_CLOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDiagnosis)
                    .HasColumnName("DT_DIAGNOSIS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEarliestElr)
                    .HasColumnName("DT_EARLIEST_ELR")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEpiReReported)
                    .HasColumnName("DT_EPI_RE_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEpiReported)
                    .HasColumnName("DT_EPI_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEvent)
                    .HasColumnName("DT_EVENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExtdStatus)
                    .HasColumnName("DT_EXTD_STATUS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFlatfile)
                    .HasColumnName("DT_FLATFILE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFollowupStatus)
                    .HasColumnName("DT_FOLLOWUP_STATUS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHl7Reported)
                    .HasColumnName("DT_HL7_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInterviewed)
                    .HasColumnName("DT_INTERVIEWED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInvestigated)
                    .HasColumnName("DT_INVESTIGATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLab)
                    .HasColumnName("DT_LAB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLabAttached)
                    .HasColumnName("DT_LAB_ATTACHED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLastAttended)
                    .HasColumnName("DT_LAST_ATTENDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOnset)
                    .HasColumnName("DT_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStatus)
                    .HasColumnName("DT_STATUS")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdAnimalProfile).HasColumnName("ID_ANIMAL_PROFILE");

                entity.Property(e => e.IdAnimalProfileAttached).HasColumnName("ID_ANIMAL_PROFILE_ATTACHED");

                entity.Property(e => e.IdCaseDef).HasColumnName("ID_CASE_DEF");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdConfirmNonDoh)
                    .HasColumnName("ID_CONFIRM_NON_DOH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdPhysician).HasColumnName("ID_PHYSICIAN");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.IdUserReview)
                    .HasColumnName("ID_USER_REVIEW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalExposure).HasColumnName("IN_ANIMAL_EXPOSURE");

                entity.Property(e => e.InCdcNotify)
                    .HasColumnName("IN_CDC_NOTIFY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InComplete)
                    .HasColumnName("IN_COMPLETE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCrfSubmit)
                    .HasColumnName("IN_CRF_SUBMIT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeletedByBureauStaff)
                    .HasColumnName("IN_DELETED_BY_BUREAU_STAFF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDied)
                    .HasColumnName("IN_DIED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InDiedFromIllness)
                    .HasColumnName("IN_DIED_FROM_ILLNESS")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InEcr).HasColumnName("IN_ECR");

                entity.Property(e => e.InEmergencyVisit)
                    .HasColumnName("IN_EMERGENCY_VISIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InHospitalized)
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InHospitalizedForDisease)
                    .HasColumnName("IN_HOSPITALIZED_FOR_DISEASE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InInsurance)
                    .HasColumnName("IN_INSURANCE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InInterviewRecommended).HasColumnName("IN_INTERVIEW_RECOMMENDED");

                entity.Property(e => e.InInterviewed)
                    .HasColumnName("IN_INTERVIEWED")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InInvestigated)
                    .HasColumnName("IN_INVESTIGATED")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InJurisdiction).HasColumnName("IN_JURISDICTION");

                entity.Property(e => e.InMeasures).HasColumnName("IN_MEASURES");

                entity.Property(e => e.InMedicaid)
                    .HasColumnName("IN_MEDICAID")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InNotifiedElr)
                    .HasColumnName("IN_NOTIFIED_ELR")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InOutbreak)
                    .HasColumnName("IN_OUTBREAK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOverride).HasColumnName("IN_OVERRIDE");

                entity.Property(e => e.InPregnant)
                    .HasColumnName("IN_PREGNANT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InProphalaxedHist)
                    .HasColumnName("IN_PROPHALAXED_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSymptomatic)
                    .HasColumnName("IN_SYMPTOMATIC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InUnkTaskList)
                    .HasColumnName("IN_UNK_TASK_LIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmCompany)
                    .HasColumnName("NM_COMPANY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPhysicianNavigation)
                    .WithMany(p => p.EpiCase)
                    .HasForeignKey(d => d.IdPhysician)
                    .HasConstraintName("FK_EPI_CASE_ID_PHYSICIAN");

                entity.HasOne(c => c.Profile)
                    .WithMany()
                    .HasForeignKey(c => c.IdProfile);
            });

            modelBuilder.Entity<EpiCaseContacts>(entity =>
            {
                entity.HasKey(e => e.IdCaseContact);

                entity.ToTable("EPI_CASE_CONTACTS");

                entity.Property(e => e.IdCaseContact)
                    .HasColumnName("ID_CASE_CONTACT")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmAge).HasColumnName("AM_AGE");

                entity.Property(e => e.CdContactType)
                    .HasColumnName("CD_CONTACT_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdDxStatus)
                    .HasColumnName("CD_DX_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdEthnicity)
                    .HasColumnName("CD_ETHNICITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdGender)
                    .HasColumnName("CD_GENDER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdRace)
                    .HasColumnName("CD_RACE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr1)
                    .HasColumnName("DS_ADDR1")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr2)
                    .HasColumnName("DS_ADDR2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactName)
                    .HasColumnName("DS_CONTACT_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactTypeMovedOut)
                    .HasColumnName("DS_CONTACT_TYPE_MOVED_OUT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhnHome)
                    .HasColumnName("DS_PHN_HOME")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhnWork)
                    .HasColumnName("DS_PHN_WORK")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("DT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOnset)
                    .HasColumnName("DT_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStart)
                    .HasColumnName("DT_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InConfirmedCase)
                    .HasColumnName("IN_CONFIRMED_CASE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGetSick)
                    .HasColumnName("IN_GET_SICK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSensitiveSituation)
                    .HasColumnName("IN_SENSITIVE_SITUATION")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.EpiCaseContacts)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CASE_CONTACT_LIST_CASE");
            });

            modelBuilder.Entity<EpiCaseCorrespondence>(entity =>
            {
                entity.HasKey(e => e.IdCorrespondence);

                entity.ToTable("EPI_CASE_CORRESPONDENCE");

                entity.Property(e => e.IdCorrespondence)
                    .HasColumnName("ID_CORRESPONDENCE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCorrespondence)
                    .HasColumnName("DT_CORRESPONDENCE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.InClearTask)
                    .HasColumnName("IN_CLEAR_TASK")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EpiCaseDefAnswers>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdCaseDefItem });

                entity.ToTable("EPI_CASE_DEF_ANSWERS");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdCaseDefItem).HasColumnName("ID_CASE_DEF_ITEM");

                entity.Property(e => e.DsAnswer)
                    .HasColumnName("DS_ANSWER")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.EpiCaseDefAnswers)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EPI_CASE_DEF_ANSWERS_ID_CASE");
            });

            modelBuilder.Entity<EpiCaseDocument>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdEpiDocument });

                entity.ToTable("EPI_CASE_DOCUMENT");

                entity.Property(e => e.IdCase).HasColumnName("id_case");

                entity.Property(e => e.IdEpiDocument).HasColumnName("id_epi_document");

                entity.Property(e => e.CdDocumentType)
                    .HasColumnName("cd_document_type")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsDesc)
                    .HasColumnName("ds_desc")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("dt_added")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEpiDocument)
                    .HasColumnName("dt_epi_document")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("id_added")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmFile)
                    .HasColumnName("NM_FILE")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EpiCaseFlatfile>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.CdRecordType, e.AmYear, e.CdCdc });

                entity.ToTable("EPI_CASE_FLATFILE");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.CdRecordType)
                    .HasColumnName("CD_RECORD_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AmYear).HasColumnName("AM_YEAR");

                entity.Property(e => e.CdCdc)
                    .HasColumnName("CD_CDC")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcData)
                    .HasColumnName("DS_CDC_DATA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcExtdData)
                    .HasColumnName("DS_CDC_EXTD_DATA")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.InCdcNotify)
                    .HasColumnName("IN_CDC_NOTIFY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InUnkTaskList)
                    .HasColumnName("IN_UNK_TASK_LIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUpdatable)
                    .HasColumnName("IN_UPDATABLE")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<EpiCaseHistory>(entity =>
            {
                entity.HasKey(e => e.IdHistory);

                entity.ToTable("EPI_CASE_HISTORY");

                entity.HasIndex(e => e.CdReason)
                    .HasName("IDX_EPI_CASE_HISTORY_CD_REASON");

                entity.HasIndex(e => e.IdHistory)
                    .HasName("IDX_EPI_CAS_HISTORY_HISTORY");

                entity.HasIndex(e => new { e.IdCase, e.CdReason })
                    .HasName("IDX_EPI_CASE_HISTORY_CASE_REASON");

                entity.Property(e => e.IdHistory).HasColumnName("ID_HISTORY");

                entity.Property(e => e.AmAge).HasColumnName("AM_AGE");

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdCountyAssigned)
                    .HasColumnName("CD_COUNTY_ASSIGNED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdDxStatus)
                    .HasColumnName("CD_DX_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExtdStatus)
                    .HasColumnName("CD_EXTD_STATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdJurisdiction)
                    .HasColumnName("CD_JURISDICTION")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdLevel)
                    .HasColumnName("CD_LEVEL")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdReason)
                    .HasColumnName("CD_REASON")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CdStatus)
                    .HasColumnName("CD_STATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsDxStatusRule)
                    .HasColumnName("DS_DX_STATUS_RULE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsReason)
                    .HasColumnName("DS_REASON")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAssignedAsOf)
                    .HasColumnName("DT_ASSIGNED_AS_OF")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");
            });

            modelBuilder.Entity<EpiCaseHospital>(entity =>
            {
                entity.HasKey(e => e.IdHospitalVisit);

                entity.ToTable("EPI_CASE_HOSPITAL");

                entity.HasIndex(e => e.IdHospital)
                    .HasName("IDX_EPI_CASE_HOSPITAL_ID_HOSPITAL");

                entity.Property(e => e.IdHospitalVisit)
                    .HasColumnName("id_hospital_visit")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdVisitType)
                    .HasColumnName("CD_VISIT_TYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("ds_comments")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsMedication)
                    .HasColumnName("ds_medication")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsRoom)
                    .HasColumnName("ds_room")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsXray)
                    .HasColumnName("ds_xray")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("dt_added")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBegin)
                    .HasColumnName("dt_begin")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("dt_changed")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("dt_end")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("id_added")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("id_case");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("id_changed")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdHospital).HasColumnName("id_hospital");

                entity.Property(e => e.InEmergencyVisit)
                    .HasColumnName("IN_EMERGENCY_VISIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdHospitalNavigation)
                    .WithMany(p => p.EpiCaseHospital)
                    .HasForeignKey(d => d.IdHospital)
                    .HasConstraintName("FK_EPI_CASE_HOSPITAL_ID_HOSPITAL");
            });

            modelBuilder.Entity<EpiCaseMeasuresArchive>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.CdType });

                entity.ToTable("EPI_CASE_MEASURES_ARCHIVE");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.CdType)
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdInitiated)
                    .HasColumnName("CD_INITIATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInitiated)
                    .HasColumnName("DT_INITIATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EpiCaseReview>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("EPI_CASE_REVIEW");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.DsNotes)
                    .IsRequired()
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EpiCaseSupplemental>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.CdSupplementalType });

                entity.ToTable("EPI_CASE_SUPPLEMENTAL");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.CdSupplementalType)
                    .HasColumnName("CD_SUPPLEMENTAL_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsSupplemental)
                    .HasColumnName("DS_SUPPLEMENTAL")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EpiCaseSurveyAnswers>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdSequence });

                entity.ToTable("EPI_CASE_SURVEY_ANSWERS");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.CdArea)
                    .HasColumnName("CD_AREA")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsPromptInfo)
                    .IsRequired()
                    .HasColumnName("DS_PROMPT_INFO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InActive)
                    .HasColumnName("IN_ACTIVE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnswer)
                    .HasColumnName("IN_ANSWER")
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EpiDocument>(entity =>
            {
                entity.HasKey(e => e.IdEpiDocument);

                entity.ToTable("EPI_DOCUMENT");

                entity.Property(e => e.IdEpiDocument)
                    .HasColumnName("id_epi_document")
                    .ValueGeneratedNever();

                entity.Property(e => e.BlEpiDocument)
                    .IsRequired()
                    .HasColumnName("bl_epi_document")
                    .HasColumnType("image");

                entity.Property(e => e.DsMimeContentType)
                    .HasColumnName("ds_mime_content_type")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("dt_added")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("id_added")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EpiDocumentList>(entity =>
            {
                entity.HasKey(e => e.IdEpiDocumentList);

                entity.ToTable("EPI_DOCUMENT_LIST");

                entity.Property(e => e.IdEpiDocumentList).HasColumnName("ID_EPI_DOCUMENT_LIST");

                entity.Property(e => e.CdDocumentClass)
                    .IsRequired()
                    .HasColumnName("CD_DOCUMENT_CLASS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdValue)
                    .IsRequired()
                    .HasColumnName("CD_VALUE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsDesc)
                    .IsRequired()
                    .HasColumnName("DS_DESC")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsFileName)
                    .IsRequired()
                    .HasColumnName("DS_FILE_NAME")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdEpiDocument)
                    .HasColumnName("ID_EPI_DOCUMENT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.NmDocument)
                    .HasColumnName("NM_DOCUMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EpiProfile>(entity =>
            {
                entity.HasKey(e => e.IdProfile);

                entity.ToTable("EPI_PROFILE");

                entity.HasIndex(e => e.IdSsn)
                    .HasName("idx_EPI_PROFILE_SSN");

                entity.HasIndex(e => new { e.NmLast, e.CdGender, e.DtBirth, e.CdRace, e.CdEthnicity, e.IdProfile })
                    .HasName("IDX_EPI_PROFILE_INCIDENCE_RPT");

                entity.Property(e => e.IdProfile)
                    .HasColumnName("ID_PROFILE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdEthnicity)
                    .IsRequired()
                    .HasColumnName("CD_ETHNICITY")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdEthnicityReason)
                    .HasColumnName("CD_ETHNICITY_REASON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdGender)
                    .IsRequired()
                    .HasColumnName("CD_GENDER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdRace)
                    .IsRequired()
                    .HasColumnName("CD_RACE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdRaceReason)
                    .HasColumnName("CD_RACE_REASON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsEmail)
                    .HasColumnName("DS_EMAIL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .IsRequired()
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPhnEmerg)
                    .IsRequired()
                    .HasColumnName("DS_PHN_EMERG")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPhnHome)
                    .IsRequired()
                    .HasColumnName("DS_PHN_HOME")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPhnWork)
                    .IsRequired()
                    .HasColumnName("DS_PHN_WORK")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDeath)
                    .HasColumnName("DT_DEATH")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdAlternate)
                    .HasColumnName("ID_ALTERNATE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdPatient)
                    .HasColumnName("ID_PATIENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdShots)
                    .HasColumnName("ID_SHOTS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdSsn).HasColumnName("ID_SSN");

                entity.Property(e => e.InDobUnknown)
                    .HasColumnName("IN_DOB_UNKNOWN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InMaster).HasColumnName("IN_MASTER");

                entity.Property(e => e.InTwins).HasColumnName("IN_TWINS");

                entity.Property(e => e.NmEmergCon)
                    .IsRequired()
                    .HasColumnName("NM_EMERG_CON")
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmFirst)
                    .IsRequired()
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmLast)
                    .IsRequired()
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmMaiden)
                    .IsRequired()
                    .HasColumnName("NM_MAIDEN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmMiddle)
                    .IsRequired()
                    .HasColumnName("NM_MIDDLE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmSuffix)
                    .IsRequired()
                    .HasColumnName("NM_SUFFIX")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<EpiUser>(entity =>
            {
                entity.HasKey(e => e.IdUser);

                entity.ToTable("EPI_USER");

                entity.HasIndex(e => e.IdLaboratory)
                    .HasName("IDX_EPI_USER_ID_LABORATORY");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAccess)
                    .IsRequired()
                    .HasColumnName("CD_ACCESS")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdElrPresearch)
                    .HasColumnName("CD_ELR_PRESEARCH")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdLoginUrl).HasColumnName("CD_LOGIN_URL");

                entity.Property(e => e.DsComment)
                    .HasColumnName("DS_COMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsEmail)
                    .IsRequired()
                    .HasColumnName("DS_EMAIL")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsEpicomId)
                    .HasColumnName("DS_EPICOM_ID")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsLockedOut)
                    .IsRequired()
                    .HasColumnName("DS_LOCKED_OUT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.DsLoggedIn)
                    .IsRequired()
                    .HasColumnName("DS_LOGGED_IN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.DsNoLoginTry).HasColumnName("DS_NO_LOGIN_TRY");

                entity.Property(e => e.DsPassword)
                    .HasColumnName("DS_PASSWORD")
                    .HasMaxLength(255);

                entity.Property(e => e.DsPhn)
                    .IsRequired()
                    .HasColumnName("DS_PHN")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsPhnSuncom)
                    .IsRequired()
                    .HasColumnName("DS_PHN_SUNCOM")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsTitle)
                    .IsRequired()
                    .HasColumnName("DS_TITLE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("DT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLastLogin)
                    .HasColumnName("DT_LAST_LOGIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPwdReset)
                    .HasColumnName("DT_PWD_RESET")
                    .HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdEpiGateway).HasColumnName("ID_EPI_GATEWAY");

                entity.Property(e => e.IdEssence)
                    .HasColumnName("ID_ESSENCE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdLaboratory).HasColumnName("ID_LABORATORY");

                entity.Property(e => e.IdNtLogin)
                    .HasColumnName("ID_NT_LOGIN")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdSession)
                    .IsRequired()
                    .HasColumnName("ID_SESSION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InDeleteExempt).HasColumnName("IN_DELETE_EXEMPT");

                entity.Property(e => e.InEpiReviewer).HasColumnName("IN_EPI_REVIEWER");

                entity.Property(e => e.InHighPriority)
                    .IsRequired()
                    .HasColumnName("IN_HIGH_PRIORITY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMultipleCounty).HasColumnName("IN_MULTIPLE_COUNTY");

                entity.Property(e => e.InMultipleIcd9).HasColumnName("IN_MULTIPLE_ICD9");

                entity.Property(e => e.InQuery)
                    .HasColumnName("IN_QUERY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InSsnDisplay).HasColumnName("IN_SSN_DISPLAY");

                entity.Property(e => e.NmFirstUser)
                    .IsRequired()
                    .HasColumnName("NM_FIRST_USER")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NmLastUser)
                    .IsRequired()
                    .HasColumnName("NM_LAST_USER")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EpiUserAlerts>(entity =>
            {
                entity.HasKey(e => e.IdUserAlert);

                entity.ToTable("EPI_USER_ALERTS");

                entity.Property(e => e.IdUserAlert)
                    .HasColumnName("ID_USER_ALERT")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAlert)
                    .IsRequired()
                    .HasColumnName("CD_ALERT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("ID_USER")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CdIcd9Navigation)
                    .WithMany(p => p.EpiUserAlerts)
                    .HasForeignKey(d => d.CdIcd9)
                    .HasConstraintName("FK_EPI_USER_ALERTS_ICD9");
            });

            modelBuilder.Entity<EpiUserDocument>(entity =>
            {
                entity.HasKey(e => new { e.IdUser, e.IdEpiDocument });

                entity.ToTable("EPI_USER_DOCUMENT");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdEpiDocument).HasColumnName("ID_EPI_DOCUMENT");

                entity.Property(e => e.DsDesc)
                    .HasColumnName("DS_DESC")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEpiDocument)
                    .HasColumnName("DT_EPI_DOCUMENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmFile)
                    .HasColumnName("NM_FILE")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EpiUserPrivileges>(entity =>
            {
                entity.HasKey(e => new { e.IdUser, e.CdType, e.DsPrivilegesType });

                entity.ToTable("EPI_USER_PRIVILEGES");

                entity.HasIndex(e => e.DsPrivilegesType)
                    .HasName("IDX_EPI_USER_PRIVILEGES_DS_PRIVILEGES_TYPE");

                entity.HasIndex(e => e.IdUser)
                    .HasName("IDX_EPI_USER_PRIVILEGES_ID_USER");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdType)
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPrivilegesType)
                    .HasColumnName("DS_PRIVILEGES_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsPrivilegesList)
                    .HasColumnName("DS_PRIVILEGES_LIST")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");
            });

            modelBuilder.Entity<ExtDsValues>(entity =>
            {
                entity.HasKey(e => new { e.IdParameter, e.DsValue });

                entity.ToTable("EXT_DS_VALUES");

                entity.Property(e => e.IdParameter).HasColumnName("ID_PARAMETER");

                entity.Property(e => e.DsValue)
                    .HasColumnName("DS_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExtLab>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("EXT_LAB");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdBiotype)
                    .HasColumnName("CD_BIOTYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerogroup)
                    .HasColumnName("CD_SEROGROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerotype)
                    .HasColumnName("CD_SEROTYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdStrain)
                    .HasColumnName("CD_STRAIN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcClusterCode)
                    .HasColumnName("DS_CDC_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfge)
                    .HasColumnName("DS_PFGE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeFlorida)
                    .HasColumnName("DS_PFGE_FLORIDA")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeSecondary)
                    .HasColumnName("DS_PFGE_SECONDARY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsWgsClusterCode)
                    .HasColumnName("DS_WGS_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacilityExposure>(entity =>
            {
                entity.HasKey(e => e.IdFacilityExposure);

                entity.ToTable("FACILITY_EXPOSURE");

                entity.Property(e => e.IdFacilityExposure)
                    .HasColumnName("ID_FACILITY_EXPOSURE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdExposure)
                    .HasColumnName("CD_EXPOSURE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdFacility)
                    .HasColumnName("CD_FACILITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFacilityCity)
                    .HasColumnName("DS_FACILITY_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsFacilityOther)
                    .HasColumnName("DS_FACILITY_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsVisitReason)
                    .HasColumnName("DS_VISIT_REASON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("DT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStart)
                    .HasColumnName("DT_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InTransplant)
                    .HasColumnName("IN_TRANSPLANT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmFacility)
                    .HasColumnName("NM_FACILITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.FacilityExposure)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACILITY_EXPOSURE_ID_CASE");
            });

            modelBuilder.Entity<FactAnswers>(entity =>
            {
                entity.HasKey(e => e.IdAnswer);

                entity.ToTable("Fact_Answers");

                entity.Property(e => e.IdAnswer)
                    .HasColumnName("ID_ANSWER")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdValue)
                    .HasColumnName("CD_VALUE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsAnswer)
                    .HasColumnName("DS_ANSWER")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdProfile).HasColumnName("ID_Profile");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_Question");

                entity.Property(e => e.IdQuestionSub).HasColumnName("ID_QUESTION_SUB");

                entity.HasOne(d => d.IdQuestionNavigation)
                    .WithMany(p => p.FactAnswers)
                    .HasForeignKey(d => d.IdQuestion)
                    .HasConstraintName("FK__Fact_Answ__ID_Qu__2474D87C");
            });

            modelBuilder.Entity<Family>(entity =>
            {
                entity.ToTable("FAMILY");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CdGrouping)
                    .IsRequired()
                    .HasColumnName("CD_GROUPING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdParentObservation).HasColumnName("ID_PARENT_OBSERVATION");
            });

            modelBuilder.Entity<FamilyObservation>(entity =>
            {
                entity.HasKey(e => new { e.IdFamily, e.IdElrObservation });

                entity.ToTable("FAMILY_OBSERVATION");

                entity.Property(e => e.IdFamily).HasColumnName("ID_FAMILY");

                entity.Property(e => e.IdElrObservation).HasColumnName("ID_ELR_OBSERVATION");
            });

            modelBuilder.Entity<FollowUpEpiCase>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdFollowUp });

                entity.ToTable("FOLLOW_UP_EPI_CASE");

                entity.HasIndex(e => e.IdPhysician)
                    .HasName("IDX_FOLLOW_UP_EPI_CASE_ID_PHYSICIAN");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdFollowUp).HasColumnName("ID_FOLLOW_UP");

                entity.Property(e => e.AmAge).HasColumnName("AM_AGE");

                entity.Property(e => e.AmWeek).HasColumnName("AM_WEEK");

                entity.Property(e => e.AmYear).HasColumnName("AM_YEAR");

                entity.Property(e => e.CdAnimalType)
                    .HasColumnName("CD_ANIMAL_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCaseStatus)
                    .HasColumnName("CD_CASE_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdClass)
                    .HasColumnName("CD_CLASS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdClosureReason)
                    .HasColumnName("CD_CLOSURE_REASON")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCountyOrig)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY_ORIG")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdDxStatus)
                    .IsRequired()
                    .HasColumnName("CD_DX_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdExtdStatus)
                    .IsRequired()
                    .HasColumnName("CD_EXTD_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdFollowStatus)
                    .HasColumnName("CD_FOLLOW_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .IsRequired()
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdImported)
                    .IsRequired()
                    .HasColumnName("CD_IMPORTED")
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdInvestigator)
                    .HasColumnName("CD_INVESTIGATOR")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdMilitaryBase)
                    .HasColumnName("CD_MILITARY_BASE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdOccupation)
                    .IsRequired()
                    .HasColumnName("CD_OCCUPATION")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdOutbreak)
                    .IsRequired()
                    .HasColumnName("CD_OUTBREAK")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdOutcome)
                    .HasColumnName("CD_OUTCOME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportedType)
                    .IsRequired()
                    .HasColumnName("CD_REPORTED_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdStatus)
                    .IsRequired()
                    .HasColumnName("CD_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAdd1Company)
                    .HasColumnName("DS_ADD1_COMPANY")
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAdd2Company)
                    .IsRequired()
                    .HasColumnName("DS_ADD2_COMPANY")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCityCompany)
                    .IsRequired()
                    .HasColumnName("DS_CITY_COMPANY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCoReference)
                    .HasColumnName("DS_CO_REFERENCE")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DsDaycare)
                    .IsRequired()
                    .HasColumnName("DS_DAYCARE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsEventType)
                    .IsRequired()
                    .HasColumnName("DS_EVENT_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsFaxCompany)
                    .IsRequired()
                    .HasColumnName("DS_FAX_COMPANY")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOrigin)
                    .IsRequired()
                    .HasColumnName("DS_ORIGIN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPhnCompany)
                    .IsRequired()
                    .HasColumnName("DS_PHN_COMPANY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsReason)
                    .HasColumnName("DS_REASON")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsReportedBy)
                    .IsRequired()
                    .HasColumnName("DS_REPORTED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsStateCompany)
                    .IsRequired()
                    .HasColumnName("DS_STATE_COMPANY")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsZipCompany)
                    .IsRequired()
                    .HasColumnName("DS_ZIP_COMPANY")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsZipOrig)
                    .IsRequired()
                    .HasColumnName("DS_ZIP_ORIG")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCaseAccepted)
                    .HasColumnName("DT_CASE_ACCEPTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCdcReported)
                    .HasColumnName("DT_CDC_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtClosure)
                    .HasColumnName("DT_CLOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDiagnosis)
                    .HasColumnName("DT_DIAGNOSIS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEpiReReported)
                    .HasColumnName("DT_EPI_RE_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEpiReported)
                    .HasColumnName("DT_EPI_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEvent)
                    .HasColumnName("DT_EVENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExtdStatus)
                    .HasColumnName("DT_EXTD_STATUS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFlatfile)
                    .HasColumnName("DT_FLATFILE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLab)
                    .HasColumnName("DT_LAB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLastAttended)
                    .HasColumnName("DT_LAST_ATTENDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOnset)
                    .HasColumnName("DT_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStatus)
                    .HasColumnName("DT_STATUS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdAnimalProfile).HasColumnName("ID_ANIMAL_PROFILE");

                entity.Property(e => e.IdAnimalProfileAttached).HasColumnName("ID_ANIMAL_PROFILE_ATTACHED");

                entity.Property(e => e.IdCaseDef).HasColumnName("ID_CASE_DEF");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdConfirmNonDoh).HasColumnName("ID_CONFIRM_NON_DOH");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdPhysician).HasColumnName("ID_PHYSICIAN");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.IdUserReview)
                    .IsRequired()
                    .HasColumnName("ID_USER_REVIEW")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAnimalExposure)
                    .IsRequired()
                    .HasColumnName("IN_ANIMAL_EXPOSURE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InComplete)
                    .IsRequired()
                    .HasColumnName("IN_COMPLETE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDeletedByBureauStaff)
                    .HasColumnName("IN_DELETED_BY_BUREAU_STAFF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEcr).HasColumnName("IN_ECR");

                entity.Property(e => e.InHospitalized)
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutbreak).HasColumnName("IN_OUTBREAK");

                entity.Property(e => e.InProphalaxed)
                    .HasColumnName("IN_PROPHALAXED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUnkTaskList)
                    .HasColumnName("IN_UNK_TASK_LIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmCompany)
                    .IsRequired()
                    .HasColumnName("NM_COMPANY")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.IdPhysicianNavigation)
                    .WithMany(p => p.FollowUpEpiCase)
                    .HasForeignKey(d => d.IdPhysician)
                    .HasConstraintName("FK_FOLLOW_UP_EPI_CASE_ID_PHYSICIAN");
            });

            modelBuilder.Entity<FollowUpLeadExt>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdFollowUp });

                entity.ToTable("FOLLOW_UP_LEAD_EXT");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdFollowUp).HasColumnName("ID_FOLLOW_UP");

                entity.Property(e => e.CdAppetite)
                    .HasColumnName("CD_APPETITE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdCaseClosure)
                    .IsRequired()
                    .HasColumnName("CD_CASE_CLOSURE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdDiet)
                    .HasColumnName("CD_DIET")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdExpType1)
                    .IsRequired()
                    .HasColumnName("CD_EXP_TYPE_1")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdExpType2)
                    .IsRequired()
                    .HasColumnName("CD_EXP_TYPE_2")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdExpType3)
                    .IsRequired()
                    .HasColumnName("CD_EXP_TYPE_3")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdExpType4)
                    .IsRequired()
                    .HasColumnName("CD_EXP_TYPE_4")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdExposure1)
                    .IsRequired()
                    .HasColumnName("CD_EXPOSURE_1")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdExposure2)
                    .IsRequired()
                    .HasColumnName("CD_EXPOSURE_2")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdExposure3)
                    .IsRequired()
                    .HasColumnName("CD_EXPOSURE_3")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdExposure4)
                    .IsRequired()
                    .HasColumnName("CD_EXPOSURE_4")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdMovedToCounty)
                    .IsRequired()
                    .HasColumnName("CD_MOVED_TO_COUNTY")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdOrigin)
                    .IsRequired()
                    .HasColumnName("CD_ORIGIN")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTreatment)
                    .IsRequired()
                    .HasColumnName("CD_TREATMENT")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTypeSite)
                    .IsRequired()
                    .HasColumnName("CD_TYPE_SITE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsExpType1)
                    .IsRequired()
                    .HasColumnName("DS_EXP_TYPE_1")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsExpType2)
                    .IsRequired()
                    .HasColumnName("DS_EXP_TYPE_2")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsExpType3)
                    .IsRequired()
                    .HasColumnName("DS_EXP_TYPE_3")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsExpType4)
                    .IsRequired()
                    .HasColumnName("DS_EXP_TYPE_4")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsMedicaid)
                    .IsRequired()
                    .HasColumnName("DS_MEDICAID")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherMedical)
                    .IsRequired()
                    .HasColumnName("DS_OTHER_MEDICAL")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherOrigin)
                    .IsRequired()
                    .HasColumnName("DS_OTHER_ORIGIN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTypeSite)
                    .IsRequired()
                    .HasColumnName("DS_TYPE_SITE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtCaseClosure)
                    .HasColumnName("DT_CASE_CLOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDue)
                    .HasColumnName("DT_DUE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSiteVisit)
                    .HasColumnName("DT_SITE_VISIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTreatmentEnd)
                    .HasColumnName("DT_TREATMENT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTreatmentStart)
                    .HasColumnName("DT_TREATMENT_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAdoption)
                    .HasColumnName("IN_ADOPTION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAnemia)
                    .IsRequired()
                    .HasColumnName("IN_ANEMIA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InCounseling)
                    .HasColumnName("IN_COUNSELING")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InImmigrant)
                    .HasColumnName("IN_IMMIGRANT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMedicaid)
                    .HasColumnName("IN_MEDICAID")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMissedAppointment)
                    .IsRequired()
                    .HasColumnName("IN_MISSED_APPOINTMENT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMouthing)
                    .IsRequired()
                    .HasColumnName("IN_MOUTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMoveAction)
                    .IsRequired()
                    .HasColumnName("IN_MOVE_ACTION")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMoveType)
                    .IsRequired()
                    .HasColumnName("IN_MOVE_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMoved)
                    .IsRequired()
                    .HasColumnName("IN_MOVED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InNoResponse)
                    .IsRequired()
                    .HasColumnName("IN_NO_RESPONSE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOtherMedical)
                    .IsRequired()
                    .HasColumnName("IN_OTHER_MEDICAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InParentsRefuse)
                    .IsRequired()
                    .HasColumnName("IN_PARENTS_REFUSE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPica)
                    .IsRequired()
                    .HasColumnName("IN_PICA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPostConfirm615Yrs)
                    .IsRequired()
                    .HasColumnName("IN_POST_CONFIRM_6_15_YRS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPostConfirm6Yrs)
                    .IsRequired()
                    .HasColumnName("IN_POST_CONFIRM_6_YRS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPregnant)
                    .IsRequired()
                    .HasColumnName("IN_PREGNANT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InRefugee)
                    .HasColumnName("IN_REFUGEE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InSiteVisit)
                    .IsRequired()
                    .HasColumnName("IN_SITE_VISIT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTwoPostConfirm6Yrs)
                    .IsRequired()
                    .HasColumnName("IN_TWO_POST_CONFIRM_6_YRS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InWic)
                    .HasColumnName("IN_WIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<FuzzyMatchLog>(entity =>
            {
                entity.ToTable("FUZZY_MATCH_LOG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FuzzyMatchLogEntry>(entity =>
            {
                entity.ToTable("FUZZY_MATCH_LOG_ENTRY");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AmEditDistance).HasColumnName("AM_EDIT_DISTANCE");

                entity.Property(e => e.DtBirthIncoming)
                    .HasColumnName("DT_BIRTH_INCOMING")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBirthMatched)
                    .HasColumnName("DT_BIRTH_MATCHED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdFuzzyMatchLog).HasColumnName("ID_FUZZY_MATCH_LOG");

                entity.Property(e => e.IdProfileMatched).HasColumnName("ID_PROFILE_MATCHED");

                entity.Property(e => e.InWasChosen).HasColumnName("IN_WAS_CHOSEN");

                entity.Property(e => e.NmFirstIncoming)
                    .IsRequired()
                    .HasColumnName("NM_FIRST_INCOMING")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirstMatched)
                    .IsRequired()
                    .HasColumnName("NM_FIRST_MATCHED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmLastIncoming)
                    .IsRequired()
                    .HasColumnName("NM_LAST_INCOMING")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmLastMatched)
                    .IsRequired()
                    .HasColumnName("NM_LAST_MATCHED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFuzzyMatchLogNavigation)
                    .WithMany(p => p.FuzzyMatchLogEntry)
                    .HasForeignKey(d => d.IdFuzzyMatchLog)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FUZZY_MAT__ID_FU__1D92D0C3");
            });

            modelBuilder.Entity<GisToolParcels>(entity =>
            {
                entity.HasKey(e => new { e.IdArea, e.IdGisToolParcel });

                entity.ToTable("GIS_TOOL_PARCELS");

                entity.Property(e => e.IdArea).HasColumnName("ID_AREA");

                entity.Property(e => e.IdGisToolParcel)
                    .HasColumnName("ID_GIS_TOOL_PARCEL")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AmNumOfBuildings).HasColumnName("AM_NUM_OF_BUILDINGS");

                entity.Property(e => e.AmNumOfUnits).HasColumnName("AM_NUM_OF_UNITS");

                entity.Property(e => e.CdAddressStatus)
                    .HasColumnName("CD_ADDRESS_STATUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdParcelStatus)
                    .IsRequired()
                    .HasColumnName("CD_PARCEL_STATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdParcelType)
                    .HasColumnName("CD_PARCEL_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdSurveyStatus)
                    .HasColumnName("CD_SURVEY_STATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddNewAddress)
                    .HasColumnName("DS_ADD_NEW_ADDRESS")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhyAddr1)
                    .HasColumnName("DS_PHY_ADDR1")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhyAddr2)
                    .HasColumnName("DS_PHY_ADDR2")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEvent)
                    .HasColumnName("DT_EVENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdParcel)
                    .HasColumnName("ID_PARCEL")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdParcelSeq).HasColumnName("ID_PARCEL_SEQ");

                entity.Property(e => e.IdRoute).HasColumnName("ID_ROUTE");

                entity.Property(e => e.NmParcel)
                    .HasColumnName("NM_PARCEL")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GisToolRoutes>(entity =>
            {
                entity.HasKey(e => e.IdGisToolRoute);

                entity.ToTable("GIS_TOOL_ROUTES");

                entity.Property(e => e.IdGisToolRoute).HasColumnName("ID_GIS_TOOL_ROUTE");

                entity.Property(e => e.DsNotes)
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOszmalName)
                    .HasColumnName("DS_OSZMAL_NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InPickedUp).HasColumnName("IN_PICKED_UP");

                entity.Property(e => e.NmRoute)
                    .HasColumnName("NM_ROUTE")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HepatitisAExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("HEPATITIS_A_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdContactType)
                    .IsRequired()
                    .HasColumnName("CD_CONTACT_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdFemalePartners)
                    .HasColumnName("CD_FEMALE_PARTNERS")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.CdMalePartners)
                    .HasColumnName("CD_MALE_PARTNERS")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.CdReasonTravel)
                    .HasColumnName("CD_REASON_TRAVEL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFamilyTravel1)
                    .HasColumnName("DS_FAMILY_TRAVEL_1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsFamilyTravel2)
                    .HasColumnName("DS_FAMILY_TRAVEL_2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsFamilyTravel3)
                    .HasColumnName("DS_FAMILY_TRAVEL_3")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsFoodItem)
                    .IsRequired()
                    .HasColumnName("DS_FOOD_ITEM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherContactType)
                    .IsRequired()
                    .HasColumnName("DS_OTHER_CONTACT_TYPE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsPatientTravel1)
                    .HasColumnName("DS_PATIENT_TRAVEL_1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsReasonTravelOther)
                    .HasColumnName("DS_REASON_TRAVEL_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InCcFacility)
                    .HasColumnName("IN_CC_FACILITY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactHepA)
                    .HasColumnName("IN_CONTACT_HEP_A")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDaycare)
                    .HasColumnName("IN_DAYCARE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEmpFoodhandler)
                    .HasColumnName("IN_EMP_FOODHANDLER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEpiLink)
                    .HasColumnName("IN_EPI_LINK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFamilyTravelA)
                    .HasColumnName("IN_FAMILY_TRAVEL_A")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFoodhandler)
                    .HasColumnName("IN_FOODHANDLER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHouseContact)
                    .HasColumnName("IN_HOUSE_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectDrugs)
                    .HasColumnName("IN_INJECT_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InNotFoodhandler)
                    .HasColumnName("IN_NOT_FOODHANDLER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InNotIdentified)
                    .HasColumnName("IN_NOT_IDENTIFIED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientTravelA)
                    .HasColumnName("IN_PATIENT_TRAVEL_A")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSuspectedSource)
                    .HasColumnName("IN_SUSPECTED_SOURCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUseDrugs)
                    .HasColumnName("IN_USE_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterborne)
                    .HasColumnName("IN_WATERBORNE")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HepatitisBcAcuteExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("HEPATITIS_BC_ACUTE_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmBloodTransfuPrior92)
                    .HasColumnName("AM_BLOOD_TRANSFU_PRIOR_92")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmBodyPiercing)
                    .HasColumnName("AM_BODY_PIERCING")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmClottingFactPrior87)
                    .HasColumnName("AM_CLOTTING_FACT_PRIOR_87")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmContactHepatitis)
                    .HasColumnName("AM_CONTACT_HEPATITIS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmContactSomeoneBlood)
                    .HasColumnName("AM_CONTACT_SOMEONE_BLOOD")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AmDentalWorkOral)
                    .HasColumnName("AM_DENTAL_WORK_ORAL")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmDiagnoseHiv)
                    .HasColumnName("AM_DIAGNOSE_HIV")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmEverStdTreated)
                    .HasColumnName("AM_EVER_STD_TREATED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmFirstInject).HasColumnName("AM_FIRST_INJECT");

                entity.Property(e => e.AmHadTattoo)
                    .HasColumnName("AM_HAD_TATTOO")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmHemodialysisYounga)
                    .HasColumnName("AM_HEMODIALYSIS_YOUNGA")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmLengthinterview).HasColumnName("AM_LENGTHINTERVIEW");

                entity.Property(e => e.AmNegativeHivTest)
                    .HasColumnName("AM_NEGATIVE_HIV_TEST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmOrganTransplPrior92)
                    .HasColumnName("AM_ORGAN_TRANSPL_PRIOR_92")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmOtherSurgery)
                    .HasColumnName("AM_OTHER_SURGERY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmSpentInvestigating).HasColumnName("AM_SPENT_INVESTIGATING");

                entity.Property(e => e.AmTimesIndrugTreatment).HasColumnName("AM_TIMES_INDRUG_TREATMENT");

                entity.Property(e => e.CdContactType)
                    .IsRequired()
                    .HasColumnName("CD_CONTACT_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdCorrectional)
                    .IsRequired()
                    .HasColumnName("CD_CORRECTIONAL")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdCorrectionalInternal)
                    .HasColumnName("CD_CORRECTIONAL_INTERNAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDrink6More)
                    .HasColumnName("CD_DRINK_6_MORE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDrinkAlcohol)
                    .HasColumnName("CD_DRINK_ALCOHOL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDrinkDay)
                    .HasColumnName("CD_DRINK_DAY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDxstatusInterview)
                    .HasColumnName("CD_DXSTATUS_INTERVIEW")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdEducationLevel)
                    .HasColumnName("CD_EDUCATION_LEVEL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdHousing)
                    .HasColumnName("CD_HOUSING")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdHowManyInject)
                    .HasColumnName("CD_HOW_MANY_INJECT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdHowManyTimeInject)
                    .HasColumnName("CD_HOW_MANY_TIME_INJECT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdInjectHabits)
                    .HasColumnName("CD_INJECT_HABITS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdInsuranceCoverage)
                    .HasColumnName("CD_INSURANCE_COVERAGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdInterviewMode)
                    .HasColumnName("CD_INTERVIEW_MODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdKindInsurance)
                    .HasColumnName("CD_KIND_INSURANCE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdNegativeHivTest)
                    .HasColumnName("CD_NEGATIVE_HIV_TEST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdNumberSexPartners)
                    .HasColumnName("CD_NUMBER_SEX_PARTNERS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersExchange)
                    .HasColumnName("CD_PARTNERS_EXCHANGE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersFemale)
                    .HasColumnName("CD_PARTNERS_FEMALE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersInfected)
                    .HasColumnName("CD_PARTNERS_INFECTED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersMale)
                    .HasColumnName("CD_PARTNERS_MALE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersUsers)
                    .HasColumnName("CD_PARTNERS_USERS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPiercingPerformed)
                    .HasColumnName("CD_PIERCING_PERFORMED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReasonNoContact)
                    .HasColumnName("CD_REASON_NO_CONTACT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdResultOfContact)
                    .HasColumnName("CD_RESULT_OF_CONTACT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSixPastMonthInjected)
                    .HasColumnName("CD_SIX_PAST_MONTH_INJECTED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTattooPerformed)
                    .HasColumnName("CD_TATTOO_PERFORMED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTimesUseCondom)
                    .HasColumnName("CD_TIMES_USE_CONDOM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTreatmentProgram)
                    .HasColumnName("CD_TREATMENT_PROGRAM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdWhereRecentNeghcv)
                    .HasColumnName("CD_WHERE_RECENT_NEGHCV")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAccidentalStick)
                    .HasColumnName("DS_ACCIDENTAL_STICK")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsBloodExposure)
                    .IsRequired()
                    .HasColumnName("DS_BLOOD_EXPOSURE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDentalWhere)
                    .HasColumnName("DS_DENTAL_WHERE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsDetentionEnd)
                    .HasColumnName("DS_DETENTION_END")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDetentionStart)
                    .HasColumnName("DS_DETENTION_START")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDrugTreatFacility)
                    .HasColumnName("DS_DRUG_TREAT_FACILITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsEmploymentStatusother)
                    .HasColumnName("DS_EMPLOYMENT_STATUSOTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFirstOther)
                    .HasColumnName("DS_FIRST_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFitOther)
                    .HasColumnName("DS_FIT_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvCounseling)
                    .HasColumnName("DS_HCV_COUNSELING")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvDrugFacility)
                    .HasColumnName("DS_HCV_DRUG_FACILITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvHospital)
                    .HasColumnName("DS_HCV_HOSPITAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvOther)
                    .HasColumnName("DS_HCV_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvPrimary)
                    .HasColumnName("DS_HCV_PRIMARY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvPrison)
                    .HasColumnName("DS_HCV_PRISON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvWhen)
                    .HasColumnName("DS_HCV_WHEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHouseOther)
                    .HasColumnName("DS_HOUSE_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsIncarcerated)
                    .IsRequired()
                    .HasColumnName("DS_INCARCERATED")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsInfusionInjectionWhere)
                    .HasColumnName("DS_INFUSION_INJECTION_WHERE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsInjectHabitsOther)
                    .HasColumnName("DS_INJECT_HABITS_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsInjectOther)
                    .HasColumnName("DS_INJECT_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsInterviewer)
                    .HasColumnName("DS_INTERVIEWER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsInvasiveWhere)
                    .HasColumnName("DS_INVASIVE_WHERE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsLastInjected)
                    .HasColumnName("DS_LAST_INJECTED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsLengthIncarcerated)
                    .IsRequired()
                    .HasColumnName("DS_LENGTH_INCARCERATED")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsNonDentalWhere)
                    .HasColumnName("DS_NON_DENTAL_WHERE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOftenOther)
                    .HasColumnName("DS_OFTEN_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherContact)
                    .HasColumnName("DS_OTHER_CONTACT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherContactType)
                    .IsRequired()
                    .HasColumnName("DS_OTHER_CONTACT_TYPE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherDrugs)
                    .HasColumnName("DS_OTHER_DRUGS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPiercedOther)
                    .IsRequired()
                    .HasColumnName("DS_PIERCED_OTHER")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPiercingPerformOther)
                    .HasColumnName("DS_PIERCING_PERFORM_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPiercingPerformedComm)
                    .HasColumnName("DS_PIERCING_PERFORMED_COMM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPiercingPerformedCorrect)
                    .HasColumnName("DS_PIERCING_PERFORMED_CORRECT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPiercingPerformedFriend)
                    .HasColumnName("DS_PIERCING_PERFORMED_FRIEND")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsReceivedBlood)
                    .IsRequired()
                    .HasColumnName("DS_RECEIVED_BLOOD")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsStdTreatment)
                    .IsRequired()
                    .HasColumnName("DS_STD_TREATMENT")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTattooOther)
                    .IsRequired()
                    .HasColumnName("DS_TATTOO_OTHER")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTattooPerformedComm)
                    .HasColumnName("DS_TATTOO_PERFORMED_COMM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTattooPerformedCorrect)
                    .HasColumnName("DS_TATTOO_PERFORMED_CORRECT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTattooPerformedFriend)
                    .HasColumnName("DS_TATTOO_PERFORMED_FRIEND")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTattooPerformedOther)
                    .HasColumnName("DS_TATTOO_PERFORMED_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTimeOther)
                    .HasColumnName("DS_TIME_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTypeContactOther)
                    .HasColumnName("DS_TYPE_CONTACT_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsWhereReceNeghcvother)
                    .HasColumnName("DS_WHERE_RECE_NEGHCVOTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsWithOther)
                    .HasColumnName("DS_WITH_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtAttemptContactOne)
                    .HasColumnName("DT_ATTEMPT_CONTACT_ONE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAttemptContactThr)
                    .HasColumnName("DT_ATTEMPT_CONTACT_THR")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAttemptContactTwo)
                    .HasColumnName("DT_ATTEMPT_CONTACT_TWO")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtNegativeTest)
                    .HasColumnName("DT_NEGATIVE_TEST")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtNegativehcv)
                    .HasColumnName("DT_NEGATIVEHCV")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtProvideGuide)
                    .HasColumnName("DT_PROVIDE_GUIDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAboutHepatitis)
                    .HasColumnName("IN_ABOUT_HEPATITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAccessContactAvailable)
                    .HasColumnName("IN_ACCESS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAccessContactChecked)
                    .HasColumnName("IN_ACCESS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAccessContactValid)
                    .HasColumnName("IN_ACCESS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAccidentalPuncture)
                    .IsRequired()
                    .HasColumnName("IN_ACCIDENTAL_PUNCTURE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAccidentalStick)
                    .HasColumnName("IN_ACCIDENTAL_STICK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBloodExposure)
                    .IsRequired()
                    .HasColumnName("IN_BLOOD_EXPOSURE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InBloodTransfusionPrior92)
                    .HasColumnName("IN_BLOOD_TRANSFUSION_PRIOR_92")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBodyPiercing)
                    .HasColumnName("IN_BODY_PIERCING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBrbpubContactAvailable)
                    .HasColumnName("IN_BRBPub_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBrbpubContactChecked)
                    .HasColumnName("IN_BRBPub_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBrbpubContactValid)
                    .HasColumnName("IN_BRBPub_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClottingFactorPrior87)
                    .HasColumnName("IN_CLOTTING_FACTOR_PRIOR_87")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactHepatitis)
                    .HasColumnName("IN_CONTACT_HEPATITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactSomeoneBlood)
                    .HasColumnName("IN_CONTACT_SOMEONE_BLOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCrack)
                    .HasColumnName("IN_CRACK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCurrently)
                    .IsRequired()
                    .HasColumnName("IN_CURRENTLY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InCurrentlyIncarcerated)
                    .HasColumnName("IN_CURRENTLY_INCARCERATED")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InDentalSurgery)
                    .IsRequired()
                    .HasColumnName("IN_DENTAL_SURGERY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDentalWorkOral)
                    .HasColumnName("IN_DENTAL_WORK_ORAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDetention)
                    .HasColumnName("IN_DETENTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDetentionMorethan6)
                    .HasColumnName("IN_DETENTION_MORETHAN6")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDiagnoseHiv)
                    .HasColumnName("IN_DIAGNOSE_HIV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDilaudid)
                    .HasColumnName("IN_DILAUDID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDisabledWork)
                    .HasColumnName("IN_DISABLED_WORK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDividedDrugs)
                    .HasColumnName("IN_DIVIDED_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDontKnow)
                    .HasColumnName("IN_DONT_KNOW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrugFacilityInvestig)
                    .HasColumnName("IN_DRUG_FACILITY_INVESTIG")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InDrugTreatmentProg)
                    .HasColumnName("IN_DRUG_TREATMENT_PROG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEHarsContactAvailable)
                    .HasColumnName("IN_eHARS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEHarsContactChecked)
                    .HasColumnName("IN_eHARS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEHarsContactValid)
                    .HasColumnName("IN_eHARS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEmployedFullTime)
                    .HasColumnName("IN_EMPLOYED_FULL_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEmployedOther)
                    .HasColumnName("IN_EMPLOYED_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEmployedPartTime)
                    .HasColumnName("IN_EMPLOYED_PART_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEmployedRefused)
                    .HasColumnName("IN_EMPLOYED_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEverIncarcerated)
                    .IsRequired()
                    .HasColumnName("IN_EVER_INCARCERATED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEverStdTreated)
                    .HasColumnName("IN_EVER_STD_TREATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedBlood)
                    .HasColumnName("IN_EXPOSED_BLOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedContact)
                    .HasColumnName("IN_EXPOSED_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedDontKnow)
                    .HasColumnName("IN_EXPOSED_DONT_KNOW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedInject)
                    .HasColumnName("IN_EXPOSED_INJECT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedNeedle)
                    .HasColumnName("IN_EXPOSED_NEEDLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRefused)
                    .HasColumnName("IN_EXPOSED_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedSexual)
                    .HasColumnName("IN_EXPOSED_SEXUAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedTattoo)
                    .HasColumnName("IN_EXPOSED_TATTOO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFemalePartners)
                    .IsRequired()
                    .HasColumnName("IN_FEMALE_PARTNERS")
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InFirstAmphetamine)
                    .HasColumnName("IN_FIRST_AMPHETAMINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstCocaine)
                    .HasColumnName("IN_FIRST_COCAINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstCrack)
                    .HasColumnName("IN_FIRST_CRACK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstDiluadid)
                    .HasColumnName("IN_FIRST_DILUADID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstHeroin)
                    .HasColumnName("IN_FIRST_HEROIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstOther)
                    .HasColumnName("IN_FIRST_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstOxycontin)
                    .HasColumnName("IN_FIRST_OXYCONTIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstRefused)
                    .HasColumnName("IN_FIRST_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstXanax)
                    .HasColumnName("IN_FIRST_XANAX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitAddicted)
                    .HasColumnName("IN_FIT_ADDICTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitForSex)
                    .HasColumnName("IN_FIT_FOR_SEX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitHabit)
                    .HasColumnName("IN_FIT_HABIT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitNotAddicted)
                    .HasColumnName("IN_FIT_NOT_ADDICTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitOccasions)
                    .HasColumnName("IN_FIT_OCCASIONS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitOther)
                    .HasColumnName("IN_FIT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitRecreational)
                    .HasColumnName("IN_FIT_RECREATIONAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitRefused)
                    .HasColumnName("IN_FIT_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitToBond)
                    .HasColumnName("IN_FIT_TO_BOND")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitUnhappy)
                    .HasColumnName("IN_FIT_UNHAPPY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitWantTo)
                    .HasColumnName("IN_FIT_WANT_TO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFloridaHepatGuide)
                    .HasColumnName("IN_FLORIDA_HEPAT_GUIDE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InFreqBloodContact)
                    .IsRequired()
                    .HasColumnName("IN_FREQ_BLOOD_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InFreqBloodContactPublicWorker)
                    .IsRequired()
                    .HasColumnName("IN_FREQ_BLOOD_CONTACT_PUBLIC_WORKER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHadTattoo)
                    .HasColumnName("IN_HAD_TATTOO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHallucinogens)
                    .HasColumnName("IN_HALLUCINOGENS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHavePrescription)
                    .HasColumnName("IN_HAVE_PRESCRIPTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvCounseling)
                    .HasColumnName("IN_HCV_COUNSELING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvDrugFacility)
                    .HasColumnName("IN_HCV_DRUG_FACILITY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvHospital)
                    .HasColumnName("IN_HCV_HOSPITAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvOther)
                    .HasColumnName("IN_HCV_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvPrimary)
                    .HasColumnName("IN_HCV_PRIMARY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvPrison)
                    .HasColumnName("IN_HCV_PRISON")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvRefused)
                    .HasColumnName("IN_HCV_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHemodialysis)
                    .IsRequired()
                    .HasColumnName("IN_HEMODIALYSIS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHepDCoInfection)
                    .IsRequired()
                    .HasColumnName("IN_HEP_D_CO_INFECTION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InHepDTest)
                    .IsRequired()
                    .HasColumnName("IN_HEP_D_TEST")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InHeroin)
                    .HasColumnName("IN_HEROIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHmsContactAvailable)
                    .HasColumnName("IN_HMS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHmsContactChecked)
                    .HasColumnName("IN_HMS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHmsContactValid)
                    .HasColumnName("IN_HMS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHospitalizedForAnyReason)
                    .IsRequired()
                    .HasColumnName("IN_HOSPITALIZED_FOR_ANY_REASON")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InIncarcerated)
                    .IsRequired()
                    .HasColumnName("IN_INCARCERATED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InInfectedPast10Years)
                    .HasColumnName("IN_INFECTED_PAST_10_YEARS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInhalants)
                    .HasColumnName("IN_INHALANTS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectAmphetamine)
                    .HasColumnName("IN_INJECT_AMPHETAMINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectCocaine)
                    .HasColumnName("IN_INJECT_COCAINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectCrack)
                    .HasColumnName("IN_INJECT_CRACK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectDiluadid)
                    .HasColumnName("IN_INJECT_DILUADID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectDrugs)
                    .IsRequired()
                    .HasColumnName("IN_INJECT_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InInjectHeroin)
                    .HasColumnName("IN_INJECT_HEROIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectOther)
                    .HasColumnName("IN_INJECT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectOxycontin)
                    .HasColumnName("IN_INJECT_OXYCONTIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectRefused)
                    .HasColumnName("IN_INJECT_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectStreetDrugs)
                    .HasColumnName("IN_INJECT_STREET_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectXanax)
                    .HasColumnName("IN_INJECT_XANAX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjected6Mos)
                    .HasColumnName("IN_INJECTED_6_MOS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInmateContactAvailable)
                    .HasColumnName("IN_INMATE_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInmateContactChecked)
                    .HasColumnName("IN_INMATE_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInmateContactValid)
                    .HasColumnName("IN_INMATE_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLentUsed)
                    .HasColumnName("IN_LENT_USED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLexisContactAvailable)
                    .HasColumnName("IN_LEXIS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLexisContactChecked)
                    .HasColumnName("IN_LEXIS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLexisContactValid)
                    .HasColumnName("IN_LEXIS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLongTermCare)
                    .IsRequired()
                    .HasColumnName("IN_LONG_TERM_CARE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InLoseTrackNeedle)
                    .HasColumnName("IN_LOSE_TRACK_NEEDLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMalePartners)
                    .IsRequired()
                    .HasColumnName("IN_MALE_PARTNERS")
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMarijuanahash)
                    .HasColumnName("IN_MARIJUANAHASH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMedicalEmployed)
                    .IsRequired()
                    .HasColumnName("IN_MEDICAL_EMPLOYED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMethadone)
                    .HasColumnName("IN_METHADONE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMethamphetamine)
                    .HasColumnName("IN_METHAMPHETAMINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InNegativeTest)
                    .IsRequired()
                    .HasColumnName("IN_NEGATIVE_TEST")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InNegativehcv)
                    .HasColumnName("IN_NEGATIVEHCV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InNonDentalSurgery)
                    .IsRequired()
                    .HasColumnName("IN_NON_DENTAL_SURGERY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOftenDealers)
                    .HasColumnName("IN_OFTEN_DEALERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenFriends)
                    .HasColumnName("IN_OFTEN_FRIENDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenGallery)
                    .HasColumnName("IN_OFTEN_GALLERY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenOther)
                    .HasColumnName("IN_OFTEN_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenOwn)
                    .HasColumnName("IN_OFTEN_OWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenPrison)
                    .HasColumnName("IN_OFTEN_PRISON")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenRefused)
                    .HasColumnName("IN_OFTEN_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenStreet)
                    .HasColumnName("IN_OFTEN_STREET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOpana)
                    .HasColumnName("IN_OPANA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOrganTransplantPrior92)
                    .HasColumnName("IN_ORGAN_TRANSPLANT_PRIOR_92")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherContactAvailable)
                    .HasColumnName("IN_OTHER_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherContactChecked)
                    .HasColumnName("IN_OTHER_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherContactValid)
                    .HasColumnName("IN_OTHER_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherDrugs)
                    .HasColumnName("IN_OTHER_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherSurgery)
                    .HasColumnName("IN_OTHER_SURGERY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOxycontin)
                    .HasColumnName("IN_OXYCONTIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPainKillers)
                    .HasColumnName("IN_PAIN_KILLERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientContacted)
                    .HasColumnName("IN_PATIENT_CONTACTED")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InPeopleContactAvailable)
                    .HasColumnName("IN_PEOPLE_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPeopleContactChecked)
                    .HasColumnName("IN_PEOPLE_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPeopleContactValid)
                    .HasColumnName("IN_PEOPLE_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPierced)
                    .IsRequired()
                    .HasColumnName("IN_PIERCED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPiercedComm)
                    .IsRequired()
                    .HasColumnName("IN_PIERCED_COMM")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPiercedCorr)
                    .IsRequired()
                    .HasColumnName("IN_PIERCED_CORR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPiercedOther)
                    .IsRequired()
                    .HasColumnName("IN_PIERCED_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPiercingPerformedFriend)
                    .HasColumnName("IN_PIERCING_PERFORMED_FRIEND")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPooledMoney)
                    .HasColumnName("IN_POOLED_MONEY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPowdercocaine)
                    .HasColumnName("IN_POWDERCOCAINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrismContactAvailable)
                    .HasColumnName("IN_PRISM_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrismContactChecked)
                    .HasColumnName("IN_PRISM_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrismContactValid)
                    .HasColumnName("IN_PRISM_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPublicWorker)
                    .IsRequired()
                    .HasColumnName("IN_PUBLIC_WORKER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReceivedBlood)
                    .IsRequired()
                    .HasColumnName("IN_RECEIVED_BLOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReceivedIvInfusions)
                    .IsRequired()
                    .HasColumnName("IN_RECEIVED_IV_INFUSIONS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InReceivedMedication)
                    .IsRequired()
                    .HasColumnName("IN_RECEIVED_MEDICATION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InReusedNeedles)
                    .HasColumnName("IN_REUSED_NEEDLES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShareWorksDrugs)
                    .HasColumnName("IN_SHARE_WORKS_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSharedCleanedNeedle)
                    .HasColumnName("IN_SHARED_CLEANED_NEEDLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShotsContactAvailable)
                    .HasColumnName("IN_SHOTS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShotsContactChecked)
                    .HasColumnName("IN_SHOTS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShotsContactValid)
                    .HasColumnName("IN_SHOTS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpecialCircumstances)
                    .HasColumnName("IN_SPECIAL_CIRCUMSTANCES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InStdTreatmnet)
                    .IsRequired()
                    .HasColumnName("IN_STD_TREATMNET")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InStreetDrugs)
                    .HasColumnName("IN_STREET_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InStudentFullTime)
                    .HasColumnName("IN_STUDENT_FULL_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InStudentPartTime)
                    .HasColumnName("IN_STUDENT_PART_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurveyOnline)
                    .HasColumnName("IN_SURVEY_ONLINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSuspectedContact)
                    .IsRequired()
                    .HasColumnName("IN_SUSPECTED_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTattoo)
                    .IsRequired()
                    .HasColumnName("IN_TATTOO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTattooComm)
                    .IsRequired()
                    .HasColumnName("IN_TATTOO_COMM")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTattooCorr)
                    .IsRequired()
                    .HasColumnName("IN_TATTOO_CORR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTattooOther)
                    .IsRequired()
                    .HasColumnName("IN_TATTOO_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTattooPerformedFriend)
                    .HasColumnName("IN_TATTOO_PERFORMED_FRIEND")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeCounty)
                    .HasColumnName("IN_TIME_COUNTY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeFederal)
                    .HasColumnName("IN_TIME_FEDERAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeJuvenile)
                    .HasColumnName("IN_TIME_JUVENILE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeOther)
                    .HasColumnName("IN_TIME_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeRefused)
                    .HasColumnName("IN_TIME_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeState)
                    .HasColumnName("IN_TIME_STATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTranquilizers)
                    .HasColumnName("IN_TRANQUILIZERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTreatmentAa)
                    .HasColumnName("IN_TREATMENT_AA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypecontactDrugUsing)
                    .HasColumnName("IN_TYPECONTACT_DRUG_USING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypecontactHousehold)
                    .HasColumnName("IN_TYPECONTACT_HOUSEHOLD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypecontactOther)
                    .HasColumnName("IN_TYPECONTACT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypecontactSexual)
                    .HasColumnName("IN_TYPECONTACT_SEXUAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUnemployed)
                    .HasColumnName("IN_UNEMPLOYED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUseDrugs)
                    .IsRequired()
                    .HasColumnName("IN_USE_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InUseNeedle)
                    .HasColumnName("IN_USE_NEEDLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUsedCooker)
                    .HasColumnName("IN_USED_COOKER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUsedCotton)
                    .HasColumnName("IN_USED_COTTON")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUsedRinsewater)
                    .HasColumnName("IN_USED_RINSEWATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InValidContactInfo)
                    .HasColumnName("IN_VALID_CONTACT_INFO")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InVehicleContactAvailable)
                    .HasColumnName("IN_VEHICLE_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVehicleContactChecked)
                    .HasColumnName("IN_VEHICLE_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVehicleContactValid)
                    .HasColumnName("IN_VEHICLE_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVeteransContactAvailable)
                    .HasColumnName("IN_VETERANS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVeteransContactChecked)
                    .HasColumnName("IN_VETERANS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVeteransContactValid)
                    .HasColumnName("IN_VETERANS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWhiteContactAvailable)
                    .HasColumnName("IN_WHITE_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWhiteContactChecked)
                    .HasColumnName("IN_WHITE_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWhiteContactValid)
                    .HasColumnName("IN_WHITE_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWith5YearsOlder)
                    .HasColumnName("IN_WITH_5_YEARS_OLDER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithAcquaintances)
                    .HasColumnName("IN_WITH_ACQUAINTANCES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithCloseFriends)
                    .HasColumnName("IN_WITH_CLOSE_FRIENDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithDealer)
                    .HasColumnName("IN_WITH_DEALER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithFamily)
                    .HasColumnName("IN_WITH_FAMILY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithLessExperience)
                    .HasColumnName("IN_WITH_LESS_EXPERIENCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithMoreExperience)
                    .HasColumnName("IN_WITH_MORE_EXPERIENCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithNoOne)
                    .HasColumnName("IN_WITH_NO_ONE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithOther)
                    .HasColumnName("IN_WITH_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithPartners)
                    .HasColumnName("IN_WITH_PARTNERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithRefused)
                    .HasColumnName("IN_WITH_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithSameExperience)
                    .HasColumnName("IN_WITH_SAME_EXPERIENCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithStrangers)
                    .HasColumnName("IN_WITH_STRANGERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HepatitisBcChronicExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("HEPATITIS_BC_CHRONIC_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmAgeOtherDrugs).HasColumnName("AM_AGE_OTHER_DRUGS");

                entity.Property(e => e.AmAgeStartDrinking).HasColumnName("AM_AGE_START_DRINKING");

                entity.Property(e => e.AmBloodTransfuPrior92)
                    .HasColumnName("AM_BLOOD_TRANSFU_PRIOR_92")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmBodyPiercing)
                    .HasColumnName("AM_BODY_PIERCING")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmClottingFactPrior87)
                    .HasColumnName("AM_CLOTTING_FACT_PRIOR_87")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmContactHepatitis)
                    .HasColumnName("AM_CONTACT_HEPATITIS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmContactSomeoneBlood)
                    .HasColumnName("AM_CONTACT_SOMEONE_BLOOD")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmCrack).HasColumnName("AM_CRACK");

                entity.Property(e => e.AmDentalWorkOral)
                    .HasColumnName("AM_DENTAL_WORK_ORAL")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmDiagnoseHiv)
                    .HasColumnName("AM_DIAGNOSE_HIV")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmEverStdTreated)
                    .HasColumnName("AM_EVER_STD_TREATED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmFirstInject).HasColumnName("AM_FIRST_INJECT");

                entity.Property(e => e.AmHadTattoo)
                    .HasColumnName("AM_HAD_TATTOO")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmHallucinogens).HasColumnName("AM_HALLUCINOGENS");

                entity.Property(e => e.AmHemodialysisYounga)
                    .HasColumnName("AM_HEMODIALYSIS_YOUNGA")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmHeroin).HasColumnName("AM_HEROIN");

                entity.Property(e => e.AmInhalants).HasColumnName("AM_INHALANTS");

                entity.Property(e => e.AmLengthDrugTreatment).HasColumnName("AM_LENGTH_DRUG_TREATMENT");

                entity.Property(e => e.AmLengthinterview).HasColumnName("AM_LENGTHINTERVIEW");

                entity.Property(e => e.AmMarijuanahash).HasColumnName("AM_MARIJUANAHASH");

                entity.Property(e => e.AmMethadone).HasColumnName("AM_METHADONE");

                entity.Property(e => e.AmMethamphetamine).HasColumnName("AM_METHAMPHETAMINE");

                entity.Property(e => e.AmNegativeHivTest)
                    .HasColumnName("AM_NEGATIVE_HIV_TEST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmNumberExchange).HasColumnName("AM_NUMBER_EXCHANGE");

                entity.Property(e => e.AmNumberFemale).HasColumnName("AM_NUMBER_FEMALE");

                entity.Property(e => e.AmNumberHepatitis).HasColumnName("AM_NUMBER_HEPATITIS");

                entity.Property(e => e.AmNumberInjectDruguser).HasColumnName("AM_NUMBER_INJECT_DRUGUSER");

                entity.Property(e => e.AmNumberMale).HasColumnName("AM_NUMBER_MALE");

                entity.Property(e => e.AmNumberPeopleInject).HasColumnName("AM_NUMBER_PEOPLE_INJECT");

                entity.Property(e => e.AmNumberPeopleInteract).HasColumnName("AM_NUMBER_PEOPLE_INTERACT");

                entity.Property(e => e.AmOrganTransplPrior92)
                    .HasColumnName("AM_ORGAN_TRANSPL_PRIOR_92")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmOtherSurgery)
                    .HasColumnName("AM_OTHER_SURGERY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmOxycontin).HasColumnName("AM_OXYCONTIN");

                entity.Property(e => e.AmPowdercocaine).HasColumnName("AM_POWDERCOCAINE");

                entity.Property(e => e.AmRecInfusionsYounga)
                    .HasColumnName("AM_REC_INFUSIONS_YOUNGA")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AmSpentInvestigating).HasColumnName("AM_SPENT_INVESTIGATING");

                entity.Property(e => e.AmTimesIndrugTreatment).HasColumnName("AM_TIMES_INDRUG_TREATMENT");

                entity.Property(e => e.AmTranquilizers).HasColumnName("AM_TRANQUILIZERS");

                entity.Property(e => e.CdAboutHepatitis)
                    .HasColumnName("CD_ABOUT_HEPATITIS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdAlcoholicConsume)
                    .HasColumnName("CD_ALCOHOLIC_CONSUME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdBirthCountryMother)
                    .IsRequired()
                    .HasColumnName("CD_BIRTH_COUNTRY_MOTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdContactType)
                    .IsRequired()
                    .HasColumnName("CD_CONTACT_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdCorrectional)
                    .IsRequired()
                    .HasColumnName("CD_CORRECTIONAL")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdCorrectionalInternal)
                    .HasColumnName("CD_CORRECTIONAL_INTERNAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDrink6More)
                    .HasColumnName("CD_DRINK_6_MORE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDrinkAlcohol)
                    .HasColumnName("CD_DRINK_ALCOHOL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDrinkDay)
                    .HasColumnName("CD_DRINK_DAY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDrugsInjected)
                    .HasColumnName("CD_DRUGS_INJECTED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDxstatusInterview)
                    .HasColumnName("CD_DXSTATUS_INTERVIEW")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdEducationLevel)
                    .HasColumnName("CD_EDUCATION_LEVEL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposedHepatitis)
                    .HasColumnName("CD_EXPOSED_HEPATITIS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdGetDrugs)
                    .HasColumnName("CD_GET_DRUGS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdHousing)
                    .HasColumnName("CD_HOUSING")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdHowManyInject)
                    .HasColumnName("CD_HOW_MANY_INJECT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdHowManyTimeInject)
                    .HasColumnName("CD_HOW_MANY_TIME_INJECT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdInjectHabits)
                    .HasColumnName("CD_INJECT_HABITS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdInsuranceCoverage)
                    .HasColumnName("CD_INSURANCE_COVERAGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdInterviewMode)
                    .HasColumnName("CD_INTERVIEW_MODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdKindInsurance)
                    .HasColumnName("CD_KIND_INSURANCE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdKindprison)
                    .HasColumnName("CD_KINDPRISON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLengthTreatment)
                    .HasColumnName("CD_LENGTH_TREATMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdNegativeHivTest)
                    .HasColumnName("CD_NEGATIVE_HIV_TEST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdNumberSexPartners)
                    .HasColumnName("CD_NUMBER_SEX_PARTNERS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersExchange)
                    .HasColumnName("CD_PARTNERS_EXCHANGE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersFemale)
                    .HasColumnName("CD_PARTNERS_FEMALE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersInfected)
                    .HasColumnName("CD_PARTNERS_INFECTED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersMale)
                    .HasColumnName("CD_PARTNERS_MALE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPartnersUsers)
                    .HasColumnName("CD_PARTNERS_USERS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPiercingPerformed)
                    .HasColumnName("CD_PIERCING_PERFORMED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReasonNoContact)
                    .HasColumnName("CD_REASON_NO_CONTACT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReceiveInformation)
                    .HasColumnName("CD_RECEIVE_INFORMATION")
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.CdResultOfContact)
                    .HasColumnName("CD_RESULT_OF_CONTACT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSexWithoutCondom)
                    .HasColumnName("CD_SEX_WITHOUT_CONDOM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSixPastMonthInjected)
                    .HasColumnName("CD_SIX_PAST_MONTH_INJECTED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTattooPerformed)
                    .HasColumnName("CD_TATTOO_PERFORMED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTimesUseCondom)
                    .HasColumnName("CD_TIMES_USE_CONDOM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTreatmentProgram)
                    .HasColumnName("CD_TREATMENT_PROGRAM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdWhereRecentNeghcv)
                    .HasColumnName("CD_WHERE_RECENT_NEGHCV")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAboutHepatitisOther)
                    .HasColumnName("DS_ABOUT_HEPATITIS_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAccidentalStick)
                    .HasColumnName("DS_ACCIDENTAL_STICK")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDrugTreatFacility)
                    .HasColumnName("DS_DRUG_TREAT_FACILITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsDrugsInjectedOther)
                    .HasColumnName("DS_DRUGS_INJECTED_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsEmploymentStatusother)
                    .HasColumnName("DS_EMPLOYMENT_STATUSOTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFirstOther)
                    .HasColumnName("DS_FIRST_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFitOther)
                    .HasColumnName("DS_FIT_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsGetDrugsOther)
                    .HasColumnName("DS_GET_DRUGS_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvCounseling)
                    .HasColumnName("DS_HCV_COUNSELING")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvDrugFacility)
                    .HasColumnName("DS_HCV_DRUG_FACILITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvHospital)
                    .HasColumnName("DS_HCV_HOSPITAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvOther)
                    .HasColumnName("DS_HCV_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvPrimary)
                    .HasColumnName("DS_HCV_PRIMARY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvPrison)
                    .HasColumnName("DS_HCV_PRISON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHcvWhen)
                    .HasColumnName("DS_HCV_WHEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHouseOther)
                    .HasColumnName("DS_HOUSE_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsInjectHabitsOther)
                    .HasColumnName("DS_INJECT_HABITS_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsInjectOther)
                    .HasColumnName("DS_INJECT_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsInterviewer)
                    .HasColumnName("DS_INTERVIEWER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsLastInjected)
                    .HasColumnName("DS_LAST_INJECTED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOftenOther)
                    .HasColumnName("DS_OFTEN_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherContact)
                    .HasColumnName("DS_OTHER_CONTACT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherContactType)
                    .IsRequired()
                    .HasColumnName("DS_OTHER_CONTACT_TYPE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherDrugs)
                    .HasColumnName("DS_OTHER_DRUGS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPiercingPerformOther)
                    .HasColumnName("DS_PIERCING_PERFORM_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsReceiveInformOther)
                    .HasColumnName("DS_RECEIVE_INFORM_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTattooPerformedOther)
                    .HasColumnName("DS_TATTOO_PERFORMED_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTimeOther)
                    .HasColumnName("DS_TIME_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTypeContactOther)
                    .HasColumnName("DS_TYPE_CONTACT_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsWhereReceNeghcvother)
                    .HasColumnName("DS_WHERE_RECE_NEGHCVOTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsWithOther)
                    .HasColumnName("DS_WITH_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtAttemptContactOne)
                    .HasColumnName("DT_ATTEMPT_CONTACT_ONE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAttemptContactThr)
                    .HasColumnName("DT_ATTEMPT_CONTACT_THR")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAttemptContactTwo)
                    .HasColumnName("DT_ATTEMPT_CONTACT_TWO")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDetentionEnd)
                    .HasColumnName("DT_DETENTION_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDetentionStart)
                    .HasColumnName("DT_DETENTION_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInterview)
                    .HasColumnName("DT_INTERVIEW")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtNegativehcv)
                    .HasColumnName("DT_NEGATIVEHCV")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtProvideGuide)
                    .HasColumnName("DT_PROVIDE_GUIDE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAboutHepatitis)
                    .HasColumnName("IN_ABOUT_HEPATITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAccessContactAvailable)
                    .HasColumnName("IN_ACCESS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAccessContactChecked)
                    .HasColumnName("IN_ACCESS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAccessContactValid)
                    .HasColumnName("IN_ACCESS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAccidentalStick)
                    .HasColumnName("IN_ACCIDENTAL_STICK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBloodContact)
                    .IsRequired()
                    .HasColumnName("IN_BLOOD_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InBloodTransfusion)
                    .IsRequired()
                    .HasColumnName("IN_BLOOD_TRANSFUSION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InBloodTransfusionPrior92)
                    .IsRequired()
                    .HasColumnName("IN_BLOOD_TRANSFUSION_PRIOR_92")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InBodyPiercing)
                    .HasColumnName("IN_BODY_PIERCING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBrbpubContactAvailable)
                    .HasColumnName("IN_BRBPub_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBrbpubContactChecked)
                    .HasColumnName("IN_BRBPub_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBrbpubContactValid)
                    .HasColumnName("IN_BRBPub_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClottingFactor)
                    .IsRequired()
                    .HasColumnName("IN_CLOTTING_FACTOR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InClottingFactorPrior87)
                    .IsRequired()
                    .HasColumnName("IN_CLOTTING_FACTOR_PRIOR_87")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InContactHepatitis)
                    .HasColumnName("IN_CONTACT_HEPATITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactSomeoneBlood)
                    .HasColumnName("IN_CONTACT_SOMEONE_BLOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCrack)
                    .HasColumnName("IN_CRACK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCurrentDrugTreatment)
                    .HasColumnName("IN_CURRENT_DRUG_TREATMENT")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InCurrentTreatmentProg)
                    .HasColumnName("IN_CURRENT_TREATMENT_PROG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCurrently)
                    .IsRequired()
                    .HasColumnName("IN_CURRENTLY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InCurrentlyIncarcerated)
                    .HasColumnName("IN_CURRENTLY_INCARCERATED")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InDentalWorkOral)
                    .HasColumnName("IN_DENTAL_WORK_ORAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDetention)
                    .HasColumnName("IN_DETENTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDetentionMorethan6)
                    .HasColumnName("IN_DETENTION_MORETHAN6")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDiagnoseHiv)
                    .HasColumnName("IN_DIAGNOSE_HIV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDilaudid)
                    .HasColumnName("IN_DILAUDID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDisabledWork)
                    .HasColumnName("IN_DISABLED_WORK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDivUseNeedleSomeone)
                    .HasColumnName("IN_DIV_USE_NEEDLE_SOMEONE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDividedDrugs)
                    .HasColumnName("IN_DIVIDED_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDontKnow)
                    .HasColumnName("IN_DONT_KNOW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrugFacilityInvestig)
                    .HasColumnName("IN_DRUG_FACILITY_INVESTIG")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InDrugTreatmentProg)
                    .HasColumnName("IN_DRUG_TREATMENT_PROG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEHarsContactAvailable)
                    .HasColumnName("IN_eHARS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEHarsContactChecked)
                    .HasColumnName("IN_eHARS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEHarsContactValid)
                    .HasColumnName("IN_eHARS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEmployedFullTime)
                    .HasColumnName("IN_EMPLOYED_FULL_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEmployedOther)
                    .HasColumnName("IN_EMPLOYED_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEmployedPartTime)
                    .HasColumnName("IN_EMPLOYED_PART_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEmployedRefused)
                    .HasColumnName("IN_EMPLOYED_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEverIncarcerated)
                    .IsRequired()
                    .HasColumnName("IN_EVER_INCARCERATED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEverStdTreated)
                    .IsRequired()
                    .HasColumnName("IN_EVER_STD_TREATED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExposedBlood)
                    .HasColumnName("IN_EXPOSED_BLOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedContact)
                    .HasColumnName("IN_EXPOSED_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedDontKnow)
                    .HasColumnName("IN_EXPOSED_DONT_KNOW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedInject)
                    .HasColumnName("IN_EXPOSED_INJECT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedNeedle)
                    .HasColumnName("IN_EXPOSED_NEEDLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedRefused)
                    .HasColumnName("IN_EXPOSED_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedSexual)
                    .HasColumnName("IN_EXPOSED_SEXUAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposedTattoo)
                    .HasColumnName("IN_EXPOSED_TATTOO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstAmphetamine)
                    .HasColumnName("IN_FIRST_AMPHETAMINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstCocaine)
                    .HasColumnName("IN_FIRST_COCAINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstCrack)
                    .HasColumnName("IN_FIRST_CRACK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstDiluadid)
                    .HasColumnName("IN_FIRST_DILUADID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstHeroin)
                    .HasColumnName("IN_FIRST_HEROIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstOther)
                    .HasColumnName("IN_FIRST_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstOxycontin)
                    .HasColumnName("IN_FIRST_OXYCONTIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstRefused)
                    .HasColumnName("IN_FIRST_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFirstXanax)
                    .HasColumnName("IN_FIRST_XANAX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitAddicted)
                    .HasColumnName("IN_FIT_ADDICTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitForSex)
                    .HasColumnName("IN_FIT_FOR_SEX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitHabit)
                    .HasColumnName("IN_FIT_HABIT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitNotAddicted)
                    .HasColumnName("IN_FIT_NOT_ADDICTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitOccasions)
                    .HasColumnName("IN_FIT_OCCASIONS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitOther)
                    .HasColumnName("IN_FIT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitRecreational)
                    .HasColumnName("IN_FIT_RECREATIONAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitRefused)
                    .HasColumnName("IN_FIT_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitToBond)
                    .HasColumnName("IN_FIT_TO_BOND")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitUnhappy)
                    .HasColumnName("IN_FIT_UNHAPPY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFitWantTo)
                    .HasColumnName("IN_FIT_WANT_TO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFloridaHepatGuide)
                    .HasColumnName("IN_FLORIDA_HEPAT_GUIDE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InHadTattoo)
                    .HasColumnName("IN_HAD_TATTOO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHallucinogens)
                    .HasColumnName("IN_HALLUCINOGENS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHavePrescription)
                    .HasColumnName("IN_HAVE_PRESCRIPTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvCounseling)
                    .HasColumnName("IN_HCV_COUNSELING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvDrugFacility)
                    .HasColumnName("IN_HCV_DRUG_FACILITY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvHospital)
                    .HasColumnName("IN_HCV_HOSPITAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvOther)
                    .HasColumnName("IN_HCV_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvPrimary)
                    .HasColumnName("IN_HCV_PRIMARY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvPrison)
                    .HasColumnName("IN_HCV_PRISON")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHcvRefused)
                    .HasColumnName("IN_HCV_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHemodialysis)
                    .IsRequired()
                    .HasColumnName("IN_HEMODIALYSIS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHeroin)
                    .HasColumnName("IN_HEROIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHmsContactAvailable)
                    .HasColumnName("IN_HMS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHmsContactChecked)
                    .HasColumnName("IN_HMS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHmsContactValid)
                    .HasColumnName("IN_HMS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInfectedPast10Years)
                    .IsRequired()
                    .HasColumnName("IN_INFECTED_PAST_10_YEARS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InInhalants)
                    .HasColumnName("IN_INHALANTS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectAmphetamine)
                    .HasColumnName("IN_INJECT_AMPHETAMINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectCocaine)
                    .HasColumnName("IN_INJECT_COCAINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectCrack)
                    .HasColumnName("IN_INJECT_CRACK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectDiluadid)
                    .HasColumnName("IN_INJECT_DILUADID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectHeroin)
                    .HasColumnName("IN_INJECT_HEROIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectOther)
                    .HasColumnName("IN_INJECT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectOxycontin)
                    .HasColumnName("IN_INJECT_OXYCONTIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectRefused)
                    .HasColumnName("IN_INJECT_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjectStreetDrugs)
                    .IsRequired()
                    .HasColumnName("IN_INJECT_STREET_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InInjectXanax)
                    .HasColumnName("IN_INJECT_XANAX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjected6Mos)
                    .HasColumnName("IN_INJECTED_6_MOS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInmateContactAvailable)
                    .HasColumnName("IN_INMATE_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInmateContactChecked)
                    .HasColumnName("IN_INMATE_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInmateContactValid)
                    .HasColumnName("IN_INMATE_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLentUsed)
                    .HasColumnName("IN_LENT_USED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLexisContactAvailable)
                    .HasColumnName("IN_LEXIS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLexisContactChecked)
                    .HasColumnName("IN_LEXIS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLexisContactValid)
                    .HasColumnName("IN_LEXIS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLoseTrackNeedle)
                    .HasColumnName("IN_LOSE_TRACK_NEEDLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMarijuanahash)
                    .HasColumnName("IN_MARIJUANAHASH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMethadone)
                    .HasColumnName("IN_METHADONE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMethamphetamine)
                    .HasColumnName("IN_METHAMPHETAMINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InNegativehcv)
                    .HasColumnName("IN_NEGATIVEHCV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenDealers)
                    .HasColumnName("IN_OFTEN_DEALERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenFriends)
                    .HasColumnName("IN_OFTEN_FRIENDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenGallery)
                    .HasColumnName("IN_OFTEN_GALLERY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenOther)
                    .HasColumnName("IN_OFTEN_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenOwn)
                    .HasColumnName("IN_OFTEN_OWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenPrison)
                    .HasColumnName("IN_OFTEN_PRISON")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenRefused)
                    .HasColumnName("IN_OFTEN_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOftenStreet)
                    .HasColumnName("IN_OFTEN_STREET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOpana)
                    .HasColumnName("IN_OPANA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOrganTransplant)
                    .IsRequired()
                    .HasColumnName("IN_ORGAN_TRANSPLANT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOrganTransplantPrior92)
                    .IsRequired()
                    .HasColumnName("IN_ORGAN_TRANSPLANT_PRIOR_92")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOtherContactAvailable)
                    .HasColumnName("IN_OTHER_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherContactChecked)
                    .HasColumnName("IN_OTHER_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherContactValid)
                    .HasColumnName("IN_OTHER_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherDrugs)
                    .HasColumnName("IN_OTHER_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherSurgery)
                    .HasColumnName("IN_OTHER_SURGERY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOxycontin)
                    .HasColumnName("IN_OXYCONTIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPainKillers)
                    .HasColumnName("IN_PAIN_KILLERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientContacted)
                    .HasColumnName("IN_PATIENT_CONTACTED")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InPeoInjectDrugsMore5)
                    .HasColumnName("IN_PEO_INJECT_DRUGS_MORE5")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPeopleContactAvailable)
                    .HasColumnName("IN_PEOPLE_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPeopleContactChecked)
                    .HasColumnName("IN_PEOPLE_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPeopleContactValid)
                    .HasColumnName("IN_PEOPLE_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPeopleInfected)
                    .HasColumnName("IN_PEOPLE_INFECTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPeopleInjectDrugs)
                    .HasColumnName("IN_PEOPLE_INJECT_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPooledMoney)
                    .HasColumnName("IN_POOLED_MONEY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPowdercocaine)
                    .HasColumnName("IN_POWDERCOCAINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrismContactAvailable)
                    .HasColumnName("IN_PRISM_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrismContactChecked)
                    .HasColumnName("IN_PRISM_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrismContactValid)
                    .HasColumnName("IN_PRISM_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecInfusionsYounga)
                    .HasColumnName("IN_REC_INFUSIONS_YOUNGA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivedMedication)
                    .IsRequired()
                    .HasColumnName("IN_RECEIVED_MEDICATION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InReusedNeedles)
                    .HasColumnName("IN_REUSED_NEEDLES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSeeingDoctor)
                    .HasColumnName("IN_SEEING_DOCTOR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShareWorksDrugs)
                    .HasColumnName("IN_SHARE_WORKS_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSharedCleanedNeedle)
                    .HasColumnName("IN_SHARED_CLEANED_NEEDLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShotsContactAvailable)
                    .HasColumnName("IN_SHOTS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShotsContactChecked)
                    .HasColumnName("IN_SHOTS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShotsContactValid)
                    .HasColumnName("IN_SHOTS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpecialCircumstances)
                    .HasColumnName("IN_SPECIAL_CIRCUMSTANCES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InStreetDrugs)
                    .HasColumnName("IN_STREET_DRUGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InStudentFullTime)
                    .HasColumnName("IN_STUDENT_FULL_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InStudentPartTime)
                    .HasColumnName("IN_STUDENT_PART_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurveyOnline)
                    .HasColumnName("IN_SURVEY_ONLINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSuspectedContact)
                    .IsRequired()
                    .HasColumnName("IN_SUSPECTED_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTimeCounty)
                    .HasColumnName("IN_TIME_COUNTY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeFederal)
                    .HasColumnName("IN_TIME_FEDERAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeJuvenile)
                    .HasColumnName("IN_TIME_JUVENILE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeOther)
                    .HasColumnName("IN_TIME_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeRefused)
                    .HasColumnName("IN_TIME_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTimeState)
                    .HasColumnName("IN_TIME_STATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTranquilizers)
                    .HasColumnName("IN_TRANQUILIZERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTreatmentAa)
                    .HasColumnName("IN_TREATMENT_AA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypecontactDrugUsing)
                    .HasColumnName("IN_TYPECONTACT_DRUG_USING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypecontactHousehold)
                    .HasColumnName("IN_TYPECONTACT_HOUSEHOLD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypecontactOther)
                    .HasColumnName("IN_TYPECONTACT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypecontactSexual)
                    .HasColumnName("IN_TYPECONTACT_SEXUAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUnemployed)
                    .HasColumnName("IN_UNEMPLOYED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUseCookerUsed)
                    .HasColumnName("IN_USE_COOKER_USED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUseCotton)
                    .HasColumnName("IN_USE_COTTON")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUseNeedle)
                    .HasColumnName("IN_USE_NEEDLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUseNeedleNew)
                    .HasColumnName("IN_USE_NEEDLE_NEW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUseNeedleSomeone)
                    .HasColumnName("IN_USE_NEEDLE_SOMEONE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUsedCooker)
                    .HasColumnName("IN_USED_COOKER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUsedCotton)
                    .HasColumnName("IN_USED_COTTON")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUsedRinsewater)
                    .HasColumnName("IN_USED_RINSEWATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUserInsewater)
                    .HasColumnName("IN_USER_INSEWATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InValidContactInfo)
                    .HasColumnName("IN_VALID_CONTACT_INFO")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InVehicleContactAvailable)
                    .HasColumnName("IN_VEHICLE_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVehicleContactChecked)
                    .HasColumnName("IN_VEHICLE_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVehicleContactValid)
                    .HasColumnName("IN_VEHICLE_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVeteransContactAvailable)
                    .HasColumnName("IN_VETERANS_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVeteransContactChecked)
                    .HasColumnName("IN_VETERANS_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVeteransContactValid)
                    .HasColumnName("IN_VETERANS_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWhiteContactAvailable)
                    .HasColumnName("IN_WHITE_CONTACT_AVAILABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWhiteContactChecked)
                    .HasColumnName("IN_WHITE_CONTACT_CHECKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWhiteContactValid)
                    .HasColumnName("IN_WHITE_CONTACT_VALID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWith5YearsOlder)
                    .HasColumnName("IN_WITH_5_YEARS_OLDER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithAcquaintances)
                    .HasColumnName("IN_WITH_ACQUAINTANCES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithCloseFriends)
                    .HasColumnName("IN_WITH_CLOSE_FRIENDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithDealer)
                    .HasColumnName("IN_WITH_DEALER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithFamily)
                    .HasColumnName("IN_WITH_FAMILY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithLessExperience)
                    .HasColumnName("IN_WITH_LESS_EXPERIENCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithMoreExperience)
                    .HasColumnName("IN_WITH_MORE_EXPERIENCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithNoOne)
                    .HasColumnName("IN_WITH_NO_ONE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithOther)
                    .HasColumnName("IN_WITH_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithPartners)
                    .HasColumnName("IN_WITH_PARTNERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithRefused)
                    .HasColumnName("IN_WITH_REFUSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithSameExperience)
                    .HasColumnName("IN_WITH_SAME_EXPERIENCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWithStrangers)
                    .HasColumnName("IN_WITH_STRANGERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfSexualPartners)
                    .IsRequired()
                    .HasColumnName("NO_OF_SEXUAL_PARTNERS")
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<HepatitisExtCommon>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("HEPATITIS_EXT_COMMON");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmHepADoses)
                    .IsRequired()
                    .HasColumnName("AM_HEP_A_DOSES")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AmHepBDoses)
                    .IsRequired()
                    .HasColumnName("AM_HEP_B_DOSES")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdBloodSource)
                    .IsRequired()
                    .HasColumnName("CD_BLOOD_SOURCE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsHepA2doseYr)
                    .IsRequired()
                    .HasColumnName("DS_HEP_A_2DOSE_YR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsHepB3doseYr)
                    .IsRequired()
                    .HasColumnName("DS_HEP_B_3DOSE_YR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsHospital)
                    .IsRequired()
                    .HasColumnName("DS_HOSPITAL")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsImmuneGlobulinMth)
                    .IsRequired()
                    .HasColumnName("DS_IMMUNE_GLOBULIN_MTH")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsImmuneGlobulinYr)
                    .IsRequired()
                    .HasColumnName("DS_IMMUNE_GLOBULIN_YR")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsReasonOther)
                    .IsRequired()
                    .HasColumnName("DS_REASON_OTHER")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsSourceOther)
                    .IsRequired()
                    .HasColumnName("DS_SOURCE_OTHER")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDelivery)
                    .HasColumnName("DT_DELIVERY")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDiabetes)
                    .HasColumnName("DT_DIABETES")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAwarePriorTest)
                    .IsRequired()
                    .HasColumnName("IN_AWARE_PRIOR_TEST")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InDeath)
                    .IsRequired()
                    .HasColumnName("IN_DEATH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDiabetes)
                    .IsRequired()
                    .HasColumnName("IN_DIABETES")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InHepA2dose)
                    .IsRequired()
                    .HasColumnName("IN_HEP_A_2DOSE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHepB3dose)
                    .IsRequired()
                    .HasColumnName("IN_HEP_B_3DOSE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHepBAntiTest)
                    .IsRequired()
                    .HasColumnName("IN_HEP_B_ANTI_TEST")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHepBAntibodyResult)
                    .IsRequired()
                    .HasColumnName("IN_HEP_B_ANTIBODY_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHospitalized)
                    .IsRequired()
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InImmuneGlobulin)
                    .IsRequired()
                    .HasColumnName("IN_IMMUNE_GLOBULIN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InInvasiveProcedure)
                    .IsRequired()
                    .HasColumnName("IN_INVASIVE_PROCEDURE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPregnant)
                    .IsRequired()
                    .HasColumnName("IN_PREGNANT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InProviderCare)
                    .IsRequired()
                    .HasColumnName("IN_PROVIDER_CARE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InReasonAcute)
                    .IsRequired()
                    .HasColumnName("IN_REASON_ACUTE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReasonBirthYear)
                    .IsRequired()
                    .HasColumnName("IN_REASON_BIRTH_YEAR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InReasonDonor)
                    .IsRequired()
                    .HasColumnName("IN_REASON_DONOR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReasonLiver)
                    .IsRequired()
                    .HasColumnName("IN_REASON_LIVER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReasonNoRisks)
                    .IsRequired()
                    .HasColumnName("IN_REASON_NO_RISKS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReasonOther)
                    .IsRequired()
                    .HasColumnName("IN_REASON_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReasonPrevious)
                    .IsRequired()
                    .HasColumnName("IN_REASON_PREVIOUS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReasonRepRisks)
                    .IsRequired()
                    .HasColumnName("IN_REASON_REP_RISKS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReasonUnknown)
                    .IsRequired()
                    .HasColumnName("IN_REASON_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InSymptomatic)
                    .IsRequired()
                    .HasColumnName("IN_SYMPTOMATIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<HepatitisPerinatalContactExt>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdContact });

                entity.ToTable("HEPATITIS_PERINATAL_CONTACT_EXT");

                entity.HasIndex(e => e.DtAdded)
                    .HasName("IX_HEP_PERINATAL_CONTACT_EXT_DT_ADDED");

                entity.HasIndex(e => e.DtBirth)
                    .HasName("IX_HEP_PERINATAL_CONTACT_EXT_DTBIRTH");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdContact).HasColumnName("ID_CONTACT");

                entity.Property(e => e.CdClosureReason)
                    .IsRequired()
                    .HasColumnName("CD_CLOSURE_REASON")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdEthnicityContact)
                    .IsRequired()
                    .HasColumnName("CD_ETHNICITY_CONTACT")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdGenderContact)
                    .IsRequired()
                    .HasColumnName("CD_GENDER_CONTACT")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdRaceContact)
                    .IsRequired()
                    .HasColumnName("CD_RACE_CONTACT")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdRelationshipMother)
                    .IsRequired()
                    .HasColumnName("CD_RELATIONSHIP_MOTHER")
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdState)
                    .IsRequired()
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAddr1)
                    .HasColumnName("DS_ADDR_1")
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAddr2)
                    .IsRequired()
                    .HasColumnName("DS_ADDR_2")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCity)
                    .IsRequired()
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsClosure)
                    .IsRequired()
                    .HasColumnName("DS_CLOSURE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsNotes)
                    .IsRequired()
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPhone)
                    .IsRequired()
                    .HasColumnName("DS_PHONE")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsZip)
                    .IsRequired()
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtClosure)
                    .HasColumnName("DT_CLOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtContactEnd)
                    .HasColumnName("DT_CONTACT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtContactStart)
                    .HasColumnName("DT_CONTACT_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPostVacSpecimenCollect)
                    .HasColumnName("DT_POST_VAC_SPECIMEN_COLLECT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPreVacSpecimenCollect)
                    .HasColumnName("DT_PRE_VAC_SPECIMEN_COLLECT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdPostVacLab).HasColumnName("ID_POST_VAC_LAB");

                entity.Property(e => e.IdPreVacLab).HasColumnName("ID_PRE_VAC_LAB");

                entity.Property(e => e.InAddrSame)
                    .HasColumnName("IN_ADDR_SAME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHouseholdContact)
                    .IsRequired()
                    .HasColumnName("IN_HOUSEHOLD_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InRefuseSvc)
                    .IsRequired()
                    .HasColumnName("IN_REFUSE_SVC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InStdFollowedUp)
                    .IsRequired()
                    .HasColumnName("IN_STD_FOLLOWED_UP")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmFirst)
                    .IsRequired()
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmLast)
                    .IsRequired()
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<HepatitisPerinatalExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("HEPATITIS_PERINATAL_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdMotherCountry)
                    .HasColumnName("CD_MOTHER_COUNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChildRcvdHbig)
                    .HasColumnName("DT_CHILD_RCVD_HBIG")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDelivery)
                    .HasColumnName("DT_DELIVERY")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDose1)
                    .HasColumnName("DT_DOSE_1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDose2)
                    .HasColumnName("DT_DOSE_2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDose3)
                    .HasColumnName("DT_DOSE_3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHbs)
                    .HasColumnName("DT_HBS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHbsag)
                    .HasColumnName("DT_HBSAG")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHbsagPositive)
                    .HasColumnName("DT_HBSAG_POSITIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InChildRcvdHbig)
                    .IsRequired()
                    .HasColumnName("IN_CHILD_RCVD_HBIG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InHbs)
                    .IsRequired()
                    .HasColumnName("IN_HBS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InHbsag)
                    .IsRequired()
                    .HasColumnName("IN_HBSAG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InHbsagAfterDelivery)
                    .IsRequired()
                    .HasColumnName("IN_HBSAG_AFTER_DELIVERY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InHbsagBeforeDelivery)
                    .IsRequired()
                    .HasColumnName("IN_HBSAG_BEFORE_DELIVERY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InMotherUsa)
                    .IsRequired()
                    .HasColumnName("IN_MOTHER_USA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InNbrDoses)
                    .IsRequired()
                    .HasColumnName("IN_NBR_DOSES")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InPrenatalCare)
                    .IsRequired()
                    .HasColumnName("IN_PRENATAL_CARE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<HepatitisPerinatalInfantExt>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdInfant });

                entity.ToTable("HEPATITIS_PERINATAL_INFANT_EXT");

                entity.HasIndex(e => e.DtBirth)
                    .HasName("IX_HEP_PERINATAL_INFANT_EXT_DT_BIRTH");

                entity.HasIndex(e => e.IdCase)
                    .HasName("IX_HEP_PERINATAL_INFANT_EXT_CASE");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdInfant).HasColumnName("ID_INFANT");

                entity.Property(e => e.AmBirthTime)
                    .HasColumnName("AM_BIRTH_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdClosureReason)
                    .IsRequired()
                    .HasColumnName("CD_CLOSURE_REASON")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdGenderInfant)
                    .IsRequired()
                    .HasColumnName("CD_GENDER_INFANT")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdState)
                    .IsRequired()
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAddr1Name)
                    .HasColumnName("DS_ADDR1_NAME")
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAddr2)
                    .IsRequired()
                    .HasColumnName("DS_ADDR2")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCity)
                    .IsRequired()
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsClosure)
                    .IsRequired()
                    .HasColumnName("DS_CLOSURE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsNotes)
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsPhone)
                    .IsRequired()
                    .HasColumnName("DS_PHONE")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsZip)
                    .IsRequired()
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtClosure)
                    .HasColumnName("DT_CLOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSpecimenCollected)
                    .HasColumnName("DT_SPECIMEN_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSpecimenCollected2)
                    .HasColumnName("DT_SPECIMEN_COLLECTED2")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdCaseInfant).HasColumnName("ID_CASE_INFANT");

                entity.Property(e => e.IdCaseInfant2).HasColumnName("ID_CASE_INFANT2");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.IdLab2).HasColumnName("ID_LAB2");

                entity.Property(e => e.IdPediatrician).HasColumnName("ID_PEDIATRICIAN");

                entity.Property(e => e.InAddrSame)
                    .IsRequired()
                    .HasColumnName("IN_ADDR_SAME")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InInfantEntered)
                    .HasColumnName("IN_INFANT_ENTERED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInfantEntered2)
                    .HasColumnName("IN_INFANT_ENTERED2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWeightUnder2000)
                    .HasColumnName("IN_WEIGHT_UNDER_2000")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirst)
                    .IsRequired()
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmLast)
                    .IsRequired()
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<HepatitisPerinatalMotherExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("HEPATITIS_PERINATAL_MOTHER_EXT");

                entity.HasIndex(e => e.CdClosureReason)
                    .HasName("idx_Hep_Mother_EXT_cd_clr_reason");

                entity.HasIndex(e => e.IdHospital)
                    .HasName("IDX_HEPATITIS_PERINATAL_MOTHER_EXT_ID_HOSPITAL");

                entity.HasIndex(e => e.IdPhysician)
                    .HasName("IDX_HEPATITIS_PERINATAL_MOTHER_EXT_ID_PHYSICIAN");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdClosureReason)
                    .IsRequired()
                    .HasColumnName("CD_CLOSURE_REASON")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdCountryBirth)
                    .IsRequired()
                    .HasColumnName("CD_COUNTRY_BIRTH")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdCountryBirthGrandmother)
                    .HasColumnName("CD_COUNTRY_BIRTH_GRANDMOTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdMotherClassified)
                    .IsRequired()
                    .HasColumnName("CD_MOTHER_CLASSIFIED")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdPrimaryLanguage)
                    .HasColumnName("CD_PRIMARY_LANGUAGE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportType)
                    .HasColumnName("CD_REPORT_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportTypeAdditional)
                    .HasColumnName("CD_REPORT_TYPE_ADDITIONAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportedBy)
                    .HasColumnName("CD_REPORTED_BY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportedByAdditional)
                    .HasColumnName("CD_REPORTED_BY_ADDITIONAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsClosure)
                    .IsRequired()
                    .HasColumnName("DS_CLOSURE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCountyCaseNumber)
                    .IsRequired()
                    .HasColumnName("DS_COUNTY_CASE_NUMBER")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTranslatorPhone)
                    .IsRequired()
                    .HasColumnName("DS_TRANSLATOR_PHONE")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtClosure)
                    .HasColumnName("DT_CLOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEstDelivery)
                    .HasColumnName("DT_EST_DELIVERY")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtNotifiedHbsag)
                    .HasColumnName("DT_NOTIFIED_HBSAG")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdHospital).HasColumnName("ID_HOSPITAL");

                entity.Property(e => e.IdPhysician).HasColumnName("ID_PHYSICIAN");

                entity.Property(e => e.InHealthDeptRefer)
                    .HasColumnName("IN_HEALTH_DEPT_REFER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMedicaid)
                    .IsRequired()
                    .HasColumnName("IN_MEDICAID")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMotherHbsag)
                    .IsRequired()
                    .HasColumnName("IN_MOTHER_HBSAG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMotherMonitored)
                    .HasColumnName("IN_MOTHER_MONITORED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMotherTreated)
                    .HasColumnName("IN_MOTHER_TREATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMultiBirth)
                    .IsRequired()
                    .HasColumnName("IN_MULTI_BIRTH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('2')");

                entity.Property(e => e.InPrimaryLanguageRead)
                    .HasColumnName("IN_PRIMARY_LANGUAGE_READ")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRefugee)
                    .IsRequired()
                    .HasColumnName("IN_REFUGEE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTranslator)
                    .IsRequired()
                    .HasColumnName("IN_TRANSLATOR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmTranslator)
                    .IsRequired()
                    .HasColumnName("NM_TRANSLATOR")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.IdHospitalNavigation)
                    .WithMany(p => p.HepatitisPerinatalMotherExtIdHospitalNavigation)
                    .HasForeignKey(d => d.IdHospital)
                    .HasConstraintName("FK_HEPATITIS_PERINATAL_MOTHER_EXT_ID_HOSPITAL");

                entity.HasOne(d => d.IdPhysicianNavigation)
                    .WithMany(p => p.HepatitisPerinatalMotherExtIdPhysicianNavigation)
                    .HasForeignKey(d => d.IdPhysician)
                    .HasConstraintName("FK_HEPATITIS_PERINATAL_MOTHER_EXT_ID_PHYSICIAN");
            });

            modelBuilder.Entity<HepatitisPerinatalSourcesExt>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.CdSource });

                entity.ToTable("HEPATITIS_PERINATAL_SOURCES_EXT");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.CdSource)
                    .HasColumnName("CD_SOURCE")
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.HepatitisPerinatalSourcesExt)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HEPATITIS_PERINATAL_SOURCES_EXT_EPI_CASE");
            });

            modelBuilder.Entity<HflueExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("HFLUE_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdBiotype)
                    .HasColumnName("CD_BIOTYPE")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerotype)
                    .HasColumnName("CD_SEROTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherSourceInf)
                    .HasColumnName("DS_OTHER_SOURCE_INF")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherVerifySource)
                    .HasColumnName("DS_OTHER_VERIFY_SOURCE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsSerotypeOther)
                    .HasColumnName("DS_SEROTYPE_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsSourceInformation)
                    .HasColumnName("DS_SOURCE_INFORMATION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsVerifySource)
                    .HasColumnName("DS_VERIFY_SOURCE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAmpicillin)
                    .HasColumnName("IN_AMPICILLIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InChloramph)
                    .HasColumnName("IN_CHLORAMPH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHaemoFlue)
                    .HasColumnName("IN_HAEMO_FLUE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRifampin)
                    .HasColumnName("IN_RIFAMPIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSentToStateLab)
                    .HasColumnName("IN_SENT_TO_STATE_LAB")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccinationHistory)
                    .HasColumnName("IN_VACCINATION_HISTORY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVerify)
                    .HasColumnName("IN_VERIFY")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HivCase>(entity =>
            {
                entity.ToTable("HIV_CASE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DsCd4First)
                    .HasColumnName("DS_CD4_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsCd4Last)
                    .HasColumnName("DS_CD4_LAST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtAidsDx)
                    .HasColumnName("DS_DT_AIDS_DX")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtAkaBirth)
                    .HasColumnName("DS_DT_AKA_BIRTH")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtCd4First)
                    .HasColumnName("DS_DT_CD4_FIRST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtCd4Last)
                    .HasColumnName("DS_DT_CD4_LAST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtHivDx)
                    .HasColumnName("DS_DT_HIV_DX")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtViralLoadFirst)
                    .HasColumnName("DS_DT_VIRAL_LOAD_FIRST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsDtViralLoadLast)
                    .HasColumnName("DS_DT_VIRAL_LOAD_LAST")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsStateno)
                    .HasColumnName("DS_STATENO")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.DsStatus)
                    .HasColumnName("DS_STATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsViralLoadFirst)
                    .HasColumnName("DS_VIRAL_LOAD_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsViralLoadLast)
                    .HasColumnName("DS_VIRAL_LOAD_LAST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsVitalStatus)
                    .HasColumnName("DS_VITAL_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHivDx)
                    .HasColumnName("DT_HIV_DX")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdHash).HasColumnName("ID_HASH");

                entity.Property(e => e.IdPrisno)
                    .HasColumnName("ID_PRISNO")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.NmAkaFirst)
                    .HasColumnName("NM_AKA_FIRST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmAkaLast)
                    .HasColumnName("NM_AKA_LAST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdProfileNavigation)
                    .WithMany(p => p.HivCase)
                    .HasForeignKey(d => d.IdProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_profile");
            });

            modelBuilder.Entity<Icd9>(entity =>
            {
                entity.HasKey(e => e.CdIcd9)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("ICD9");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AmWithin).HasColumnName("AM_WITHIN");

                entity.Property(e => e.CdCdc)
                    .HasColumnName("CD_CDC")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdChartsGroup)
                    .HasColumnName("CD_CHARTS_GROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdChartsTopic)
                    .HasColumnName("CD_CHARTS_TOPIC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCodsCategory)
                    .HasColumnName("CD_CODS_CATEGORY")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.CdDisplayAs)
                    .IsRequired()
                    .HasColumnName("CD_DISPLAY_AS")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdEpiLinkFamily)
                    .IsRequired()
                    .HasColumnName("CD_EPI_LINK_FAMILY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdExtendedGroup)
                    .HasColumnName("CD_EXTENDED_GROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdFamily)
                    .HasColumnName("CD_FAMILY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdHl7Concept)
                    .HasColumnName("CD_HL7_CONCEPT")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9FlipTo)
                    .HasColumnName("CD_ICD9_FLIP_TO")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdOrganism)
                    .IsRequired()
                    .HasColumnName("CD_ORGANISM")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTestValue)
                    .IsRequired()
                    .HasColumnName("CD_TEST_VALUE")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NO')");

                entity.Property(e => e.CdTestValueProb)
                    .HasColumnName("CD_TEST_VALUE_PROB")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestValueSusp)
                    .HasColumnName("CD_TEST_VALUE_SUSP")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsAutoAttach)
                    .HasColumnName("DS_AUTO_ATTACH")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsAutoCreate)
                    .HasColumnName("DS_AUTO_CREATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsAutoReportAge)
                    .HasColumnName("DS_AUTO_REPORT_AGE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsAutoReportDx)
                    .HasColumnName("DS_AUTO_REPORT_DX")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsCaseGroup)
                    .HasColumnName("DS_CASE_GROUP")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsChartsGroup)
                    .HasColumnName("DS_CHARTS_GROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsDxStatusFile)
                    .HasColumnName("DS_DX_STATUS_FILE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrKeywords)
                    .HasColumnName("DS_ELR_KEYWORDS")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsEvaluation)
                    .HasColumnName("DS_EVALUATION")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsExtdDataLink)
                    .HasColumnName("DS_EXTD_DATA_LINK")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsHl7Concept)
                    .HasColumnName("DS_HL7_CONCEPT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsHl7ConceptSystem)
                    .HasColumnName("DS_HL7_CONCEPT_SYSTEM")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DsLeaveUnattached)
                    .HasColumnName("DS_LEAVE_UNATTACHED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsReport)
                    .HasColumnName("DS_REPORT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsReviewer)
                    .HasColumnName("DS_REVIEWER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsValidTests)
                    .HasColumnName("DS_VALID_TESTS")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsValidTestsProb)
                    .HasColumnName("DS_VALID_TESTS_PROB")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsValidTestsSusp)
                    .HasColumnName("DS_VALID_TESTS_SUSP")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(convert(char(10),getdate(),101))");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InActive)
                    .HasColumnName("IN_ACTIVE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InArbonet)
                    .HasColumnName("IN_ARBONET")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InAutoImport).HasColumnName("IN_AUTO_IMPORT");

                entity.Property(e => e.InAutoReport).HasColumnName("IN_AUTO_REPORT");

                entity.Property(e => e.InCaseDefinition)
                    .IsRequired()
                    .HasColumnName("IN_CASE_DEFINITION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.InCharts).HasColumnName("IN_CHARTS");

                entity.Property(e => e.InDisplayAnimalExposure)
                    .IsRequired()
                    .HasColumnName("IN_DISPLAY_ANIMAL_EXPOSURE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InEmailAlert)
                    .IsRequired()
                    .HasColumnName("IN_EMAIL_ALERT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InEssenceExtract)
                    .HasColumnName("IN_ESSENCE_EXTRACT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InExcludeNetss).HasColumnName("IN_EXCLUDE_NETSS");

                entity.Property(e => e.InExtdData)
                    .HasColumnName("IN_EXTD_DATA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.InFlip).HasColumnName("IN_FLIP");

                entity.Property(e => e.InFollowUp)
                    .HasColumnName("IN_FOLLOW_UP")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InGenericMsg).HasColumnName("IN_GENERIC_MSG");

                entity.Property(e => e.InHighPriority)
                    .IsRequired()
                    .HasColumnName("IN_HIGH_PRIORITY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.InHl7Format).HasColumnName("IN_HL7_FORMAT");

                entity.Property(e => e.InNeedsCrf)
                    .IsRequired()
                    .HasColumnName("IN_NEEDS_CRF")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InNeedsCrfProb)
                    .HasColumnName("IN_NEEDS_CRF_PROB")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InNeedsCrfSusp)
                    .HasColumnName("IN_NEEDS_CRF_SUSP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InNeedsReview)
                    .IsRequired()
                    .HasColumnName("IN_NEEDS_REVIEW")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.InNonNegative)
                    .HasColumnName("IN_NON_NEGATIVE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InNonReportable)
                    .HasColumnName("IN_NON_REPORTABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSerogroup)
                    .IsRequired()
                    .HasColumnName("IN_SEROGROUP")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.InShowAntimicroAgents).HasColumnName("IN_SHOW_ANTIMICRO_AGENTS");

                entity.Property(e => e.NmIcd9)
                    .HasColumnName("NM_ICD9")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<Icd9CrfDetail>(entity =>
            {
                entity.HasKey(e => new { e.IdEvent, e.IdStep });

                entity.ToTable("ICD9_CRF_DETAIL");

                entity.Property(e => e.IdEvent).HasColumnName("ID_EVENT");

                entity.Property(e => e.IdStep).HasColumnName("ID_STEP");

                entity.Property(e => e.CdOperand)
                    .HasColumnName("CD_OPERAND")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTargetColumn)
                    .HasColumnName("CD_TARGET_COLUMN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTargetValue)
                    .HasColumnName("DS_TARGET_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAlpha)
                    .HasColumnName("IN_ALPHA")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Icd9CrfEvent>(entity =>
            {
                entity.HasKey(e => e.IdEvent);

                entity.ToTable("ICD9_CRF_EVENT");

                entity.Property(e => e.IdEvent)
                    .HasColumnName("ID_EVENT")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdIcd9)
                    .IsRequired()
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.NmEvent)
                    .HasColumnName("NM_EVENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Icd9Measures>(entity =>
            {
                entity.HasKey(e => new { e.CdIcd9, e.CdType, e.IdIcd9MeasuresSet });

                entity.ToTable("ICD9_MEASURES");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdType)
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdIcd9MeasuresSet).HasColumnName("ID_ICD9_MEASURES_SET");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.InRecommended)
                    .HasColumnName("IN_RECOMMENDED")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Icd9Notes>(entity =>
            {
                entity.HasKey(e => new { e.IdNote, e.IdOrder });

                entity.ToTable("ICD9_NOTES");

                entity.Property(e => e.IdNote).HasColumnName("ID_NOTE");

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.CdIcd9)
                    .IsRequired()
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .IsRequired()
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Icd9Relation>(entity =>
            {
                entity.HasKey(e => new { e.CdIcd9, e.CdType, e.DsRelation });

                entity.ToTable("ICD9_RELATION");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdType)
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsRelation)
                    .HasColumnName("DS_RELATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdPriority).HasColumnName("ID_PRIORITY");

                entity.Property(e => e.InPrimary)
                    .HasColumnName("IN_PRIMARY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CdIcd9Navigation)
                    .WithMany(p => p.Icd9Relation)
                    .HasForeignKey(d => d.CdIcd9)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICD9_RELATION_CD_ICD9");
            });

            modelBuilder.Entity<Icd9Survey>(entity =>
            {
                entity.HasKey(e => e.IdSequence);

                entity.ToTable("ICD9_SURVEY");

                entity.Property(e => e.IdSequence)
                    .HasColumnName("ID_SEQUENCE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsActivateQuestions)
                    .HasColumnName("DS_ACTIVATE_QUESTIONS")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsHeader)
                    .HasColumnName("DS_HEADER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsMatchValues)
                    .HasColumnName("DS_MATCH_VALUES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPrompt)
                    .HasColumnName("DS_PROMPT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPromptType)
                    .HasColumnName("DS_PROMPT_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsQuestion)
                    .IsRequired()
                    .HasColumnName("DS_QUESTION")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsScriptName)
                    .HasColumnName("DS_SCRIPT_NAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsShort)
                    .HasColumnName("DS_SHORT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdLevel).HasColumnName("ID_LEVEL");

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.InActive)
                    .HasColumnName("IN_ACTIVE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDisplay)
                    .HasColumnName("IN_DISPLAY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InIncludeQi)
                    .HasColumnName("IN_INCLUDE_QI")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Icd9Symptom>(entity =>
            {
                entity.HasKey(e => new { e.CdIcd9, e.CdSymptom });

                entity.ToTable("ICD9_SYMPTOM");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdSymptom)
                    .HasColumnName("CD_SYMPTOM")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.CdIcd9Navigation)
                    .WithMany(p => p.Icd9Symptom)
                    .HasForeignKey(d => d.CdIcd9)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICD9_SYMPTOM_CD_ICD9");

                entity.HasOne(d => d.CdSymptomNavigation)
                    .WithMany(p => p.Icd9Symptom)
                    .HasForeignKey(d => d.CdSymptom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICD9_SYMPTOM_CD_SYMPTOM");
            });

            modelBuilder.Entity<Icd9Tables>(entity =>
            {
                entity.HasKey(e => new { e.CdIcd9, e.NmTable });

                entity.ToTable("ICD9_TABLES");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmTable)
                    .HasColumnName("NM_TABLE")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Identifier>(entity =>
            {
                entity.HasKey(e => new { e.IdEntity, e.IdType });

                entity.ToTable("IDENTIFIER");

                entity.Property(e => e.IdEntity).HasColumnName("ID_ENTITY");

                entity.Property(e => e.IdType).HasColumnName("ID_TYPE");

                entity.Property(e => e.DsEnc)
                    .HasColumnName("DS_ENC")
                    .HasMaxLength(256);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdLookup).HasColumnName("ID_LOOKUP");

                entity.Property(e => e.IdSsnTemp)
                    .HasColumnName("ID_SSN_TEMP")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.IsValid).HasColumnName("IS_VALID");
            });

            modelBuilder.Entity<IncidenceFile>(entity =>
            {
                entity.ToTable("INCIDENCE_FILE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DsLinkingFile)
                    .IsRequired()
                    .HasColumnName("DS_LINKING_FILE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsStarhsFile)
                    .IsRequired()
                    .HasColumnName("DS_STARHS_FILE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdLinkingChecksum).HasColumnName("ID_LINKING_CHECKSUM");

                entity.Property(e => e.IdStarhsChecksum).HasColumnName("ID_STARHS_CHECKSUM");
            });

            modelBuilder.Entity<IncidenceFileRow>(entity =>
            {
                entity.ToTable("INCIDENCE_FILE_ROW");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DsAccession)
                    .IsRequired()
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFacilityName)
                    .HasColumnName("DS_FACILITY_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsMethod)
                    .IsRequired()
                    .HasColumnName("DS_METHOD")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsNumericResult)
                    .IsRequired()
                    .HasColumnName("DS_NUMERIC_RESULT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResult)
                    .IsRequired()
                    .HasColumnName("DS_RESULT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsStarhsLab)
                    .IsRequired()
                    .HasColumnName("DS_STARHS_LAB")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtTested)
                    .HasColumnName("DT_TESTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdFile).HasColumnName("ID_FILE");

                entity.Property(e => e.IdLrv).HasColumnName("ID_LRV");

                entity.Property(e => e.IdStarhs)
                    .IsRequired()
                    .HasColumnName("ID_STARHS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.IncidenceFileRow)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__INCIDENCE__ID_FI__43ED83D5");

                entity.HasOne(d => d.IdLrvNavigation)
                    .WithMany(p => p.IncidenceFileRow)
                    .HasForeignKey(d => d.IdLrv)
                    .HasConstraintName("FK__INCIDENCE__ID_LR__44E1A80E");
            });

            modelBuilder.Entity<IncomingTestResults>(entity =>
            {
                entity.HasKey(e => e.MessageId);

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.AccessionDate).HasColumnType("datetime");

                entity.Property(e => e.InsertDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PickupDate).HasColumnType("datetime");

                entity.Property(e => e.ResultDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SpecimenComment)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SpecimenCondition)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SpecimenId)
                    .IsRequired()
                    .HasColumnName("SpecimenID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TestRequestId).HasColumnName("TestRequestID");

                entity.Property(e => e.TestResult)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TestType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Lab>(entity =>
            {
                entity.HasKey(e => e.IdLab);

                entity.ToTable("LAB");

                entity.HasIndex(e => e.IdCase)
                    .HasName("LAB23");

                entity.HasIndex(e => e.IdLaboratory)
                    .HasName("IDX_LAB_ID_LABORATORY");

                entity.HasIndex(e => e.IdOrderFacility)
                    .HasName("IDX_LAB_ID_ORDER_FACILITY");

                entity.HasIndex(e => e.IdProvider)
                    .HasName("IDX_LAB_ID_PROVIDER");

                entity.HasIndex(e => new { e.IdProfile, e.IdCase })
                    .HasName("idxLab_Profile_Case");

                entity.HasIndex(e => new { e.CdCounty, e.CdRecipStatus, e.CdLabStatus, e.CdDisposition, e.IdProfile, e.IdLab })
                    .HasName("IDX_LAB_RECIP");

                entity.Property(e => e.IdLab)
                    .HasColumnName("ID_LAB")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmExposuresHigh).HasColumnName("AM_EXPOSURES_HIGH");

                entity.Property(e => e.AmExposuresLow).HasColumnName("AM_EXPOSURES_LOW");

                entity.Property(e => e.CdBiotype)
                    .HasColumnName("CD_BIOTYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdDisposition)
                    .IsRequired()
                    .HasColumnName("CD_DISPOSITION")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdIcd9)
                    .IsRequired()
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdInvestigator)
                    .HasColumnName("CD_INVESTIGATOR")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabEventType)
                    .HasColumnName("CD_LAB_EVENT_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabStatus)
                    .IsRequired()
                    .HasColumnName("CD_LAB_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('OPEN')");

                entity.Property(e => e.CdLabTest)
                    .HasColumnName("CD_LAB_TEST")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdObservation)
                    .IsRequired()
                    .HasColumnName("CD_OBSERVATION")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdRecipStatus)
                    .HasColumnName("CD_RECIP_STATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerogroup)
                    .HasColumnName("CD_SEROGROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerotype)
                    .HasColumnName("CD_SEROTYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecimen)
                    .IsRequired()
                    .HasColumnName("CD_SPECIMEN")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdSpecimenCond)
                    .HasColumnName("CD_SPECIMEN_COND")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdStrain)
                    .HasColumnName("CD_STRAIN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestType)
                    .HasColumnName("CD_TEST_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAccession)
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsCdcClusterCode)
                    .HasColumnName("DS_CDC_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsDisclaimer)
                    .HasColumnName("DS_DISCLAIMER")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrAddressFacility)
                    .HasColumnName("DS_ELR_ADDRESS_FACILITY")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrAddressProvider)
                    .HasColumnName("DS_ELR_ADDRESS_PROVIDER")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrSpecimen)
                    .IsRequired()
                    .HasColumnName("DS_ELR_SPECIMEN")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsNotes)
                    .IsRequired()
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsPfge)
                    .HasColumnName("DS_PFGE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeFlorida)
                    .HasColumnName("DS_PFGE_FLORIDA")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeSecondary)
                    .HasColumnName("DS_PFGE_SECONDARY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsReason)
                    .HasColumnName("ds_reason")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsResult)
                    .HasColumnName("DS_RESULT")
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsResultOverall)
                    .HasColumnName("DS_RESULT_OVERALL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpcimenCond)
                    .HasColumnName("DS_SPCIMEN_COND")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpecimen)
                    .HasColumnName("DS_SPECIMEN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsThirdParty)
                    .HasColumnName("DS_THIRD_PARTY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsWgsClusterCode)
                    .HasColumnName("DS_WGS_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtElrXmit)
                    .HasColumnName("DT_ELR_XMIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFlatfile)
                    .HasColumnName("DT_FLATFILE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLabEvent)
                    .HasColumnName("DT_LAB_EVENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReceived)
                    .HasColumnName("DT_RECEIVED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStatus)
                    .HasColumnName("DT_STATUS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtThirdParty)
                    .HasColumnName("DT_THIRD_PARTY")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdAnimalProfile).HasColumnName("ID_ANIMAL_PROFILE");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdFamily).HasColumnName("ID_FAMILY");

                entity.Property(e => e.IdLabOutbreak).HasColumnName("ID_LAB_OUTBREAK");

                entity.Property(e => e.IdLaboratory).HasColumnName("ID_LABORATORY");

                entity.Property(e => e.IdObservation)
                    .HasColumnName("ID_OBSERVATION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrderFacility).HasColumnName("ID_ORDER_FACILITY");

                entity.Property(e => e.IdPanel).HasColumnName("ID_PANEL");

                entity.Property(e => e.IdPerformingLab).HasColumnName("ID_PERFORMING_LAB");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.IdProvider).HasColumnName("ID_PROVIDER");

                entity.Property(e => e.InComplete)
                    .HasColumnName("IN_COMPLETE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InLabExposures)
                    .HasColumnName("IN_LAB_EXPOSURES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPregnancy)
                    .HasColumnName("IN_PREGNANCY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThirdParty)
                    .HasColumnName("IN_THIRD_PARTY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdLaboratoryNavigation)
                    .WithMany(p => p.LabIdLaboratoryNavigation)
                    .HasForeignKey(d => d.IdLaboratory)
                    .HasConstraintName("FK_LAB_ID_LABORATORY");

                entity.HasOne(d => d.IdOrderFacilityNavigation)
                    .WithMany(p => p.LabIdOrderFacilityNavigation)
                    .HasForeignKey(d => d.IdOrderFacility)
                    .HasConstraintName("FK_LAB_ID_ORDER_FACILITY");

                entity.HasOne(d => d.IdProviderNavigation)
                    .WithMany(p => p.LabIdProviderNavigation)
                    .HasForeignKey(d => d.IdProvider)
                    .HasConstraintName("FK_LAB_ID_PROVIDER");
            });

            modelBuilder.Entity<LabDocument>(entity =>
            {
                entity.HasKey(e => new { e.IdLab, e.IdEpiDocument });

                entity.ToTable("LAB_DOCUMENT");

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.IdEpiDocument).HasColumnName("ID_EPI_DOCUMENT");

                entity.Property(e => e.DsDesc)
                    .HasColumnName("DS_DESC")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEpiDocument)
                    .HasColumnName("DT_EPI_DOCUMENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmFile)
                    .HasColumnName("NM_FILE")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LabElrkin>(entity =>
            {
                entity.HasKey(e => e.KinKey);

                entity.ToTable("Lab_ELRKin");

                entity.Property(e => e.ContactOrgName)
                    .HasColumnName("Contact_Org_Name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPerson)
                    .HasColumnName("Contact_Org_Person")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonAddress1)
                    .HasColumnName("Contact_Org_Person_Address1")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonAddress2)
                    .HasColumnName("Contact_Org_Person_Address2")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonCity)
                    .HasColumnName("Contact_Org_Person_City")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonCountry)
                    .HasColumnName("Contact_Org_Person_Country")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonEmail)
                    .HasColumnName("Contact_Org_Person_email")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonPhone)
                    .HasColumnName("Contact_Org_Person_Phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonState)
                    .HasColumnName("Contact_Org_Person_State")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonZip)
                    .HasColumnName("Contact_Org_Person_ZIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.KinAddress1)
                    .HasColumnName("Kin_Address_1")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KinAddress2)
                    .HasColumnName("Kin_Address_2")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.KinCity)
                    .HasColumnName("Kin_City")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KinCountry)
                    .HasColumnName("Kin_Country")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KinEmail)
                    .HasColumnName("Kin_email")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KinName)
                    .HasColumnName("Kin_Name")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.KinPhoneNumber)
                    .HasColumnName("Kin_Phone_Number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KinRelationship)
                    .HasColumnName("Kin_Relationship")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KinState)
                    .HasColumnName("Kin_State")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KinZip)
                    .HasColumnName("Kin_ZIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LabElrOrder>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("Lab_elrOrder");

                entity.Property(e => e.IdKey).HasColumnName("ID_KEY");

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.MessageDateTime).HasColumnType("datetime");

                entity.Property(e => e.OrderAlternateCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderAlternateDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrderCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrderIcd9codes)
                    .HasColumnName("OrderICD9Codes")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRequestedDateTime).HasColumnType("datetime");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpecimenCollectedDateTime).HasColumnType("datetime");

                entity.Property(e => e.SpecimenReceivedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<LabElrpatVisit>(entity =>
            {
                entity.HasKey(e => e.PatVisitKey);

                entity.ToTable("Lab_ELRPatVisit");

                entity.Property(e => e.AdmissionType)
                    .HasColumnName("Admission_Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmitDateTime)
                    .HasColumnName("Admit_DateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdmitLevelOfCareCode)
                    .HasColumnName("Admit_Level_of_Care_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmitReason)
                    .HasColumnName("Admit Reason")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmitSource)
                    .HasColumnName("Admit_Source")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmittingDoctorId)
                    .HasColumnName("Admitting_Doctor_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmittingDoctorName)
                    .HasColumnName("Admitting_Doctor_Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientBed)
                    .HasColumnName("Assigned_Patient_Bed")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientBuilding)
                    .HasColumnName("Assigned_Patient_Building")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientFacility)
                    .HasColumnName("Assigned_Patient_Facility")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientFloor)
                    .HasColumnName("Assigned_Patient_Floor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientLocationDescrip)
                    .HasColumnName("Assigned_Patient_Location_Descrip")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientLocationStatus)
                    .HasColumnName("Assigned_Patient_Location_Status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientPointOfCare)
                    .HasColumnName("Assigned_Patient_Point_of_Care")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientRoom)
                    .HasColumnName("Assigned_Patient_Room")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AttendingDoctorId)
                    .HasColumnName("Attending_Doctor_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AttendingDoctorName)
                    .HasColumnName("Attending_Doctor_Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClinicOrganizationName)
                    .HasColumnName("Clinic_Organization_Name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConsultingDoctorId)
                    .HasColumnName("Consulting_Doctor_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsultingDoctorName)
                    .HasColumnName("Consulting_Doctor_Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DischargeDateTime)
                    .HasColumnName("Discharge_DateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.DischargeDisposition)
                    .HasColumnName("Discharge_Disposition")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DischargedToLocation)
                    .HasColumnName("Discharged_to_Location")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DischargedToLocationDtm)
                    .HasColumnName("Discharged_to_Location_DTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmploymentRelatedIllness)
                    .HasColumnName("Employment_Related_Illness")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstSimilarIllnessDate)
                    .HasColumnName("First_Similar_Illness_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HospitalService)
                    .HasColumnName("Hospital_Service")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.PatientClass)
                    .HasColumnName("Patient_Class")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PatientType)
                    .HasColumnName("Patient_Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PersonLocationType)
                    .HasColumnName("Person_Location_Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReferringDoctorId)
                    .HasColumnName("Referring_Doctor_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReferringDoctorName)
                    .HasColumnName("Referring_Doctor_Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ServicingFacility)
                    .HasColumnName("Servicing_Facility")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VisitNumber)
                    .HasColumnName("Visit_Number")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LabElrRoblite>(entity =>
            {
                entity.HasKey(e => e.IdElrObservation);

                entity.ToTable("LAB_ELR_ROBLITE");

                entity.Property(e => e.IdElrObservation)
                    .HasColumnName("ID_ELR_OBSERVATION")
                    .ValueGeneratedNever();

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdElrOrder).HasColumnName("ID_ELR_ORDER");

                entity.Property(e => e.IdElrRequest).HasColumnName("ID_ELR_REQUEST");

                entity.Property(e => e.InPicked)
                    .HasColumnName("IN_PICKED")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<LabElrspecimen>(entity =>
            {
                entity.HasKey(e => e.Spmkey);

                entity.ToTable("Lab_ELRSpecimen");

                entity.Property(e => e.Spmkey).HasColumnName("SPMKey");

                entity.Property(e => e.AltSpmCollectMethodCode)
                    .HasColumnName("Alt_SPM_Collect_Method_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmCollectMethodDesc)
                    .HasColumnName("Alt_SPM_Collect_Method_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmConditionCode)
                    .HasColumnName("Alt_SPM_Condition_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmConditionDesc)
                    .HasColumnName("Alt_SPM_Condition_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoCollectMethodCode)
                    .HasColumnName("Alt_SPM_two_Collect_Method_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoCollectMethodDesc)
                    .HasColumnName("Alt_SPM_two_Collect_Method_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoConditionCode)
                    .HasColumnName("Alt_SPM_two_Condition_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoConditionDesc)
                    .HasColumnName("Alt_SPM_two_Condition_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoTypeCode)
                    .HasColumnName("Alt_SPM_two_Type_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoTypeDesc)
                    .HasColumnName("Alt_SPM_two_Type_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTypeCode)
                    .HasColumnName("Alt_SPM_Type_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTypeDesc)
                    .HasColumnName("Alt_SPM_Type_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DtSpmCollected)
                    .HasColumnName("DT_SPM_Collected")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSpmReceived)
                    .HasColumnName("DT_SPM_Received")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.InsertedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderSpecimenTypeCode)
                    .HasColumnName("ORDER_SpecimenTypeCode")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderSpecimenTypeName)
                    .HasColumnName("ORDER_SpecimenTypeName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpmCollectMethodCode)
                    .HasColumnName("SPM_Collect_Method_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpmCollectMethodDesc)
                    .HasColumnName("SPM_Collect_Method_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmCollectText)
                    .HasColumnName("SPM_Collect_text")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmConditionCode)
                    .HasColumnName("SPM_Condition_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpmConditionDesc)
                    .HasColumnName("SPM_Condition_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmConditionText)
                    .HasColumnName("SPM_Condition_Text")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmId1)
                    .HasColumnName("SPM_ID1")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmId2)
                    .HasColumnName("SPM_ID2")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmTypeCode)
                    .HasColumnName("SPM_Type_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpmTypeDescrip)
                    .HasColumnName("SPM_Type_Descrip")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmTypeText)
                    .HasColumnName("SPM_Type_Text")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LabResultValues>(entity =>
            {
                entity.HasKey(e => e.IdLrv);

                entity.ToTable("LAB_RESULT_VALUES");

                entity.HasIndex(e => e.CdTestType)
                    .HasName("ix_CD_TEST_TYPE");

                entity.HasIndex(e => e.IdLab)
                    .HasName("idx_id_lab");

                entity.Property(e => e.IdLrv)
                    .HasColumnName("ID_LRV")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmNumericResult)
                    .HasColumnName("AM_NUMERIC_RESULT")
                    .HasColumnType("decimal(20, 2)");

                entity.Property(e => e.CdAbnormalFlag)
                    .HasColumnName("CD_ABNORMAL_FLAG")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdElrAltResult)
                    .HasColumnName("CD_ELR_ALT_RESULT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdElrResult)
                    .HasColumnName("CD_ELR_RESULT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9Lrv)
                    .HasColumnName("CD_ICD9_LRV")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdInterpretation)
                    .HasColumnName("CD_INTERPRETATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabTest)
                    .IsRequired()
                    .HasColumnName("CD_LAB_TEST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabType)
                    .HasColumnName("CD_LAB_TYPE")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdObservationAlternate)
                    .HasColumnName("CD_OBSERVATION_ALTERNATE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestType)
                    .IsRequired()
                    .HasColumnName("CD_TEST_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsComparator)
                    .HasColumnName("DS_COMPARATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrAltResult)
                    .HasColumnName("DS_ELR_ALT_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrResult)
                    .HasColumnName("DS_ELR_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsLoinc)
                    .HasColumnName("DS_LOINC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsMethodology)
                    .HasColumnName("DS_METHODOLOGY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsNumericExpression)
                    .HasColumnName("DS_NUMERIC_EXPRESSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsReferenceRange)
                    .IsRequired()
                    .HasColumnName("DS_REFERENCE_RANGE")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsResult)
                    .HasColumnName("DS_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultAlt)
                    .HasColumnName("DS_RESULT_ALT")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsUnits)
                    .IsRequired()
                    .HasColumnName("DS_UNITS")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdElrObservation).HasColumnName("ID_ELR_OBSERVATION");

                entity.Property(e => e.IdElrOrder).HasColumnName("ID_ELR_ORDER");

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.InDoiflag).HasColumnName("IN_DOIFlag");

                entity.Property(e => e.NmObservation)
                    .IsRequired()
                    .HasColumnName("NM_OBSERVATION")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NmObservationAlternate)
                    .IsRequired()
                    .HasColumnName("NM_OBSERVATION_ALTERNATE")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<LabTestIcd9>(entity =>
            {
                entity.HasKey(e => e.IdLabTestSet);

                entity.ToTable("LAB_TEST_ICD9");

                entity.Property(e => e.IdLabTestSet)
                    .HasColumnName("ID_LAB_TEST_SET")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('01/01/1900')");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CdIcd9Navigation)
                    .WithMany(p => p.LabTestIcd9)
                    .HasForeignKey(d => d.CdIcd9)
                    .HasConstraintName("FK_LAB_TEST_ICD9_CD_ICD9");
            });

            modelBuilder.Entity<LabTestIcd9Set>(entity =>
            {
                entity.HasKey(e => e.IdLabTestIcd9Set);

                entity.ToTable("LAB_TEST_ICD9_SET");

                entity.Property(e => e.IdLabTestIcd9Set)
                    .HasColumnName("ID_LAB_TEST_ICD9_SET")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdLabTest)
                    .HasColumnName("CD_LAB_TEST")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdLabTestSet).HasColumnName("ID_LAB_TEST_SET");

                entity.Property(e => e.IdPriority).HasColumnName("ID_PRIORITY");

                entity.HasOne(d => d.IdLabTestSetNavigation)
                    .WithMany(p => p.LabTestIcd9Set)
                    .HasForeignKey(d => d.IdLabTestSet)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ID_LAB_TEST_SET");
            });

            modelBuilder.Entity<LabTestType>(entity =>
            {
                entity.HasKey(e => new { e.CdLabTest, e.CdTestType });

                entity.ToTable("LAB_TEST_TYPE");

                entity.Property(e => e.CdLabTest)
                    .HasColumnName("CD_LAB_TEST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestType)
                    .HasColumnName("CD_TEST_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabType)
                    .IsRequired()
                    .HasColumnName("CD_LAB_TYPE")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsFieldName)
                    .HasColumnName("DS_FIELD_NAME")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InDisplay).HasColumnName("IN_DISPLAY");
            });

            modelBuilder.Entity<LeadExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("LEAD_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmFirstCall)
                    .HasColumnName("AM_FIRST_CALL")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmSecondCall)
                    .HasColumnName("AM_SECOND_CALL")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdAdoptCountry)
                    .HasColumnName("CD_ADOPT_COUNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdAppetite)
                    .HasColumnName("CD_APPETITE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdCaseClosure)
                    .HasColumnName("CD_CASE_CLOSURE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdClearanceTest)
                    .HasColumnName("CD_CLEARANCE_TEST")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdFundingFublt)
                    .HasColumnName("CD_FUNDING_FUBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFundingIblt)
                    .HasColumnName("CD_FUNDING_IBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdHobbyHouseholdExposure)
                    .HasColumnName("CD_HOBBY_HOUSEHOLD_EXPOSURE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdHobbyPatientExposure)
                    .HasColumnName("CD_HOBBY_PATIENT_EXPOSURE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdOccupationHouseholdExposure)
                    .HasColumnName("CD_OCCUPATION_HOUSEHOLD_EXPOSURE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutOfStateMove)
                    .HasColumnName("CD_OUT_OF_STATE_MOVE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutsideCountry1)
                    .HasColumnName("CD_OUTSIDE_COUNTRY1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutsideCountry2)
                    .HasColumnName("CD_OUTSIDE_COUNTRY2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPatientEmployer)
                    .HasColumnName("CD_PATIENT_EMPLOYER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdPatientOccupation)
                    .HasColumnName("CD_PATIENT_OCCUPATION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdProviderTypeFublt)
                    .HasColumnName("CD_PROVIDER_TYPE_FUBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdProviderTypeIblt)
                    .HasColumnName("CD_PROVIDER_TYPE_IBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReferToFlState)
                    .HasColumnName("CD_REFER_TO_FL_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestReasonFublt)
                    .HasColumnName("CD_TEST_REASON_FUBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestReasonIblt)
                    .HasColumnName("CD_TEST_REASON_IBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsCaregiverNotify)
                    .HasColumnName("DS_CAREGIVER_NOTIFY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsCareplanDevelop)
                    .HasColumnName("DS_CAREPLAN_DEVELOP")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsCaseMgrMedicalService)
                    .HasColumnName("DS_CASE_MGR_MEDICAL_SERVICE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsCaseMgrNeuroService)
                    .HasColumnName("DS_CASE_MGR_NEURO_SERVICE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsCasemanagerReason)
                    .HasColumnName("DS_CASEMANAGER_REASON")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsEducationProvided)
                    .HasColumnName("DS_EDUCATION_PROVIDED")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsEducationReason)
                    .HasColumnName("DS_EDUCATION_REASON")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsEnvHistory)
                    .HasColumnName("DS_ENV_HISTORY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsMedicaid)
                    .HasColumnName("DS_MEDICAID")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DsMedicalProblem)
                    .HasColumnName("DS_MEDICAL_PROBLEM")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsMeetInvestigationCriteria)
                    .HasColumnName("DS_MEET_INVESTIGATION_CRITERIA")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsMemberHobby)
                    .HasColumnName("DS_MEMBER_HOBBY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsMemberOccupation)
                    .HasColumnName("DS_MEMBER_OCCUPATION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotesClosurePositive)
                    .HasColumnName("DS_NOTES_CLOSURE_POSITIVE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherCaseClosure)
                    .HasColumnName("DS_OTHER_CASE_CLOSURE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherEducation)
                    .HasColumnName("DS_OTHER_EDUCATION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherEnvChangeAssessment)
                    .HasColumnName("DS_OTHER_ENV_CHANGE_ASSESSMENT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherHobbyHousehold)
                    .HasColumnName("DS_OTHER_HOBBY_HOUSEHOLD")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherHobbyPatient)
                    .HasColumnName("DS_OTHER_HOBBY_PATIENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherMedical)
                    .HasColumnName("DS_OTHER_MEDICAL")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherOccupationHousehold)
                    .HasColumnName("DS_OTHER_OCCUPATION_HOUSEHOLD")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherPatientEmployer)
                    .HasColumnName("DS_OTHER_PATIENT_EMPLOYER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherPatientOccupation)
                    .HasColumnName("DS_OTHER_PATIENT_OCCUPATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherReferral)
                    .HasColumnName("DS_OTHER_REFERRAL")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherRisk)
                    .HasColumnName("DS_OTHER_RISK")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsPatientOccupation)
                    .HasColumnName("DS_PATIENT_OCCUPATION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsRefugee)
                    .HasColumnName("DS_REFUGEE")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DsTestResult1).HasColumnName("DS_TEST_RESULT1");

                entity.Property(e => e.DsTestResult2).HasColumnName("DS_TEST_RESULT2");

                entity.Property(e => e.DsTestResult3).HasColumnName("DS_TEST_RESULT3");

                entity.Property(e => e.DtAbatement)
                    .HasColumnName("DT_ABATEMENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCaregiverNotify)
                    .HasColumnName("DT_CAREGIVER_NOTIFY")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCareplanDevelop)
                    .HasColumnName("DT_CAREPLAN_DEVELOP")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCaseClosure)
                    .HasColumnName("DT_CASE_CLOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCaseMgrMedicalExam)
                    .HasColumnName("DT_CASE_MGR_MEDICAL_EXAM")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCaseMgrNeuroExam)
                    .HasColumnName("DT_CASE_MGR_NEURO_EXAM")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCasemanagerScreen)
                    .HasColumnName("DT_CASEMANAGER_SCREEN")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtCertLetter)
                    .HasColumnName("DT_CERT_LETTER")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChelationEnd)
                    .HasColumnName("DT_CHELATION_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChelationStart)
                    .HasColumnName("DT_CHELATION_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChildDob1)
                    .HasColumnName("DT_CHILD_DOB1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChildDob2)
                    .HasColumnName("DT_CHILD_DOB2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChildDob3)
                    .HasColumnName("DT_CHILD_DOB3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChildMedical)
                    .HasColumnName("DT_CHILD_MEDICAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChildrenRecommendTest)
                    .HasColumnName("DT_CHILDREN_RECOMMEND_TEST")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCommunityService)
                    .HasColumnName("DT_COMMUNITY_SERVICE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDue)
                    .HasColumnName("DT_DUE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEducation)
                    .HasColumnName("DT_EDUCATION")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtEntertoUsa1)
                    .HasColumnName("DT_ENTERTO_USA1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEntertoUsa2)
                    .HasColumnName("DT_ENTERTO_USA2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnvHistory)
                    .HasColumnName("DT_ENV_HISTORY")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtFirstCall)
                    .HasColumnName("DT_FIRST_CALL")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFirstVisit)
                    .HasColumnName("DT_FIRST_VISIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHousing)
                    .HasColumnName("DT_HOUSING")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInitialLetter)
                    .HasColumnName("DT_INITIAL_LETTER")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInterimControl)
                    .HasColumnName("DT_INTERIM_CONTROL")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLeadSourceRemoved)
                    .HasColumnName("DT_LEAD_SOURCE_REMOVED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtNutritionAssessment)
                    .HasColumnName("DT_NUTRITION_ASSESSMENT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtOtherEnvChangeAssessment)
                    .HasColumnName("DT_OTHER_ENV_CHANGE_ASSESSMENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOtherReferral)
                    .HasColumnName("DT_OTHER_REFERRAL")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOutOfStateMove)
                    .HasColumnName("DT_OUT_OF_STATE_MOVE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtRemediationAbatement)
                    .HasColumnName("DT_REMEDIATION_ABATEMENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRenovationEnd)
                    .HasColumnName("DT_RENOVATION_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRenovationStart)
                    .HasColumnName("DT_RENOVATION_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSecondCall)
                    .HasColumnName("DT_SECOND_CALL")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSecondVisit)
                    .HasColumnName("DT_SECOND_VISIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTest1)
                    .HasColumnName("DT_TEST1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTest2)
                    .HasColumnName("DT_TEST2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTest3)
                    .HasColumnName("DT_TEST3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtWic)
                    .HasColumnName("DT_WIC")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAbatement).HasColumnName("IN_ABATEMENT");

                entity.Property(e => e.InAdditionalPatientInformation).HasColumnName("IN_ADDITIONAL_PATIENT_INFORMATION");

                entity.Property(e => e.InAdoption).HasColumnName("IN_ADOPTION");

                entity.Property(e => e.InAsymptomatic).HasColumnName("IN_ASYMPTOMATIC");

                entity.Property(e => e.InCaregiverNotify).HasColumnName("IN_CAREGIVER_NOTIFY");

                entity.Property(e => e.InCareplanDevelop).HasColumnName("IN_CAREPLAN_DEVELOP");

                entity.Property(e => e.InCaseMgrMedicalService).HasColumnName("IN_CASE_MGR_MEDICAL_SERVICE");

                entity.Property(e => e.InCaseMgrNeuroService).HasColumnName("IN_CASE_MGR_NEURO_SERVICE");

                entity.Property(e => e.InCaseMgrRecommendChildren).HasColumnName("IN_CASE_MGR_RECOMMEND_CHILDREN");

                entity.Property(e => e.InCasemanagerScreen).HasColumnName("IN_CASEMANAGER_SCREEN");

                entity.Property(e => e.InChelation).HasColumnName("IN_CHELATION");

                entity.Property(e => e.InChelationFunding)
                    .HasColumnName("IN_CHELATION_FUNDING")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InChelationLocation)
                    .HasColumnName("IN_CHELATION_LOCATION")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InChelationMedication)
                    .HasColumnName("IN_CHELATION_MEDICATION")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InChildMedical).HasColumnName("IN_CHILD_MEDICAL");

                entity.Property(e => e.InChildMedicalEnroll).HasColumnName("IN_CHILD_MEDICAL_ENROLL");

                entity.Property(e => e.InChildrenLivingRes).HasColumnName("IN_CHILDREN_LIVING_RES");

                entity.Property(e => e.InCommunityService).HasColumnName("IN_COMMUNITY_SERVICE");

                entity.Property(e => e.InCommunityServiceEnroll).HasColumnName("IN_COMMUNITY_SERVICE_ENROLL");

                entity.Property(e => e.InContactWithLead).HasColumnName("IN_CONTACT_WITH_LEAD");

                entity.Property(e => e.InEducation).HasColumnName("IN_EDUCATION");

                entity.Property(e => e.InEnvChangeAssessment).HasColumnName("IN_ENV_CHANGE_ASSESSMENT");

                entity.Property(e => e.InEnvHistory).HasColumnName("IN_ENV_HISTORY");

                entity.Property(e => e.InEnvInvestigationPerform).HasColumnName("IN_ENV_INVESTIGATION_PERFORM");

                entity.Property(e => e.InEnvInvestigationReq).HasColumnName("IN_ENV_INVESTIGATION_REQ");

                entity.Property(e => e.InHobbyHouseholdExposure).HasColumnName("IN_HOBBY_HOUSEHOLD_EXPOSURE");

                entity.Property(e => e.InHobbyPatientExposure).HasColumnName("IN_HOBBY_PATIENT_EXPOSURE");

                entity.Property(e => e.InHomeRenovation)
                    .HasColumnName("IN_HOME_RENOVATION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHousing).HasColumnName("IN_HOUSING");

                entity.Property(e => e.InHousingEnroll).HasColumnName("IN_HOUSING_ENROLL");

                entity.Property(e => e.InImmigrant).HasColumnName("IN_IMMIGRANT");

                entity.Property(e => e.InImportedCandy).HasColumnName("IN_IMPORTED_CANDY");

                entity.Property(e => e.InImportedCosmetic).HasColumnName("IN_IMPORTED_COSMETIC");

                entity.Property(e => e.InImportedPottery).HasColumnName("IN_IMPORTED_POTTERY");

                entity.Property(e => e.InIndustrialPlayArea).HasColumnName("IN_INDUSTRIAL_PLAY_AREA");

                entity.Property(e => e.InInterimControl).HasColumnName("IN_INTERIM_CONTROL");

                entity.Property(e => e.InLeadSourceRemoved).HasColumnName("IN_LEAD_SOURCE_REMOVED");

                entity.Property(e => e.InMedicaid).HasColumnName("IN_MEDICAID");

                entity.Property(e => e.InMedicalProblem).HasColumnName("IN_MEDICAL_PROBLEM");

                entity.Property(e => e.InMemberHobby).HasColumnName("IN_MEMBER_HOBBY");

                entity.Property(e => e.InMemberOccupation).HasColumnName("IN_MEMBER_OCCUPATION");

                entity.Property(e => e.InMouthing).HasColumnName("IN_MOUTHING");

                entity.Property(e => e.InNutritionAssEnroll).HasColumnName("IN_NUTRITION_ASS_ENROLL");

                entity.Property(e => e.InNutritionAssessment).HasColumnName("IN_NUTRITION_ASSESSMENT");

                entity.Property(e => e.InOccupationHouseholdExposure).HasColumnName("IN_OCCUPATION_HOUSEHOLD_EXPOSURE");

                entity.Property(e => e.InOccupationPatientExposure).HasColumnName("IN_OCCUPATION_PATIENT_EXPOSURE");

                entity.Property(e => e.InOldHome).HasColumnName("IN_OLD_HOME");

                entity.Property(e => e.InOtherEnvChangeAssessment).HasColumnName("IN_OTHER_ENV_CHANGE_ASSESSMENT");

                entity.Property(e => e.InOtherReferral).HasColumnName("IN_OTHER_REFERRAL");

                entity.Property(e => e.InOtherReferralEnroll).HasColumnName("IN_OTHER_REFERRAL_ENROLL");

                entity.Property(e => e.InOutOfStateMove).HasColumnName("IN_OUT_OF_STATE_MOVE");

                entity.Property(e => e.InOutsideUsa).HasColumnName("IN_OUTSIDE_USA");

                entity.Property(e => e.InPaintHazard).HasColumnName("IN_PAINT_HAZARD");

                entity.Property(e => e.InPatientHobby).HasColumnName("IN_PATIENT_HOBBY");

                entity.Property(e => e.InPatientOccupation).HasColumnName("IN_PATIENT_OCCUPATION");

                entity.Property(e => e.InPica).HasColumnName("IN_PICA");

                entity.Property(e => e.InPregnant).HasColumnName("IN_PREGNANT");

                entity.Property(e => e.InReferToFl).HasColumnName("IN_REFER_TO_FL");

                entity.Property(e => e.InRefugee).HasColumnName("IN_REFUGEE");

                entity.Property(e => e.InRemediationAbatement).HasColumnName("IN_REMEDIATION_ABATEMENT");

                entity.Property(e => e.InSoilHazard).HasColumnName("IN_SOIL_HAZARD");

                entity.Property(e => e.InTile).HasColumnName("IN_TILE");

                entity.Property(e => e.InToysJewelry).HasColumnName("IN_TOYS_JEWELRY");

                entity.Property(e => e.InVinylBlinds).HasColumnName("IN_VINYL_BLINDS");

                entity.Property(e => e.InVisitRenovation).HasColumnName("IN_VISIT_RENOVATION");

                entity.Property(e => e.InWic).HasColumnName("IN_WIC");

                entity.Property(e => e.InWicEnroll).HasColumnName("IN_WIC_ENROLL");

                entity.Property(e => e.NmName1)
                    .HasColumnName("NM_NAME1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NmName2)
                    .HasColumnName("NM_NAME2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NmName3)
                    .HasColumnName("NM_NAME3")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LeadExtAdditional>(entity =>
            {
                entity.HasKey(e => e.IdAdditional);

                entity.ToTable("LEAD_EXT_ADDITIONAL");

                entity.HasIndex(e => e.IdLab)
                    .HasName("IDX_LEAD_EXT_ADDITIONAL_ID_LAB");

                entity.Property(e => e.IdAdditional)
                    .HasColumnName("ID_ADDITIONAL")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAdditionalPatientEmployer)
                    .HasColumnName("CD_ADDITIONAL_PATIENT_EMPLOYER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdAdditionalPatientOccupation)
                    .HasColumnName("CD_ADDITIONAL_PATIENT_OCCUPATION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherAdditionalPatientEmployer)
                    .HasColumnName("DS_OTHER_ADDITIONAL_PATIENT_EMPLOYER")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherAdditionalPatientOccupation)
                    .HasColumnName("DS_OTHER_ADDITIONAL_PATIENT_OCCUPATION")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.HasOne(d => d.IdLabNavigation)
                    .WithMany(p => p.LeadExtAdditional)
                    .HasForeignKey(d => d.IdLab)
                    .HasConstraintName("FK_LEAD_EXT_ADDITIONAL_ID_LAB");
            });

            modelBuilder.Entity<LeadExtArchive>(entity =>
            {
                entity.HasKey(e => e.IdCase)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("LEAD_EXT_ARCHIVE");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAppetite)
                    .HasColumnName("CD_APPETITE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdCaseClosure)
                    .HasColumnName("CD_CASE_CLOSURE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdDiet)
                    .HasColumnName("CD_DIET")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExpType1)
                    .HasColumnName("CD_EXP_TYPE_1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExpType2)
                    .HasColumnName("CD_EXP_TYPE_2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExpType3)
                    .HasColumnName("CD_EXP_TYPE_3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExpType4)
                    .HasColumnName("CD_EXP_TYPE_4")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposure1)
                    .HasColumnName("CD_EXPOSURE_1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposure2)
                    .HasColumnName("CD_EXPOSURE_2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposure3)
                    .HasColumnName("CD_EXPOSURE_3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposure4)
                    .HasColumnName("CD_EXPOSURE_4")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdMovedToCounty)
                    .HasColumnName("CD_MOVED_TO_COUNTY")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdOrigin)
                    .HasColumnName("CD_ORIGIN")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdTreatment)
                    .HasColumnName("CD_TREATMENT")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdTypeSite)
                    .HasColumnName("CD_TYPE_SITE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpType1)
                    .HasColumnName("DS_EXP_TYPE_1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpType2)
                    .HasColumnName("DS_EXP_TYPE_2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpType3)
                    .HasColumnName("DS_EXP_TYPE_3")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsExpType4)
                    .HasColumnName("DS_EXP_TYPE_4")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsMedicaid)
                    .HasColumnName("DS_MEDICAID")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherMedical)
                    .HasColumnName("DS_OTHER_MEDICAL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherOrigin)
                    .HasColumnName("DS_OTHER_ORIGIN")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsTypeSite)
                    .HasColumnName("DS_TYPE_SITE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCaseClosure)
                    .HasColumnName("DT_CASE_CLOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDue)
                    .HasColumnName("DT_DUE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSiteVisit)
                    .HasColumnName("DT_SITE_VISIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTreatmentEnd)
                    .HasColumnName("DT_TREATMENT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTreatmentStart)
                    .HasColumnName("DT_TREATMENT_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAdoption)
                    .HasColumnName("IN_ADOPTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAnemia)
                    .HasColumnName("IN_ANEMIA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCounseling)
                    .HasColumnName("IN_COUNSELING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InImmigrant)
                    .HasColumnName("IN_IMMIGRANT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMedicaid)
                    .HasColumnName("IN_MEDICAID")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMissedAppointment)
                    .HasColumnName("IN_MISSED_APPOINTMENT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMouthing)
                    .HasColumnName("IN_MOUTHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMoveAction)
                    .HasColumnName("IN_MOVE_ACTION")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InMoveType)
                    .HasColumnName("IN_MOVE_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InMoved)
                    .HasColumnName("IN_MOVED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InNoResponse)
                    .HasColumnName("IN_NO_RESPONSE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherMedical)
                    .HasColumnName("IN_OTHER_MEDICAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InParentsRefuse)
                    .HasColumnName("IN_PARENTS_REFUSE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPica)
                    .HasColumnName("IN_PICA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPostConfirm615Yrs)
                    .HasColumnName("IN_POST_CONFIRM_6_15_YRS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPostConfirm6Yrs)
                    .HasColumnName("IN_POST_CONFIRM_6_YRS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPregnant)
                    .HasColumnName("IN_PREGNANT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRefugee)
                    .HasColumnName("IN_REFUGEE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSiteVisit)
                    .HasColumnName("IN_SITE_VISIT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTwoPostConfirm6Yrs)
                    .HasColumnName("IN_TWO_POST_CONFIRM_6_YRS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWic)
                    .HasColumnName("IN_WIC")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LeadExtEnvironmental>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdEnvironmental });

                entity.ToTable("LEAD_EXT_ENVIRONMENTAL");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdEnvironmental).HasColumnName("ID_ENVIRONMENTAL");

                entity.Property(e => e.AmFloorCountertopResult).HasColumnName("AM_FLOOR_COUNTERTOP_RESULT");

                entity.Property(e => e.AmFloordustResult).HasColumnName("AM_FLOORDUST_RESULT");

                entity.Property(e => e.AmImportFirePotteryResult).HasColumnName("AM_IMPORT_FIRE_POTTERY_RESULT");

                entity.Property(e => e.AmImportFoodResult).HasColumnName("AM_IMPORT_FOOD_RESULT");

                entity.Property(e => e.AmImportRemedyCosmeticResult).HasColumnName("AM_IMPORT_REMEDY_COSMETIC_RESULT");

                entity.Property(e => e.AmOtherLeadHazardsResult).HasColumnName("AM_OTHER_LEAD_HAZARDS_RESULT");

                entity.Property(e => e.AmPaintchipResult).HasColumnName("AM_PAINTCHIP_RESULT");

                entity.Property(e => e.AmSoilsampleResult).HasColumnName("AM_SOILSAMPLE_RESULT");

                entity.Property(e => e.AmToysJeweleryResult).HasColumnName("AM_TOYS_JEWELERY_RESULT");

                entity.Property(e => e.AmVinylBlindResult).HasColumnName("AM_VINYL_BLIND_RESULT");

                entity.Property(e => e.AmWatersampleResult).HasColumnName("AM_WATERSAMPLE_RESULT");

                entity.Property(e => e.AmWindowsillResult).HasColumnName("AM_WINDOWSILL_RESULT");

                entity.Property(e => e.AmWindowwellResult).HasColumnName("AM_WINDOWWELL_RESULT");

                entity.Property(e => e.AmXrfResult).HasColumnName("AM_XRF_RESULT");

                entity.Property(e => e.AmYearBuilt).HasColumnName("AM_YEAR_BUILT");

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdDwellingLocation)
                    .HasColumnName("CD_DWELLING_LOCATION")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdDwellingType)
                    .HasColumnName("CD_DWELLING_TYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdEpaCertifiedLeadHazard)
                    .HasColumnName("CD_EPA_CERTIFIED_LEAD_HAZARD")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CdFloorCountertopTest)
                    .HasColumnName("CD_FLOOR_COUNTERTOP_TEST")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdFloorCountertopUnit)
                    .HasColumnName("CD_FLOOR_COUNTERTOP_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdFloordustType)
                    .HasColumnName("CD_FLOORDUST_TYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdFloordustUnit)
                    .HasColumnName("CD_FLOORDUST_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdHouseholdOccupationLeadHazard)
                    .HasColumnName("CD_HOUSEHOLD_OCCUPATION_LEAD_HAZARD")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CdImportFirePotteryTest)
                    .HasColumnName("CD_IMPORT_FIRE_POTTERY_TEST")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdImportFirePotteryUnit)
                    .HasColumnName("CD_IMPORT_FIRE_POTTERY_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdImportFoodUnit)
                    .HasColumnName("CD_IMPORT_FOOD_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdImportRemedyCosmeticUnit)
                    .HasColumnName("CD_IMPORT_REMEDY_COSMETIC_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdInvestigator)
                    .HasColumnName("CD_INVESTIGATOR")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdOtherLeadHazardsTest)
                    .HasColumnName("CD_OTHER_LEAD_HAZARDS_TEST")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdOtherLeadHazardsUnit)
                    .HasColumnName("CD_OTHER_LEAD_HAZARDS_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdOwnerHomePhone)
                    .HasColumnName("CD_OWNER_HOME_PHONE")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CdOwnerOtherPhone)
                    .HasColumnName("CD_OWNER_OTHER_PHONE")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CdOwnerState)
                    .HasColumnName("CD_OWNER_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdOwnership)
                    .HasColumnName("CD_OWNERSHIP")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdPaintchipUnit)
                    .HasColumnName("CD_PAINTCHIP_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdSoilsampleUnit)
                    .HasColumnName("CD_SOILSAMPLE_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdToysJeweleryTest)
                    .HasColumnName("CD_TOYS_JEWELERY_TEST")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdToysJeweleryUnit)
                    .HasColumnName("CD_TOYS_JEWELERY_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdVinylBlindTest)
                    .HasColumnName("CD_VINYL_BLIND_TEST")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdVinylBlindUnit)
                    .HasColumnName("CD_VINYL_BLIND_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdWatersampleUnit)
                    .HasColumnName("CD_WATERSAMPLE_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdWindowsillUnit)
                    .HasColumnName("CD_WINDOWSILL_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdWindowwellUnit)
                    .HasColumnName("CD_WINDOWWELL_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdXrfType)
                    .HasColumnName("CD_XRF_TYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdXrfUnit)
                    .HasColumnName("CD_XRF_UNIT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddress1)
                    .IsRequired()
                    .HasColumnName("DS_ADDRESS1")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddress2)
                    .HasColumnName("DS_ADDRESS2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsDwellingLocation)
                    .HasColumnName("DS_DWELLING_LOCATION")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsDwellingType)
                    .HasColumnName("DS_DWELLING_TYPE")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsEpaCertifiedLeadHazard)
                    .HasColumnName("DS_EPA_CERTIFIED_LEAD_HAZARD")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsHouseholdOccupationLeadHazard)
                    .HasColumnName("DS_HOUSEHOLD_OCCUPATION_LEAD_HAZARD")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsInvestigationReason)
                    .HasColumnName("DS_INVESTIGATION_REASON")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsInvestigationReasonType)
                    .HasColumnName("DS_INVESTIGATION_REASON_TYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherFindings)
                    .HasColumnName("DS_OTHER_FINDINGS")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherLeadHazards)
                    .HasColumnName("DS_OTHER_LEAD_HAZARDS")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsOwnerAddress1)
                    .HasColumnName("DS_OWNER_ADDRESS1")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsOwnerAddress2)
                    .HasColumnName("DS_OWNER_ADDRESS2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOwnerCity)
                    .HasColumnName("DS_OWNER_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsOwnerZip)
                    .HasColumnName("DS_OWNER_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsPotentialIndustryHazard)
                    .HasColumnName("DS_POTENTIAL_INDUSTRY_HAZARD")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsPrimaryResidenceInvestigation)
                    .HasColumnName("DS_PRIMARY_RESIDENCE_INVESTIGATION")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .IsRequired()
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInvestigation)
                    .HasColumnName("DT_INVESTIGATION")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInvestigationComplete)
                    .HasColumnName("DT_INVESTIGATION_COMPLETE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReportLandlord)
                    .HasColumnName("DT_REPORT_LANDLORD")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReportPatient)
                    .HasColumnName("DT_REPORT_PATIENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InDwellingTesting).HasColumnName("IN_DWELLING_TESTING");

                entity.Property(e => e.InFloorCountertop).HasColumnName("IN_FLOOR_COUNTERTOP");

                entity.Property(e => e.InHighFloordust).HasColumnName("IN_HIGH_FLOORDUST");

                entity.Property(e => e.InHighPaintchip).HasColumnName("IN_HIGH_PAINTCHIP");

                entity.Property(e => e.InHighSoilsample).HasColumnName("IN_HIGH_SOILSAMPLE");

                entity.Property(e => e.InHighWatersample).HasColumnName("IN_HIGH_WATERSAMPLE");

                entity.Property(e => e.InHighWindowsill).HasColumnName("IN_HIGH_WINDOWSILL");

                entity.Property(e => e.InHighWindowwell).HasColumnName("IN_HIGH_WINDOWWELL");

                entity.Property(e => e.InHighXref).HasColumnName("IN_HIGH_XREF");

                entity.Property(e => e.InHouseholdOccupationLeadHazard).HasColumnName("IN_HOUSEHOLD_OCCUPATION_LEAD_HAZARD");

                entity.Property(e => e.InImportFirePottery).HasColumnName("IN_IMPORT_FIRE_POTTERY");

                entity.Property(e => e.InImportFood).HasColumnName("IN_IMPORT_FOOD");

                entity.Property(e => e.InImportRemedyCosmetic).HasColumnName("IN_IMPORT_REMEDY_COSMETIC");

                entity.Property(e => e.InLeadPaintHazard).HasColumnName("IN_LEAD_PAINT_HAZARD");

                entity.Property(e => e.InOtherLeadHazards).HasColumnName("IN_OTHER_LEAD_HAZARDS");

                entity.Property(e => e.InPotentialIndustryHazard).HasColumnName("IN_POTENTIAL_INDUSTRY_HAZARD");

                entity.Property(e => e.InPotentialSourceHazard).HasColumnName("IN_POTENTIAL_SOURCE_HAZARD");

                entity.Property(e => e.InPrimaryResidenceInvestigation).HasColumnName("IN_PRIMARY_RESIDENCE_INVESTIGATION");

                entity.Property(e => e.InToysJewelery).HasColumnName("IN_TOYS_JEWELERY");

                entity.Property(e => e.InVinylBlind).HasColumnName("IN_VINYL_BLIND");

                entity.Property(e => e.NmOwner)
                    .HasColumnName("NM_OWNER")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LeadExtProfile>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.IdProfile });

                entity.ToTable("LEAD_EXT_PROFILE");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.CdLanguage1)
                    .HasColumnName("CD_LANGUAGE_1")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdLanguage2)
                    .HasColumnName("CD_LANGUAGE_2")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdOriginCountry)
                    .HasColumnName("CD_ORIGIN_COUNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdRelation)
                    .HasColumnName("CD_RELATION")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsRelationOther)
                    .HasColumnName("DS_RELATION_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InForeignBorn).HasColumnName("IN_FOREIGN_BORN");

                entity.Property(e => e.InYearResBuilt).HasColumnName("IN_YEAR_RES_BUILT");

                entity.Property(e => e.NmAlias)
                    .HasColumnName("NM_ALIAS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NmGuardian)
                    .HasColumnName("NM_GUARDIAN")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.LeadExtProfile)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LEAD_EXT_PROFILE_EPI_CASE");
            });

            modelBuilder.Entity<LeadExtTest>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("LEAD_EXT_TEST");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdFundingFublt)
                    .HasColumnName("CD_FUNDING_FUBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFundingIblt)
                    .HasColumnName("CD_FUNDING_IBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdProviderTypeFublt)
                    .HasColumnName("CD_PROVIDER_TYPE_FUBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdProviderTypeIblt)
                    .HasColumnName("CD_PROVIDER_TYPE_IBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestReasonFublt)
                    .HasColumnName("CD_TEST_REASON_FUBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestReasonIblt)
                    .HasColumnName("CD_TEST_REASON_IBLT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LegionellosisExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("LEGIONELLOSIS_EXT");

                entity.HasIndex(e => e.IdDentalHist)
                    .HasName("IDX_LEGIONELLOSIS_EXT_ID_DENTAL_HIST");

                entity.HasIndex(e => e.IdWorkHospitalHist)
                    .HasName("IDX_LEGIONELLOSIS_EXT_ID_WORK_HOSPITAL_HIST");

                entity.Property(e => e.IdCase)
                    .HasColumnName("id_case")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAssociatedHealthcare)
                    .HasColumnName("CD_ASSOCIATED_HEALTHCARE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdClinicalDiagnosis)
                    .HasColumnName("CD_CLINICAL_DIAGNOSIS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAssociatedOther)
                    .HasColumnName("DS_ASSOCIATED_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsClinicalOther)
                    .HasColumnName("ds_clinical_other")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCondenser)
                    .HasColumnName("ds_condenser")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsDetachable)
                    .HasColumnName("ds_detachable")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsFountain)
                    .HasColumnName("ds_fountain")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsHottubSpa)
                    .HasColumnName("ds_hottub_spa")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsHottubSpaDates)
                    .HasColumnName("DS_HOTTUB_SPA_DATES")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsHumidifierHist)
                    .HasColumnName("DS_HUMIDIFIER_HIST")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsMistMachine)
                    .HasColumnName("ds_mist_machine")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOccupation)
                    .HasColumnName("DS_OCCUPATION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherExposures)
                    .HasColumnName("ds_other_exposures")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOutbreakName)
                    .HasColumnName("DS_OUTBREAK_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPlumbingRepair)
                    .HasColumnName("ds_plumbing_repair")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsRiskCigarettes)
                    .HasColumnName("ds_risk_cigarettes")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("dt_added")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("dt_changed")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDentalCareHist)
                    .HasColumnName("DT_DENTAL_CARE_HIST")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPlumbingRepair)
                    .HasColumnName("dt_plumbing_repair")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("id_added")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("id_changed")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdDentalHist).HasColumnName("ID_DENTAL_HIST");

                entity.Property(e => e.IdWorkHospitalHist).HasColumnName("ID_WORK_HOSPITAL_HIST");

                entity.Property(e => e.InAssistedExposure)
                    .HasColumnName("IN_ASSISTED_EXPOSURE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinicalLegionHist)
                    .HasColumnName("IN_CLINICAL_LEGION_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinicalOtherHist)
                    .HasColumnName("IN_CLINICAL_OTHER_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinicalPontiacHist)
                    .HasColumnName("IN_CLINICAL_PONTIAC_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinicalUnknownHist)
                    .HasColumnName("IN_CLINICAL_UNKNOWN_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCondenser)
                    .HasColumnName("in_condenser")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDentalHist)
                    .HasColumnName("IN_DENTAL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDetachable)
                    .HasColumnName("in_detachable")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFountain)
                    .HasColumnName("in_fountain")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHealthcareExposure)
                    .HasColumnName("IN_HEALTHCARE_EXPOSURE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHeater122f)
                    .HasColumnName("IN_HEATER_122F")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHospitalHist)
                    .HasColumnName("IN_HOSPITAL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHottubSpa)
                    .HasColumnName("in_hottub_spa")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHumidifier)
                    .HasColumnName("in_humidifier")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMistMachine)
                    .HasColumnName("in_mist_machine")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPlumbingRepair)
                    .HasColumnName("in_plumbing_repair")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPneumoniaHist)
                    .HasColumnName("IN_PNEUMONIA_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPottingSoil)
                    .HasColumnName("in_potting_soil")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReportedCdc)
                    .HasColumnName("IN_REPORTED_CDC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRespiratoryTherapy)
                    .HasColumnName("IN_RESPIRATORY_THERAPY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskAlcohol)
                    .HasColumnName("in_risk_alcohol")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskCigarettes)
                    .HasColumnName("in_risk_cigarettes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskCorticosteroids)
                    .HasColumnName("in_risk_corticosteroids")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskDiabetes)
                    .HasColumnName("in_risk_diabetes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskHeart)
                    .HasColumnName("in_risk_heart")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskImmunoConds)
                    .HasColumnName("in_risk_immuno_conds")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskImmunoTherapy)
                    .HasColumnName("in_risk_immuno_therapy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskLung)
                    .HasColumnName("in_risk_lung")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskMalignancies)
                    .HasColumnName("in_risk_malignancies")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskRenal)
                    .HasColumnName("in_risk_renal")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRiskTransplantation)
                    .HasColumnName("in_risk_transplantation")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravel)
                    .HasColumnName("in_travel")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterBottled)
                    .HasColumnName("IN_WATER_BOTTLED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterDistilled)
                    .HasColumnName("IN_WATER_DISTILLED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterOther)
                    .HasColumnName("IN_WATER_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterSterile)
                    .HasColumnName("IN_WATER_STERILE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterTap)
                    .HasColumnName("IN_WATER_TAP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterUnknown)
                    .HasColumnName("IN_WATER_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWorkHospitalHist)
                    .HasColumnName("IN_WORK_HOSPITAL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InXrayConfirmedHist)
                    .HasColumnName("IN_XRAY_CONFIRMED_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.LegionellosisExt)
                    .HasForeignKey<LegionellosisExt>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ID_CASE_LEGIONELLOSIS_EXT");

                entity.HasOne(d => d.IdDentalHistNavigation)
                    .WithMany(p => p.LegionellosisExtIdDentalHistNavigation)
                    .HasForeignKey(d => d.IdDentalHist)
                    .HasConstraintName("FK_LEGIONELLOSIS_EXT_ID_DENTAL_HIST");

                entity.HasOne(d => d.IdWorkHospitalHistNavigation)
                    .WithMany(p => p.LegionellosisExtIdWorkHospitalHistNavigation)
                    .HasForeignKey(d => d.IdWorkHospitalHist)
                    .HasConstraintName("FK_LEGIONELLOSIS_EXT_ID_WORK_HOSPITAL_HIST");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.ToTable("LOG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CdLevel)
                    .IsRequired()
                    .HasColumnName("CD_LEVEL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdProcess)
                    .IsRequired()
                    .HasColumnName("CD_PROCESS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsClassname)
                    .HasColumnName("DS_CLASSNAME")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsExceptionMessage)
                    .HasColumnName("DS_EXCEPTION_MESSAGE")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DsExceptionType)
                    .HasColumnName("DS_EXCEPTION_TYPE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsInnerException)
                    .HasColumnName("DS_INNER_EXCEPTION")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DsMessage)
                    .IsRequired()
                    .HasColumnName("DS_MESSAGE")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DsMethod)
                    .HasColumnName("DS_METHOD")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsServername)
                    .IsRequired()
                    .HasColumnName("DS_SERVERNAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSource)
                    .HasColumnName("DS_SOURCE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsStacktrace)
                    .HasColumnName("DS_STACKTRACE")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DtEvent)
                    .HasColumnName("DT_EVENT")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("ID_USER")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LoginAttempts>(entity =>
            {
                entity.HasKey(e => e.InKey);

                entity.ToTable("LOGIN_ATTEMPTS");

                entity.Property(e => e.InKey).HasColumnName("IN_KEY");

                entity.Property(e => e.DtLogin)
                    .HasColumnName("DT_LOGIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdIpAddress)
                    .IsRequired()
                    .HasColumnName("ID_IP_ADDRESS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LoincMaster>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("LOINC_MASTER");

                entity.HasIndex(e => e.CdLoinc)
                    .HasName("IDX_LOINC_MASTER_CD_LOINC");

                entity.Property(e => e.IdKey).HasColumnName("ID_KEY");

                entity.Property(e => e.CdFluHeader)
                    .HasColumnName("CD_FLU_HEADER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdGrouping)
                    .HasColumnName("CD_GROUPING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdLoinc)
                    .HasColumnName("CD_LOINC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdMerlinTestTarget)
                    .HasColumnName("CD_MERLIN_TEST_TARGET")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdMerlinTestType)
                    .HasColumnName("CD_MERLIN_TEST_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdMethodology)
                    .HasColumnName("CD_METHODOLOGY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdRsvHeader)
                    .HasColumnName("CD_RSV_HEADER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecimen)
                    .HasColumnName("CD_SPECIMEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsEHars)
                    .HasColumnName("DS_eHARS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsLoinc)
                    .HasColumnName("DS_LOINC")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InDoiflag).HasColumnName("IN_DOIFLAG");
            });

            modelBuilder.Entity<LymeExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("LYME_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCountyExposed)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY_EXPOSED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdStateExposed)
                    .IsRequired()
                    .HasColumnName("CD_STATE_EXPOSED")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsDaysOnAnti).HasColumnName("DS_DAYS_ON_ANTI");

                entity.Property(e => e.DsOtherClinical)
                    .IsRequired()
                    .HasColumnName("DS_OTHER_CLINICAL")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsSeverity)
                    .IsRequired()
                    .HasColumnName("DS_SEVERITY")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdUpdated)
                    .IsRequired()
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InCardiologic)
                    .IsRequired()
                    .HasColumnName("IN_CARDIOLOGIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDermatologic)
                    .IsRequired()
                    .HasColumnName("IN_DERMATOLOGIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHospitalized)
                    .IsRequired()
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InNeuroAntibody)
                    .IsRequired()
                    .HasColumnName("IN_NEURO_ANTIBODY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InNeuroBells)
                    .IsRequired()
                    .HasColumnName("IN_NEURO_BELLS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InNeuroCsfTested)
                    .IsRequired()
                    .HasColumnName("IN_NEURO_CSF_TESTED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InNeuroEnceph)
                    .IsRequired()
                    .HasColumnName("IN_NEURO_ENCEPH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InNeuroLymph)
                    .IsRequired()
                    .HasColumnName("IN_NEURO_LYMPH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InNeuroRadic)
                    .IsRequired()
                    .HasColumnName("IN_NEURO_RADIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPregnant)
                    .HasColumnName("IN_PREGNANT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InRheumatologic)
                    .IsRequired()
                    .HasColumnName("IN_RHEUMATOLOGIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmAntibiotic)
                    .IsRequired()
                    .HasColumnName("NM_ANTIBIOTIC")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.LymeExt)
                    .HasForeignKey<LymeExt>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LYME_IDCASE");
            });

            modelBuilder.Entity<MalariaExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("MALARIA_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmPrevillYear).HasColumnName("AM_PREVILL_YEAR");

                entity.Property(e => e.DsClinOther)
                    .HasColumnName("DS_CLIN_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsMissreasonOther)
                    .HasColumnName("DS_MISSREASON_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsMissreasonSideffect)
                    .HasColumnName("DS_MISSREASON_SIDEFFECT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherTaken)
                    .HasColumnName("DS_OTHER_TAKEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpcsOther)
                    .HasColumnName("DS_SPCS_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpmsCdcOther)
                    .HasColumnName("DS_SPMS_CDC_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTherapyOther)
                    .HasColumnName("DS_THERAPY_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTrvlOther)
                    .HasColumnName("DS_TRVL_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsUsPatientOthCntry)
                    .HasColumnName("DS_US_PATIENT_OTH_CNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsUsResideRecent)
                    .HasColumnName("DS_US_RESIDE_RECENT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsWeeksPregnant)
                    .HasColumnName("DS_WEEKS_PREGNANT")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBldtrns12mthDate)
                    .HasColumnName("DT_BLDTRNS_12MTH_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBldtrns12mthsDate)
                    .HasColumnName("DT_BLDTRNS_12MTHS_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBldtrnsIllDate)
                    .HasColumnName("DT_BLDTRNS_ILL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFatalDate)
                    .HasColumnName("DT_FATAL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPrevillDate)
                    .HasColumnName("DT_PREVILL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSpmsCdcDate)
                    .HasColumnName("DT_SPMS_CDC_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAdmitHealthFac)
                    .HasColumnName("IN_ADMIT_HEALTH_FAC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAntovaProgTaken)
                    .HasColumnName("IN_ANTOVA_PROG_TAKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InArtelume)
                    .HasColumnName("IN_ARTELUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InArtes)
                    .HasColumnName("IN_ARTES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAtovaProguanilTaken)
                    .HasColumnName("IN_ATOVA_PROGUANIL_TAKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAutoprog)
                    .HasColumnName("IN_AUTOPROG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBedNet)
                    .HasColumnName("IN_BED_NET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBldtrns12mth)
                    .HasColumnName("IN_BLDTRNS_12MTH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBldtrns12mths)
                    .HasColumnName("IN_BLDTRNS_12MTHS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBldtrnsIll)
                    .HasColumnName("IN_BLDTRNS_ILL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InChloroquineTaken)
                    .HasColumnName("IN_CHLOROQUINE_TAKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinAnemia)
                    .HasColumnName("IN_CLIN_ANEMIA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinArds)
                    .HasColumnName("IN_CLIN_ARDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinCerebral)
                    .HasColumnName("IN_CLIN_CEREBRAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinIntubated)
                    .HasColumnName("IN_CLIN_INTUBATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinNone)
                    .HasColumnName("IN_CLIN_NONE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinOther)
                    .HasColumnName("IN_CLIN_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InClinRenfail)
                    .HasColumnName("IN_CLIN_RENFAIL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDoxycyclineTaken)
                    .HasColumnName("IN_DOXYCYCLINE_TAKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHistory)
                    .HasColumnName("IN_HISTORY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHistory12mths)
                    .HasColumnName("IN_HISTORY_12MTHS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHistoryFalciparum)
                    .HasColumnName("IN_HISTORY_FALCIPARUM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHistoryKnowlesi)
                    .HasColumnName("IN_HISTORY_KNOWLESI")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHistoryMalariae)
                    .HasColumnName("IN_HISTORY_MALARIAE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHistoryNodetrm)
                    .HasColumnName("IN_HISTORY_NODETRM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHistoryOvale)
                    .HasColumnName("IN_HISTORY_OVALE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHistoryUnknown)
                    .HasColumnName("IN_HISTORY_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHistoryVivax)
                    .HasColumnName("IN_HISTORY_VIVAX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InIllFatal)
                    .HasColumnName("IN_ILL_FATAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLabSmearNeg)
                    .HasColumnName("IN_LAB_SMEAR_NEG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLabSmearNone)
                    .HasColumnName("IN_LAB_SMEAR_NONE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLabSmearPos)
                    .HasColumnName("IN_LAB_SMEAR_POS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMalchemTaken)
                    .HasColumnName("IN_MALCHEM_TAKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMaloroneTaken)
                    .HasColumnName("IN_MALORONE_TAKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMefloquineTaken)
                    .HasColumnName("IN_MEFLOQUINE_TAKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMissreasonAdvice)
                    .HasColumnName("IN_MISSREASON_ADVICE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMissreasonForgot)
                    .HasColumnName("IN_MISSREASON_FORGOT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMissreasonNoneed)
                    .HasColumnName("IN_MISSREASON_NONEED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMissreasonOther)
                    .HasColumnName("IN_MISSREASON_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMissreasonPremature)
                    .HasColumnName("IN_MISSREASON_PREMATURE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMissreasonSideffect)
                    .HasColumnName("IN_MISSREASON_SIDEFFECT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherTaken)
                    .HasColumnName("IN_OTHER_TAKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientTravel)
                    .HasColumnName("IN_PATIENT_TRAVEL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPillsDontknow)
                    .HasColumnName("IN_PILLS_DONTKNOW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPillsFewmiss)
                    .HasColumnName("IN_PILLS_FEWMISS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPillsMisslesshalf)
                    .HasColumnName("IN_PILLS_MISSLESSHALF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPillsMissmorehalf)
                    .HasColumnName("IN_PILLS_MISSMOREHALF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPillsNomiss)
                    .HasColumnName("IN_PILLS_NOMISS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPillsUnsuremiss)
                    .HasColumnName("IN_PILLS_UNSUREMISS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPregnantIll)
                    .HasColumnName("IN_PREGNANT_ILL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPreventMeasure)
                    .HasColumnName("IN_PREVENT_MEASURE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrimaquineTaken)
                    .HasColumnName("IN_PRIMAQUINE_TAKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRepellant)
                    .HasColumnName("IN_REPELLANT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpcsFalciparum)
                    .HasColumnName("IN_SPCS_FALCIPARUM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpcsKnowlesi)
                    .HasColumnName("IN_SPCS_KNOWLESI")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpcsMalariae)
                    .HasColumnName("IN_SPCS_MALARIAE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpcsNotDeterm)
                    .HasColumnName("IN_SPCS_NOT_DETERM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpcsOther)
                    .HasColumnName("IN_SPCS_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpcsOvale)
                    .HasColumnName("IN_SPCS_OVALE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpcsVivax)
                    .HasColumnName("IN_SPCS_VIVAX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpmsCdc)
                    .HasColumnName("IN_SPMS_CDC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpmsCdcBlood)
                    .HasColumnName("IN_SPMS_CDC_BLOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpmsCdcOther)
                    .HasColumnName("IN_SPMS_CDC_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpmsCdcSmear)
                    .HasColumnName("IN_SPMS_CDC_SMEAR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyArteLume)
                    .HasColumnName("IN_THERAPY_ARTE_LUME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyArtes)
                    .HasColumnName("IN_THERAPY_ARTES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyAtovaProg)
                    .HasColumnName("IN_THERAPY_ATOVA_PROG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyChloro)
                    .HasColumnName("IN_THERAPY_CHLORO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyClinda)
                    .HasColumnName("IN_THERAPY_CLINDA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyDoxy)
                    .HasColumnName("IN_THERAPY_DOXY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyExTrans)
                    .HasColumnName("IN_THERAPY_EX_TRANS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyExchange)
                    .HasColumnName("IN_THERAPY_EXCHANGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyMeflo)
                    .HasColumnName("IN_THERAPY_MEFLO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyOther)
                    .HasColumnName("IN_THERAPY_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyPrima)
                    .HasColumnName("IN_THERAPY_PRIMA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyQuinidine)
                    .HasColumnName("IN_THERAPY_QUINIDINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyQuinine)
                    .HasColumnName("IN_THERAPY_QUININE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyTetra)
                    .HasColumnName("IN_THERAPY_TETRA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTherapyUnknown)
                    .HasColumnName("IN_THERAPY_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTrvlChildSymptomatic)
                    .HasColumnName("IN_TRVL_CHILD_SYMPTOMATIC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTrvlEmergency)
                    .HasColumnName("IN_TRVL_EMERGENCY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTrvlReason)
                    .HasColumnName("IN_TRVL_REASON")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InTrvlUnknown)
                    .HasColumnName("IN_TRVL_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTrvlWithChildren)
                    .HasColumnName("IN_TRVL_WITH_CHILDREN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmHospRecNum)
                    .HasColumnName("NM_HOSP_REC_NUM")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MeaslesExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("MEASLES_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdIggResult)
                    .IsRequired()
                    .HasColumnName("CD_IGG_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdIgmResult)
                    .IsRequired()
                    .HasColumnName("CD_IGM_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdNotVacAfter1stDob)
                    .IsRequired()
                    .HasColumnName("CD_NOT_VAC_AFTER_1ST_DOB")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdNotVacB41stDob)
                    .IsRequired()
                    .HasColumnName("CD_NOT_VAC_B4_1ST_DOB")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdNotVacReason)
                    .IsRequired()
                    .HasColumnName("CD_NOT_VAC_REASON")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdOtherLabResult)
                    .IsRequired()
                    .HasColumnName("CD_OTHER_LAB_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTransmission)
                    .HasColumnName("CD_TRANSMISSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFever)
                    .IsRequired()
                    .HasColumnName("DS_FEVER")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsHospitalized)
                    .IsRequired()
                    .HasColumnName("DS_HOSPITALIZED")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsLabMethod)
                    .IsRequired()
                    .HasColumnName("DS_LAB_METHOD")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsLocation)
                    .IsRequired()
                    .HasColumnName("DS_LOCATION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOther)
                    .IsRequired()
                    .HasColumnName("DS_OTHER")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsRashDuration)
                    .IsRequired()
                    .HasColumnName("DS_RASH_DURATION")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTotalMmrAdmn)
                    .IsRequired()
                    .HasColumnName("DS_TOTAL_MMR_ADMN")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTransmission)
                    .IsRequired()
                    .HasColumnName("DS_TRANSMISSION")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAcute)
                    .HasColumnName("DT_ACUTE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtCaseInvestg)
                    .HasColumnName("DT_CASE_INVESTG")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConvalescent)
                    .HasColumnName("DT_CONVALESCENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtIgm)
                    .HasColumnName("DT_IGM")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRash)
                    .HasColumnName("DT_RASH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVac1)
                    .HasColumnName("DT_VAC_1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVac2)
                    .HasColumnName("DT_VAC_2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVac3)
                    .HasColumnName("DT_VAC_3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVac4)
                    .HasColumnName("DT_VAC_4")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InConjunct)
                    .IsRequired()
                    .HasColumnName("IN_CONJUNCT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InCoryza)
                    .IsRequired()
                    .HasColumnName("IN_CORYZA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InCough)
                    .IsRequired()
                    .HasColumnName("IN_COUGH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDeath)
                    .IsRequired()
                    .HasColumnName("IN_DEATH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDiarrhea)
                    .IsRequired()
                    .HasColumnName("IN_DIARRHEA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDoseAfter)
                    .IsRequired()
                    .HasColumnName("IN_DOSE_AFTER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDoseB4)
                    .IsRequired()
                    .HasColumnName("IN_DOSE_B4")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEncephal)
                    .IsRequired()
                    .HasColumnName("IN_ENCEPHAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEpiLinked)
                    .IsRequired()
                    .HasColumnName("IN_EPI_LINKED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InFever)
                    .IsRequired()
                    .HasColumnName("IN_FEVER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHospitalized)
                    .IsRequired()
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOther)
                    .IsRequired()
                    .HasColumnName("IN_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOtitis)
                    .IsRequired()
                    .HasColumnName("IN_OTITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPneumon)
                    .IsRequired()
                    .HasColumnName("IN_PNEUMON")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InRash)
                    .IsRequired()
                    .HasColumnName("IN_RASH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InRashGeneral)
                    .IsRequired()
                    .HasColumnName("IN_RASH_GENERAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InRashKnown)
                    .IsRequired()
                    .HasColumnName("IN_RASH_KNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InThrombo)
                    .IsRequired()
                    .HasColumnName("IN_THROMBO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTraceable)
                    .IsRequired()
                    .HasColumnName("IN_TRACEABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTravel)
                    .IsRequired()
                    .HasColumnName("IN_TRAVEL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccine)
                    .IsRequired()
                    .HasColumnName("IN_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<MeningitisExtCommon>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("MENINGITIS_EXT_COMMON");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.DsAge)
                    .IsRequired()
                    .HasColumnName("DS_AGE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAgeType)
                    .IsRequired()
                    .HasColumnName("DS_AGE_TYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsHospital)
                    .IsRequired()
                    .HasColumnName("DS_HOSPITAL")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsHospitalRm)
                    .IsRequired()
                    .HasColumnName("DS_HOSPITAL_RM")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsMedication)
                    .IsRequired()
                    .HasColumnName("DS_MEDICATION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOrganismOther)
                    .IsRequired()
                    .HasColumnName("DS_ORGANISM_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherSterile)
                    .IsRequired()
                    .HasColumnName("DS_OTHER_STERILE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsSsIsolatedOther)
                    .IsRequired()
                    .HasColumnName("DS_SS_ISOLATED_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsXray)
                    .IsRequired()
                    .HasColumnName("DS_XRAY")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtAdmitted)
                    .HasColumnName("DT_ADMITTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDischarged)
                    .HasColumnName("DT_DISCHARGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFirstPostCult)
                    .HasColumnName("DT_FIRST_POST_CULT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InCellulitis)
                    .IsRequired()
                    .HasColumnName("IN_CELLULITIS")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InConjunct)
                    .IsRequired()
                    .HasColumnName("IN_CONJUNCT")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDeath)
                    .IsRequired()
                    .HasColumnName("IN_DEATH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEpiglottitis)
                    .IsRequired()
                    .HasColumnName("IN_EPIGLOTTITIS")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHospital)
                    .IsRequired()
                    .HasColumnName("IN_HOSPITAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InIsolatedBlood)
                    .IsRequired()
                    .HasColumnName("IN_ISOLATED_BLOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InIsolatedCsf)
                    .IsRequired()
                    .HasColumnName("IN_ISOLATED_CSF")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InIsolatedJoint)
                    .IsRequired()
                    .HasColumnName("IN_ISOLATED_JOINT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InIsolatedPericardial)
                    .IsRequired()
                    .HasColumnName("IN_ISOLATED_PERICARDIAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InIsolatedPeritoneal)
                    .IsRequired()
                    .HasColumnName("IN_ISOLATED_PERITONEAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InIsolatedPlacenta)
                    .IsRequired()
                    .HasColumnName("IN_ISOLATED_PLACENTA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InIsolatedPleural)
                    .IsRequired()
                    .HasColumnName("IN_ISOLATED_PLEURAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMeningitis)
                    .IsRequired()
                    .HasColumnName("IN_MENINGITIS")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOrganismOther)
                    .IsRequired()
                    .HasColumnName("IN_ORGANISM_OTHER")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOtitis)
                    .IsRequired()
                    .HasColumnName("IN_OTITIS")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPericarditis)
                    .IsRequired()
                    .HasColumnName("IN_PERICARDITIS")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPeritonitis)
                    .IsRequired()
                    .HasColumnName("IN_PERITONITIS")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPneumonia)
                    .IsRequired()
                    .HasColumnName("IN_PNEUMONIA")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPrimBacteram)
                    .IsRequired()
                    .HasColumnName("IN_PRIM_BACTERAM")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InSepticArthritis)
                    .IsRequired()
                    .HasColumnName("IN_SEPTIC_ARTHRITIS")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InSsIsolatedOther)
                    .IsRequired()
                    .HasColumnName("IN_SS_ISOLATED_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<MeningitisExtHflue>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("MENINGITIS_EXT_HFLUE");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdSerotype)
                    .HasColumnName("CD_SEROTYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdVaccineDose1)
                    .HasColumnName("CD_VACCINE_DOSE1")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdVaccineDose2)
                    .HasColumnName("CD_VACCINE_DOSE2")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdVaccineDose3)
                    .HasColumnName("CD_VACCINE_DOSE3")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdVaccineDose4)
                    .HasColumnName("CD_VACCINE_DOSE4")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsLotNbrDose1)
                    .HasColumnName("DS_LOT_NBR_DOSE1")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsLotNbrDose2)
                    .HasColumnName("DS_LOT_NBR_DOSE2")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsLotNbrDose3)
                    .HasColumnName("DS_LOT_NBR_DOSE3")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsLotNbrDose4)
                    .HasColumnName("DS_LOT_NBR_DOSE4")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherVac1)
                    .HasColumnName("DS_OTHER_VAC_1")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherVac2)
                    .HasColumnName("DS_OTHER_VAC_2")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherVac3)
                    .HasColumnName("DS_OTHER_VAC_3")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherVac4)
                    .HasColumnName("DS_OTHER_VAC_4")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsSerotypeOther)
                    .HasColumnName("DS_SEROTYPE_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHflueDose1)
                    .HasColumnName("DT_HFLUE_DOSE1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHflueDose2)
                    .HasColumnName("DT_HFLUE_DOSE2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHflueDose3)
                    .HasColumnName("DT_HFLUE_DOSE3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHflueDose4)
                    .HasColumnName("DT_HFLUE_DOSE4")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAmpicillin)
                    .HasColumnName("IN_AMPICILLIN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InChloramph)
                    .HasColumnName("IN_CHLORAMPH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHaemoFlue)
                    .HasColumnName("IN_HAEMO_FLUE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InRifampin)
                    .HasColumnName("IN_RIFAMPIN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InSentToStateLab)
                    .HasColumnName("IN_SENT_TO_STATE_LAB")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<MeningitisExtNeisseria>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("MENINGITIS_EXT_NEISSERIA");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdSerogroup)
                    .HasColumnName("CD_SEROGROUP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsSerogroupOther)
                    .HasColumnName("DS_SEROGROUP_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InRifampin)
                    .HasColumnName("IN_RIFAMPIN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InSentToStateLab)
                    .HasColumnName("IN_SENT_TO_STATE_LAB")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InSulfa)
                    .HasColumnName("IN_SULFA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<MeningococcalExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("MENINGOCOCCAL_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCaseLevelSerogroup)
                    .HasColumnName("CD_CASE_LEVEL_SEROGROUP")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerogroupHist)
                    .HasColumnName("CD_SEROGROUP_HIST")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsSerogroupOtherHist)
                    .HasColumnName("DS_SEROGROUP_OTHER_HIST")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAttendingCollege)
                    .HasColumnName("IN_ATTENDING_COLLEGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMeningococcalVaccine)
                    .HasColumnName("IN_MENINGOCOCCAL_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRifampin)
                    .HasColumnName("IN_RIFAMPIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSentToStateLab)
                    .HasColumnName("IN_SENT_TO_STATE_LAB")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSulfa)
                    .HasColumnName("IN_SULFA")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MumpsRubellaExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("MUMPS_RUBELLA_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdGestatio)
                    .IsRequired()
                    .HasColumnName("CD_GESTATIO")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdIggResult)
                    .IsRequired()
                    .HasColumnName("CD_IGG_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdIgmResult)
                    .IsRequired()
                    .HasColumnName("CD_IGM_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdOtherLabResult)
                    .IsRequired()
                    .HasColumnName("CD_OTHER_LAB_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTransmission)
                    .HasColumnName("CD_TRANSMISSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdVacReason)
                    .IsRequired()
                    .HasColumnName("CD_VAC_REASON")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAgeSerolTest)
                    .IsRequired()
                    .HasColumnName("DS_AGE_SEROL_TEST")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsFever)
                    .IsRequired()
                    .HasColumnName("DS_FEVER")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsHospitalized)
                    .IsRequired()
                    .HasColumnName("DS_HOSPITALIZED")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsLabMethod)
                    .IsRequired()
                    .HasColumnName("DS_LAB_METHOD")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOther)
                    .IsRequired()
                    .HasColumnName("DS_OTHER")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsRashDuration)
                    .IsRequired()
                    .HasColumnName("DS_RASH_DURATION")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsRubellaAge)
                    .IsRequired()
                    .HasColumnName("DS_RUBELLA_AGE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTransmission)
                    .IsRequired()
                    .HasColumnName("DS_TRANSMISSION")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsYrRubella)
                    .IsRequired()
                    .HasColumnName("DS_YR_RUBELLA")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsYrSerolTest)
                    .IsRequired()
                    .HasColumnName("DS_YR_SEROL_TEST")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAcute)
                    .HasColumnName("DT_ACUTE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtCaseInvesting)
                    .HasColumnName("DT_CASE_INVESTING")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConvalescent)
                    .HasColumnName("DT_CONVALESCENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDose1)
                    .HasColumnName("DT_DOSE_1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDose2)
                    .HasColumnName("DT_DOSE_2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDose3)
                    .HasColumnName("DT_DOSE_3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDose4)
                    .HasColumnName("DT_DOSE_4")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtIgg)
                    .HasColumnName("DT_IGG")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtIgm)
                    .HasColumnName("DT_IGM")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRash)
                    .HasColumnName("DT_RASH")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InArthralg)
                    .IsRequired()
                    .HasColumnName("IN_ARTHRALG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InArthritic)
                    .IsRequired()
                    .HasColumnName("IN_ARTHRITIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InConjunct)
                    .IsRequired()
                    .HasColumnName("IN_CONJUNCT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDeafness)
                    .IsRequired()
                    .HasColumnName("IN_DEAFNESS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDeath)
                    .IsRequired()
                    .HasColumnName("IN_DEATH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDoseAfter)
                    .IsRequired()
                    .HasColumnName("IN_DOSE_AFTER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEncephal)
                    .IsRequired()
                    .HasColumnName("IN_ENCEPHAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEpiLinked)
                    .IsRequired()
                    .HasColumnName("IN_EPI_LINKED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InFever)
                    .IsRequired()
                    .HasColumnName("IN_FEVER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHospitalized)
                    .IsRequired()
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InLymphade)
                    .IsRequired()
                    .HasColumnName("IN_LYMPHADE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMeningitis)
                    .IsRequired()
                    .HasColumnName("IN_MENINGITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOrchitis)
                    .IsRequired()
                    .HasColumnName("IN_ORCHITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOther)
                    .IsRequired()
                    .HasColumnName("IN_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InParotitis)
                    .IsRequired()
                    .HasColumnName("IN_PAROTITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPregnant)
                    .IsRequired()
                    .HasColumnName("IN_PREGNANT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPrevRubella)
                    .IsRequired()
                    .HasColumnName("IN_PREV_RUBELLA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPriorImmunity)
                    .IsRequired()
                    .HasColumnName("IN_PRIOR_IMMUNITY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InRash)
                    .IsRequired()
                    .HasColumnName("IN_RASH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InThrombo)
                    .IsRequired()
                    .HasColumnName("IN_THROMBO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccine)
                    .IsRequired()
                    .HasColumnName("IN_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<MyprofileDashboardPosition>(entity =>
            {
                entity.HasKey(e => e.IdUser);

                entity.ToTable("MYPROFILE_DASHBOARD_POSITION");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DsBtn1)
                    .HasColumnName("DS_BTN1")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DsBtn2)
                    .HasColumnName("DS_BTN2")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DsBtn3)
                    .HasColumnName("DS_BTN3")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DsBtn4)
                    .HasColumnName("DS_BTN4")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DsBtn5)
                    .HasColumnName("DS_BTN5")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DsBtn6)
                    .HasColumnName("DS_BTN6")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DsBtn7)
                    .HasColumnName("DS_BTN7")
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DsBtn8)
                    .HasColumnName("DS_BTN8")
                    .HasMaxLength(5000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NextNumber>(entity =>
            {
                entity.HasKey(e => e.CdNextType);

                entity.ToTable("NEXT_NUMBER");

                entity.Property(e => e.CdNextType)
                    .HasColumnName("CD_NEXT_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AmNextNumber)
                    .HasColumnName("AM_NEXT_NUMBER")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ObservationCatalog>(entity =>
            {
                entity.HasKey(e => e.IdCatalog);

                entity.ToTable("OBSERVATION_CATALOG");

                entity.Property(e => e.IdCatalog).HasColumnName("ID_CATALOG");

                entity.Property(e => e.DsAccession)
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsOutcomeNote)
                    .HasColumnName("DS_OUTCOME_NOTE")
                    .HasMaxLength(1000);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('SYSTEM')");

                entity.Property(e => e.IdAlias).HasColumnName("ID_ALIAS");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('SYSTEM')");

                entity.Property(e => e.IdElrObservation).HasColumnName("ID_ELR_OBSERVATION");

                entity.Property(e => e.IdFamily)
                    .HasColumnName("ID_FAMILY");

                entity.Property(e => e.IdLrv).HasColumnName("ID_LRV");

                entity.Property(e => e.IdAutoScenario)
                    .HasColumnName("ID_AUTO_SCENARIO");

                entity.HasOne(d => d.IdFamilyNavigation)
                    .WithMany(p => p.ObservationCatalog)
                    .HasForeignKey(d => d.IdFamily)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OBSERVATION_CATALOG_FAMILY");
            });

            modelBuilder.Entity<Outbreak>(entity =>
            {
                entity.HasKey(e => e.IdOutbreak)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("OUTBREAK");

                entity.Property(e => e.IdOutbreak)
                    .HasColumnName("ID_OUTBREAK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmAge1019).HasColumnName("AM_AGE_10_19");

                entity.Property(e => e.AmAge14).HasColumnName("AM_AGE_1_4");

                entity.Property(e => e.AmAge2049).HasColumnName("AM_AGE_20_49");

                entity.Property(e => e.AmAge5074).HasColumnName("AM_AGE_50_74");

                entity.Property(e => e.AmAge59).HasColumnName("AM_AGE_5_9");

                entity.Property(e => e.AmAgeGreater74).HasColumnName("AM_AGE_GREATER_74");

                entity.Property(e => e.AmAgeLess1).HasColumnName("AM_AGE_LESS_1");

                entity.Property(e => e.AmAgeUnknown).HasColumnName("AM_AGE_UNKNOWN");

                entity.Property(e => e.AmDied).HasColumnName("AM_DIED");

                entity.Property(e => e.AmErVisit).HasColumnName("AM_ER_VISIT");

                entity.Property(e => e.AmEstimatedIll).HasColumnName("AM_ESTIMATED_ILL");

                entity.Property(e => e.AmFemale).HasColumnName("AM_FEMALE");

                entity.Property(e => e.AmGenderUnknown).HasColumnName("AM_GENDER_UNKNOWN");

                entity.Property(e => e.AmHospitalization).HasColumnName("AM_HOSPITALIZATION");

                entity.Property(e => e.AmLabConfirmed).HasColumnName("AM_LAB_CONFIRMED");

                entity.Property(e => e.AmMale).HasColumnName("AM_MALE");

                entity.Property(e => e.AmMedianDuration).HasColumnName("AM_MEDIAN_DURATION");

                entity.Property(e => e.AmNonStaffCases).HasColumnName("AM_NON_STAFF_CASES");

                entity.Property(e => e.AmNonStaffExposed).HasColumnName("AM_NON_STAFF_EXPOSED");

                entity.Property(e => e.AmPeopleAffected)
                    .IsRequired()
                    .HasColumnName("AM_PEOPLE_AFFECTED")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AmSoughtHealthcare).HasColumnName("AM_SOUGHT_HEALTHCARE");

                entity.Property(e => e.AmStaffCases).HasColumnName("AM_STAFF_CASES");

                entity.Property(e => e.AmStaffExposed).HasColumnName("AM_STAFF_EXPOSED");

                entity.Property(e => e.AmTotalCases).HasColumnName("AM_TOTAL_CASES");

                entity.Property(e => e.AmTotalExposed).HasColumnName("AM_TOTAL_EXPOSED");

                entity.Property(e => e.AmUnknownCases).HasColumnName("AM_UNKNOWN_CASES");

                entity.Property(e => e.AmUnknownExposed).HasColumnName("AM_UNKNOWN_EXPOSED");

                entity.Property(e => e.AmWithInfoDied).HasColumnName("AM_WITH_INFO_DIED");

                entity.Property(e => e.AmWithInfoErVisit).HasColumnName("AM_WITH_INFO_ER_VISIT");

                entity.Property(e => e.AmWithInfoHospitalization).HasColumnName("AM_WITH_INFO_HOSPITALIZATION");

                entity.Property(e => e.AmWithInfoSought).HasColumnName("AM_WITH_INFO_SOUGHT");

                entity.Property(e => e.CdClosureReason)
                    .HasColumnName("CD_CLOSURE_REASON")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCountyInitiating)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY_INITIATING")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdEventType)
                    .HasColumnName("CD_EVENT_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .IsRequired()
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdMedianDurationUnit)
                    .HasColumnName("CD_MEDIAN_DURATION_UNIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdModeTransmission)
                    .IsRequired()
                    .HasColumnName("CD_MODE_TRANSMISSION")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdOrganism)
                    .IsRequired()
                    .HasColumnName("CD_ORGANISM")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdOutbreakCounty)
                    .HasColumnName("CD_OUTBREAK_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutbreakType)
                    .IsRequired()
                    .HasColumnName("CD_OUTBREAK_TYPE")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdRecommendationsHow)
                    .HasColumnName("CD_RECOMMENDATIONS_HOW")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReporterType)
                    .HasColumnName("CD_REPORTER_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdReviewStatus)
                    .HasColumnName("CD_REVIEW_STATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerogroup)
                    .IsRequired()
                    .HasColumnName("CD_SEROGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdSpecies)
                    .IsRequired()
                    .HasColumnName("CD_SPECIES")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdStatus)
                    .IsRequired()
                    .HasColumnName("CD_STATUS")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdSyndromes)
                    .IsRequired()
                    .HasColumnName("CD_SYNDROMES")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsDiseaseHazardOther)
                    .HasColumnName("DS_DISEASE_HAZARD_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsEpicomPost)
                    .HasColumnName("DS_EPICOM_POST")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsMultiCountry)
                    .HasColumnName("DS_MULTI_COUNTRY")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsMultiCounty)
                    .HasColumnName("DS_MULTI_COUNTY")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsMultiState)
                    .HasColumnName("DS_MULTI_STATE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfge)
                    .IsRequired()
                    .HasColumnName("DS_PFGE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsProviderPhn)
                    .IsRequired()
                    .HasColumnName("DS_PROVIDER_PHN")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsReason)
                    .HasColumnName("DS_REASON")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsReporterPhn)
                    .IsRequired()
                    .HasColumnName("DS_REPORTER_PHN")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsStateConsulted)
                    .HasColumnName("DS_STATE_CONSULTED")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsSyndromeOther)
                    .HasColumnName("DS_SYNDROME_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsVehicleFw)
                    .HasColumnName("DS_VEHICLE_FW")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsVehicleHai)
                    .HasColumnName("DS_VEHICLE_HAI")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChdNotified)
                    .HasColumnName("DT_CHD_NOTIFIED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtClosed)
                    .HasColumnName("DT_CLOSED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtClosureReason)
                    .HasColumnName("DT_CLOSURE_REASON")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEarliestExposure)
                    .HasColumnName("DT_EARLIEST_EXPOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEarliestOnset)
                    .HasColumnName("DT_EARLIEST_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInvestigated)
                    .HasColumnName("DT_INVESTIGATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLastExposure)
                    .HasColumnName("DT_LAST_EXPOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLastOnset)
                    .HasColumnName("DT_LAST_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOutbreakEvent)
                    .HasColumnName("DT_OUTBREAK_EVENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReview)
                    .HasColumnName("DT_REVIEW")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStatus)
                    .HasColumnName("DT_STATUS")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdEpicomPending).HasColumnName("ID_EPICOM_PENDING");

                entity.Property(e => e.IdEpicomPost).HasColumnName("ID_EPICOM_POST");

                entity.Property(e => e.IdReviewer)
                    .HasColumnName("ID_REVIEWER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InExcludeActive).HasColumnName("IN_EXCLUDE_ACTIVE");

                entity.Property(e => e.InFoodWater)
                    .HasColumnName("IN_FOOD_WATER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InHealthcare)
                    .HasColumnName("IN_HEALTHCARE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InImplemented)
                    .HasColumnName("IN_IMPLEMENTED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InInternalAction)
                    .HasColumnName("IN_INTERNAL_ACTION")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InInvestigated)
                    .HasColumnName("IN_INVESTIGATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InLabConducted)
                    .HasColumnName("IN_LAB_CONDUCTED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InLabConfirmed)
                    .HasColumnName("IN_LAB_CONFIRMED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InLabConfirmedFood)
                    .HasColumnName("IN_LAB_CONFIRMED_FOOD")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InMultiCounty)
                    .HasColumnName("IN_MULTI_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InMultiState)
                    .HasColumnName("IN_MULTI_STATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InOutbreak)
                    .HasColumnName("IN_OUTBREAK")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InPreCods).HasColumnName("IN_PRE_CODS");

                entity.Property(e => e.InRecommendations)
                    .HasColumnName("IN_RECOMMENDATIONS")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InSurveillance).HasColumnName("IN_SURVEILLANCE");

                entity.Property(e => e.InSurvey).HasColumnName("IN_SURVEY");

                entity.Property(e => e.InVehicleFw)
                    .HasColumnName("IN_VEHICLE_FW")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InVehicleHai)
                    .HasColumnName("IN_VEHICLE_HAI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmInvestigator)
                    .IsRequired()
                    .HasColumnName("NM_INVESTIGATOR")
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NmOutbreak)
                    .HasColumnName("NM_OUTBREAK")
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NmProvider)
                    .IsRequired()
                    .HasColumnName("NM_PROVIDER")
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NmReporter)
                    .IsRequired()
                    .HasColumnName("NM_REPORTER")
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdVehicleIdentified)
                   .HasColumnName("CD_VEHICLE_IDENTIFIED")
                   .HasMaxLength(20)
                   .IsUnicode(false);

                entity.Property(e => e.CdTotalCaseType)
                   .HasColumnName("CD_TOTAL_CASE_TYPE")
                   .HasMaxLength(50)
                   .IsUnicode(false);

                entity.Property(e => e.CdErDeptVisitsType)
                    .HasColumnName("CD_ER_DEPT_VISITS_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdInpatientHosptialType)
                    .HasColumnName("CD_INPATIENT_HOSPITAL_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdDeathsType)
                    .HasColumnName("CD_DEATHS_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AmErDeptVisits)
                    .HasColumnName("AM_ER_DEPT_VISITS")
                    .IsRequired(false);
                

                entity.Property(e => e.AmInpatientHospital)
                    .HasColumnName("AM_INPATIENT_HOSPITAL")
                    .IsRequired(false);

                entity.Property(e => e.AmDeaths)
                    .HasColumnName("AM_DEATHS")
                    .IsRequired(false);

            });

            modelBuilder.Entity<OutbreakAdditionalQuestions>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("OUTBREAK_ADDITIONAL_QUESTIONS");

                entity.Property(e => e.IdKey).HasColumnName("ID_KEY");

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsLocAddress)
                    .HasColumnName("DS_LOC_ADDRESS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsLocName)
                    .HasColumnName("DS_LOC_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBegin)
                    .HasColumnName("DT_BEGIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("DT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdPerson).HasColumnName("ID_PERSON");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");
            });

            modelBuilder.Entity<OutbreakAggregate>(entity =>
            {
                entity.HasKey(e => new { e.IdAggregate, e.IdOutbreak });

                entity.ToTable("OUTBREAK_AGGREGATE");

                entity.Property(e => e.IdAggregate)
                    .HasColumnName("ID_AGGREGATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.AmCases).HasColumnName("AM_CASES");

                entity.Property(e => e.AmDeaths).HasColumnName("AM_DEATHS");

                entity.Property(e => e.AmDxConfirmed).HasColumnName("AM_DX_CONFIRMED");

                entity.Property(e => e.AmDxProbable).HasColumnName("AM_DX_PROBABLE");

                entity.Property(e => e.AmDxSuspect).HasColumnName("AM_DX_SUSPECT");

                entity.Property(e => e.AmExposed).HasColumnName("AM_EXPOSED");

                entity.Property(e => e.AmHospitalized).HasColumnName("AM_HOSPITALIZED");

                entity.Property(e => e.AmPeople).HasColumnName("AM_PEOPLE");

                entity.Property(e => e.AmProphylaxed).HasColumnName("AM_PROPHYLAXED");

                entity.Property(e => e.DsAggregate)
                    .HasColumnName("DS_AGGREGATE")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmAggregate)
                    .HasColumnName("NM_AGGREGATE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdOutbreakNavigation)
                    .WithMany(p => p.OutbreakAggregate)
                    .HasForeignKey(d => d.IdOutbreak)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OUTBREAK_AGGREGATE_ID_OUTBREAK");
            });

            modelBuilder.Entity<OutbreakCluster>(entity =>
            {
                entity.HasKey(e => e.InKey);

                entity.ToTable("OUTBREAK_CLUSTER");

                entity.Property(e => e.InKey).HasColumnName("IN_KEY");

                entity.Property(e => e.CdOutbreakCluster)
                    .IsRequired()
                    .HasColumnName("CD_OUTBREAK_CLUSTER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmOutbreakCluster)
                    .IsRequired()
                    .HasColumnName("NM_OUTBREAK_CLUSTER")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakClusterRule>(entity =>
            {
                entity.HasKey(e => new { e.CdOutbreakCluster, e.CdCounty });

                entity.ToTable("OUTBREAK_CLUSTER_RULE");

                entity.Property(e => e.CdOutbreakCluster)
                    .HasColumnName("CD_OUTBREAK_CLUSTER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.AmNoOfCases).HasColumnName("AM_NO_OF_CASES");

                entity.Property(e => e.AmPeriodDays).HasColumnName("AM_PERIOD_DAYS");
            });

            modelBuilder.Entity<OutbreakColumnsShow>(entity =>
            {
                entity.HasKey(e => e.IdColumn);

                entity.ToTable("OUTBREAK_COLUMNS_SHOW");

                entity.Property(e => e.IdColumn)
                    .HasColumnName("ID_COLUMN")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdType)
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClnJoin)
                    .HasColumnName("CLN_JOIN")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.InDefault).HasColumnName("IN_DEFAULT");

                entity.Property(e => e.NmColumn)
                    .HasColumnName("NM_COLUMN")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RealColumn)
                    .HasColumnName("REAL_COLUMN")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TableJoin)
                    .HasColumnName("TABLE_JOIN")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakContactRelation>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdPrimary, e.IdContact });

                entity.ToTable("OUTBREAK_CONTACT_RELATION");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdPrimary).HasColumnName("ID_PRIMARY");

                entity.Property(e => e.IdContact).HasColumnName("ID_CONTACT");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakDocument>(entity =>
            {
                entity.HasKey(e => e.IdEpiDocument);

                entity.ToTable("OUTBREAK_DOCUMENT");

                entity.Property(e => e.IdEpiDocument)
                    .HasColumnName("ID_EPI_DOCUMENT")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdEpiDocumentType)
                    .HasColumnName("CD_EPI_DOCUMENT_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsDesc)
                    .HasColumnName("DS_DESC")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEpiDocument)
                    .HasColumnName("DT_EPI_DOCUMENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.NmFile)
                    .HasColumnName("NM_FILE")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakEnvironmental>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdSequence });

                entity.ToTable("OUTBREAK_ENVIRONMENTAL");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.AmQuantity).HasColumnName("AM_QUANTITY");

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdDispositionEnviron)
                    .IsRequired()
                    .HasColumnName("CD_DISPOSITION_ENVIRON")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdState)
                    .IsRequired()
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsAddress)
                    .IsRequired()
                    .HasColumnName("DS_ADDRESS")
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsCity)
                    .IsRequired()
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsDescription)
                    .IsRequired()
                    .HasColumnName("DS_DESCRIPTION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsNote)
                    .IsRequired()
                    .HasColumnName("DS_NOTE")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsTypeEnviron)
                    .IsRequired()
                    .HasColumnName("DS_TYPE_ENVIRON")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsZip)
                    .IsRequired()
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDisposition)
                    .HasColumnName("DT_DISPOSITION")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdSetting).HasColumnName("ID_SETTING");
            });

            modelBuilder.Entity<OutbreakEpilinkRelation>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdPrimary, e.IdLabElec });

                entity.ToTable("OUTBREAK_EPILINK_RELATION");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdPrimary).HasColumnName("ID_PRIMARY");

                entity.Property(e => e.IdLabElec).HasColumnName("ID_LAB_ELEC");

                entity.Property(e => e.CdEpilinkReason)
                    .HasColumnName("CD_EPILINK_REASON")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakEvents>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("OUTBREAK_EVENTS");

                entity.Property(e => e.IdKey).HasColumnName("ID_KEY");

                entity.Property(e => e.CdEventType)
                    .IsRequired()
                    .HasColumnName("CD_EVENT_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdSubType)
                    .HasColumnName("CD_SUB_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsDesc)
                    .IsRequired()
                    .HasColumnName("DS_DESC")
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEvent)
                    .HasColumnName("DT_EVENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdEvent).HasColumnName("ID_EVENT");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.HasOne(d => d.IdOutbreakNavigation)
                    .WithMany(p => p.OutbreakEvents)
                    .HasForeignKey(d => d.IdOutbreak)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OUTBREAK_EVENTS_ID_OUTBREAK");
            });

            modelBuilder.Entity<OutbreakLab>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdLabTest });

                entity.ToTable("OUTBREAK_LAB");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdLabTest).HasColumnName("ID_LAB_TEST");

                entity.Property(e => e.DsLabTest)
                    .HasColumnName("DS_LAB_TEST")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");
            });

            modelBuilder.Entity<OutbreakLabElrKin>(entity =>
            {
                entity.HasKey(e => e.KinKey);

                entity.ToTable("OUTBREAK_LAB_ELR_KIN");

                entity.Property(e => e.ContactOrgName)
                    .HasColumnName("Contact_Org_Name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPerson)
                    .HasColumnName("Contact_Org_Person")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonAddress1)
                    .HasColumnName("Contact_Org_Person_Address1")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonAddress2)
                    .HasColumnName("Contact_Org_Person_Address2")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonCity)
                    .HasColumnName("Contact_Org_Person_City")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonCountry)
                    .HasColumnName("Contact_Org_Person_Country")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonEmail)
                    .HasColumnName("Contact_Org_Person_email")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonPhone)
                    .HasColumnName("Contact_Org_Person_Phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonState)
                    .HasColumnName("Contact_Org_Person_State")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactOrgPersonZip)
                    .HasColumnName("Contact_Org_Person_ZIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdOutbreakLab).HasColumnName("ID_OUTBREAK_LAB");

                entity.Property(e => e.KinAddress1)
                    .HasColumnName("Kin_Address_1")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KinAddress2)
                    .HasColumnName("Kin_Address_2")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.KinCity)
                    .HasColumnName("Kin_City")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KinCountry)
                    .HasColumnName("Kin_Country")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KinEmail)
                    .HasColumnName("Kin_email")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KinName)
                    .HasColumnName("Kin_Name")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.KinPhoneNumber)
                    .HasColumnName("Kin_Phone_Number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KinRelationship)
                    .HasColumnName("Kin_Relationship")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KinState)
                    .HasColumnName("Kin_State")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KinZip)
                    .HasColumnName("Kin_ZIP")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakLabElrOrder>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("OUTBREAK_LAB_ELR_ORDER");

                entity.Property(e => e.IdKey).HasColumnName("ID_KEY");

                entity.Property(e => e.IdLabOutbreak).HasColumnName("ID_LAB_OUTBREAK");

                entity.Property(e => e.MessageDateTime).HasColumnType("datetime");

                entity.Property(e => e.OrderAlternateCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderAlternateDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrderCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrderIcd9codes)
                    .HasColumnName("OrderICD9Codes")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRequestedDateTime).HasColumnType("datetime");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpecimenCollectedDateTime).HasColumnType("datetime");

                entity.Property(e => e.SpecimenReceivedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OutbreakLabElrPatvisit>(entity =>
            {
                entity.HasKey(e => e.PatVisitKey);

                entity.ToTable("OUTBREAK_LAB_ELR_PATVISIT");

                entity.Property(e => e.AdmissionType)
                    .HasColumnName("Admission_Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmitDateTime)
                    .HasColumnName("Admit_DateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.AdmitLevelOfCareCode)
                    .HasColumnName("Admit_Level_of_Care_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmitReason)
                    .HasColumnName("Admit_Reason")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmitSource)
                    .HasColumnName("Admit_Source")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmittingDoctorId)
                    .HasColumnName("Admitting_Doctor_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdmittingDoctorName)
                    .HasColumnName("Admitting_Doctor_Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientBed)
                    .HasColumnName("Assigned_Patient_Bed")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientBuilding)
                    .HasColumnName("Assigned_Patient_Building")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientFacility)
                    .HasColumnName("Assigned_Patient_Facility")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientFloor)
                    .HasColumnName("Assigned_Patient_Floor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientLocationDescrip)
                    .HasColumnName("Assigned_Patient_Location_Descrip")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientLocationStatus)
                    .HasColumnName("Assigned_Patient_Location_Status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientPointOfCare)
                    .HasColumnName("Assigned_Patient_Point_of_Care")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedPatientRoom)
                    .HasColumnName("Assigned_Patient_Room")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AttendingDoctorId)
                    .HasColumnName("Attending_Doctor_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AttendingDoctorName)
                    .HasColumnName("Attending_Doctor_Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClinicOrganizationName)
                    .HasColumnName("Clinic_Organization_Name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConsultingDoctorId)
                    .HasColumnName("Consulting_Doctor_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsultingDoctorName)
                    .HasColumnName("Consulting_Doctor_Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DischargeDateTime)
                    .HasColumnName("Discharge_DateTime")
                    .HasColumnType("datetime");

                entity.Property(e => e.DischargeDisposition)
                    .HasColumnName("Discharge_Disposition")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DischargedToLocation)
                    .HasColumnName("Discharged_to_Location")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DischargedToLocationDtm)
                    .HasColumnName("Discharged_to_Location_DTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmploymentRelatedIllness)
                    .HasColumnName("Employment_Related_Illness")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstSimilarIllnessDate)
                    .HasColumnName("First_Similar_Illness_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HospitalService)
                    .HasColumnName("Hospital_Service")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdOutbreakLab).HasColumnName("ID_OUTBREAK_LAB");

                entity.Property(e => e.PatientClass)
                    .HasColumnName("Patient_Class")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PatientType)
                    .HasColumnName("Patient_Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PersonLocationType)
                    .HasColumnName("Person_Location_Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReferringDoctorId)
                    .HasColumnName("Referring_Doctor_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReferringDoctorName)
                    .HasColumnName("Referring_Doctor_Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ServicingFacility)
                    .HasColumnName("Servicing_Facility")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VisitNumber)
                    .HasColumnName("Visit_Number")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakLabElrSpecimen>(entity =>
            {
                entity.HasKey(e => e.Spmkey);

                entity.ToTable("OUTBREAK_LAB_ELR_SPECIMEN");

                entity.Property(e => e.Spmkey).HasColumnName("SPMKey");

                entity.Property(e => e.AltSpmCollectMethodCode)
                    .HasColumnName("Alt_SPM_Collect_Method_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmCollectMethodDesc)
                    .HasColumnName("Alt_SPM_Collect_Method_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmConditionCode)
                    .HasColumnName("Alt_SPM_Condition_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmConditionDesc)
                    .HasColumnName("Alt_SPM_Condition_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoCollectMethodCode)
                    .HasColumnName("Alt_SPM_two_Collect_Method_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoCollectMethodDesc)
                    .HasColumnName("Alt_SPM_two_Collect_Method_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoConditionCode)
                    .HasColumnName("Alt_SPM_two_Condition_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoConditionDesc)
                    .HasColumnName("Alt_SPM_two_Condition_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoTypeCode)
                    .HasColumnName("Alt_SPM_two_Type_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTwoTypeDesc)
                    .HasColumnName("Alt_SPM_two_Type_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTypeCode)
                    .HasColumnName("Alt_SPM_Type_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AltSpmTypeDesc)
                    .HasColumnName("Alt_SPM_Type_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DtSpmCollected)
                    .HasColumnName("DT_SPM_Collected")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSpmReceived)
                    .HasColumnName("DT_SPM_Received")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdLabOutbreak).HasColumnName("ID_LAB_OUTBREAK");

                entity.Property(e => e.InsertedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderSpecimenTypeCode)
                    .HasColumnName("ORDER_SpecimenTypeCode")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrderSpecimenTypeName)
                    .HasColumnName("ORDER_SpecimenTypeName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpmCollectMethodCode)
                    .HasColumnName("SPM_Collect_Method_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpmCollectMethodDesc)
                    .HasColumnName("SPM_Collect_Method_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmCollectText)
                    .HasColumnName("SPM_Collect_text")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmConditionCode)
                    .HasColumnName("SPM_Condition_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpmConditionDesc)
                    .HasColumnName("SPM_Condition_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmConditionText)
                    .HasColumnName("SPM_Condition_Text")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmId1)
                    .HasColumnName("SPM_ID1")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmId2)
                    .HasColumnName("SPM_ID2")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmTypeCode)
                    .HasColumnName("SPM_Type_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpmTypeDescrip)
                    .HasColumnName("SPM_Type_Descrip")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpmTypeText)
                    .HasColumnName("SPM_Type_Text")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakLabResults>(entity =>
            {
                entity.HasKey(e => e.IdLabOutbreak);

                entity.ToTable("OUTBREAK_LAB_RESULTS");

                entity.HasIndex(e => e.IdLaboratory)
                    .HasName("IDX_OUTBREAK_LAB_RESULTS_ID_LABORATORY");

                entity.HasIndex(e => e.IdOrderFacility)
                    .HasName("IDX_OUTBREAK_LAB_RESULTS_ID_ORDER_FACILITY");

                entity.HasIndex(e => e.IdProvider)
                    .HasName("IDX_OUTBREAK_LAB_RESULTS_ID_PROVIDER");

                entity.Property(e => e.IdLabOutbreak)
                    .HasColumnName("ID_LAB_OUTBREAK")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdBiotype)
                    .HasColumnName("CD_BIOTYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdDisposition)
                    .IsRequired()
                    .HasColumnName("CD_DISPOSITION")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdIcd9)
                    .IsRequired()
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdInvestigator)
                    .HasColumnName("CD_INVESTIGATOR")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabStatus)
                    .IsRequired()
                    .HasColumnName("CD_LAB_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('OPEN')");

                entity.Property(e => e.CdLabTest)
                    .HasColumnName("CD_LAB_TEST")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdObservation)
                    .IsRequired()
                    .HasColumnName("CD_OBSERVATION")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdSerogroup)
                    .HasColumnName("CD_SEROGROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerotype)
                    .HasColumnName("CD_SEROTYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecimen)
                    .IsRequired()
                    .HasColumnName("CD_SPECIMEN")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdSpecimenCond)
                    .HasColumnName("CD_SPECIMEN_COND")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdStrain)
                    .HasColumnName("CD_STRAIN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAccession)
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCdcClusterCode)
                    .HasColumnName("DS_CDC_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrAddressFacility)
                    .HasColumnName("DS_ELR_ADDRESS_FACILITY")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrAddressProvider)
                    .HasColumnName("DS_ELR_ADDRESS_PROVIDER")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrSpecimen)
                    .HasColumnName("DS_ELR_SPECIMEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .IsRequired()
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPfge)
                    .HasColumnName("DS_PFGE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeFlorida)
                    .HasColumnName("DS_PFGE_FLORIDA")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeSecondary)
                    .HasColumnName("DS_PFGE_SECONDARY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsReason)
                    .HasColumnName("DS_REASON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsResult)
                    .HasColumnName("DS_RESULT")
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsResultOverall)
                    .HasColumnName("DS_RESULT_OVERALL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpcimenCond)
                    .HasColumnName("DS_SPCIMEN_COND")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpecimen)
                    .HasColumnName("DS_SPECIMEN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsThirdParty)
                    .HasColumnName("DS_THIRD_PARTY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsWgsClusterCode)
                    .HasColumnName("DS_WGS_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtElrXmit)
                    .HasColumnName("DT_ELR_XMIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFlatfile)
                    .HasColumnName("DT_FLATFILE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReceived)
                    .HasColumnName("DT_RECEIVED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStatus)
                    .HasColumnName("DT_STATUS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtThirdParty)
                    .HasColumnName("DT_THIRD_PARTY")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdAnimalProfile).HasColumnName("ID_ANIMAL_PROFILE");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdLabMerlin).HasColumnName("ID_LAB_MERLIN");

                entity.Property(e => e.IdLaboratory).HasColumnName("ID_LABORATORY");

                entity.Property(e => e.IdObservation)
                    .HasColumnName("ID_OBSERVATION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrderFacility).HasColumnName("ID_ORDER_FACILITY");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdPanel)
                    .HasColumnName("ID_PANEL")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdProvider).HasColumnName("ID_PROVIDER");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.InThirdParty)
                    .HasColumnName("IN_THIRD_PARTY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAnimalProfileNavigation)
                    .WithMany(p => p.OutbreakLabResults)
                    .HasForeignKey(d => d.IdAnimalProfile)
                    .HasConstraintName("FK_OUTBREAK_LAB_RESULTS_ID_ANIMAL_PROFILE");

                entity.HasOne(d => d.IdLabMerlinNavigation)
                    .WithMany(p => p.OutbreakLabResults)
                    .HasForeignKey(d => d.IdLabMerlin)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OUTBREAK_LAB_RESULTS_LAB");

                entity.HasOne(d => d.IdLaboratoryNavigation)
                    .WithMany(p => p.OutbreakLabResultsIdLaboratoryNavigation)
                    .HasForeignKey(d => d.IdLaboratory)
                    .HasConstraintName("FK_OUTBREAK_LAB_RESULTS_ID_LABORATORY");

                entity.HasOne(d => d.IdOrderFacilityNavigation)
                    .WithMany(p => p.OutbreakLabResultsIdOrderFacilityNavigation)
                    .HasForeignKey(d => d.IdOrderFacility)
                    .HasConstraintName("FK_OUTBREAK_LAB_RESULTS_ID_ORDER_FACILITY");

                entity.HasOne(d => d.IdProviderNavigation)
                    .WithMany(p => p.OutbreakLabResultsIdProviderNavigation)
                    .HasForeignKey(d => d.IdProvider)
                    .HasConstraintName("FK_OUTBREAK_LAB_RESULTS_ID_PROVIDER");
            });

            modelBuilder.Entity<OutbreakLabResultValues>(entity =>
            {
                entity.HasKey(e => e.IdLrvOutbreak);

                entity.ToTable("OUTBREAK_LAB_RESULT_VALUES");

                entity.HasIndex(e => e.IdLabOutbreak)
                    .HasName("idx_ID_LAB_OUTBREAK");

                entity.Property(e => e.IdLrvOutbreak)
                    .HasColumnName("ID_LRV_OUTBREAK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmNumericResult)
                    .HasColumnName("AM_NUMERIC_RESULT")
                    .HasColumnType("decimal(13, 0)");

                entity.Property(e => e.CdAbnormalFlag)
                    .HasColumnName("CD_ABNORMAL_FLAG")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdElrAltResult)
                    .HasColumnName("CD_ELR_ALT_RESULT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdElrResult)
                    .HasColumnName("CD_ELR_RESULT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabTest)
                    .IsRequired()
                    .HasColumnName("CD_LAB_TEST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabType)
                    .HasColumnName("CD_LAB_TYPE")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdObservationAlternate)
                    .HasColumnName("CD_OBSERVATION_ALTERNATE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestType)
                    .IsRequired()
                    .HasColumnName("CD_TEST_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrAltResult)
                    .HasColumnName("DS_ELR_ALT_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsElrResult)
                    .HasColumnName("DS_ELR_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsLoinc)
                    .HasColumnName("DS_LOINC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsMethodology)
                    .HasColumnName("DS_METHODOLOGY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsNumericExpression)
                    .HasColumnName("DS_NUMERIC_EXPRESSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsReferenceRange)
                    .HasColumnName("DS_REFERENCE_RANGE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResult)
                    .HasColumnName("DS_RESULT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsResultAlt)
                    .HasColumnName("DS_RESULT_ALT")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsUnits)
                    .HasColumnName("DS_UNITS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdElrObservation).HasColumnName("ID_ELR_OBSERVATION");

                entity.Property(e => e.IdElrOrder).HasColumnName("ID_ELR_ORDER");

                entity.Property(e => e.IdLabOutbreak).HasColumnName("ID_LAB_OUTBREAK");

                entity.Property(e => e.InDoiflag).HasColumnName("IN_DOIFlag");

                entity.Property(e => e.NmObservation)
                    .HasColumnName("NM_OBSERVATION")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NmObservationAlternate)
                    .HasColumnName("NM_OBSERVATION_ALTERNATE")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdLabOutbreakNavigation)
                    .WithMany(p => p.OutbreakLabResultValues)
                    .HasForeignKey(d => d.IdLabOutbreak)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OUTBREAK_LAB_RESULT_VALUES_ID_LAB_OUTBREAK");
            });

            modelBuilder.Entity<OutbreakLabSpecimen>(entity =>
            {
                entity.HasKey(e => e.IdLabSpecimen);

                entity.ToTable("OUTBREAK_LAB_SPECIMEN");

                entity.Property(e => e.IdLabSpecimen)
                    .HasColumnName("ID_LAB_SPECIMEN")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabStatus)
                    .HasColumnName("CD_LAB_STATUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestType)
                    .HasColumnName("CD_TEST_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAccession)
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsCollectedType)
                    .HasColumnName("DS_COLLECTED_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsLocation)
                    .HasColumnName("DS_LOCATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsWhereSpecimenSent)
                    .HasColumnName("DS_WHERE_SPECIMEN_SENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLabStatus)
                    .HasColumnName("DT_LAB_STATUS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSpecimenSent)
                    .HasColumnName("DT_SPECIMEN_SENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdLabOutbreak).HasColumnName("ID_LAB_OUTBREAK");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.NmWhoCollected)
                    .HasColumnName("NM_WHO_COLLECTED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmWhoSpecimenSent)
                    .HasColumnName("NM_WHO_SPECIMEN_SENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdLabOutbreakNavigation)
                    .WithMany(p => p.OutbreakLabSpecimen)
                    .HasForeignKey(d => d.IdLabOutbreak)
                    .HasConstraintName("FK_OUTBREAK_LAB_SPECIMEN_OUTBREAK_LAB_RESULTS");

                entity.HasOne(d => d.IdOutbreakNavigation)
                    .WithMany(p => p.OutbreakLabSpecimen)
                    .HasForeignKey(d => d.IdOutbreak)
                    .HasConstraintName("FK_OUTBREAK_LAB_SPECIMEN_ID_OUTBREAK");
            });

            modelBuilder.Entity<OutbreakLabTmp>(entity =>
            {
                entity.HasKey(e => new { e.IdSerial, e.IdUser });

                entity.ToTable("OUTBREAK_LAB_TMP");

                entity.Property(e => e.IdSerial).HasColumnName("ID_SERIAL");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsLabTest)
                    .HasColumnName("DS_LAB_TEST")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.IdSession)
                    .HasColumnName("ID_SESSION")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakPeople>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdSequence });

                entity.ToTable("OUTBREAK_PEOPLE");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.AmAge).HasColumnName("AM_AGE");

                entity.Property(e => e.AmDuration)
                    .HasColumnName("AM_DURATION")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AmQuantity).HasColumnName("AM_QUANTITY");

                entity.Property(e => e.CdCorrectional)
                    .HasColumnName("CD_CORRECTIONAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCountry)
                    .HasColumnName("CD_COUNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdDayCare)
                    .HasColumnName("CD_DAY_CARE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdDispositionPeople)
                    .IsRequired()
                    .HasColumnName("CD_DISPOSITION_PEOPLE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdDurationIn)
                    .HasColumnName("CD_DURATION_IN")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CdDxStatus)
                    .HasColumnName("CD_DX_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdEthnicity)
                    .HasColumnName("CD_ETHNICITY")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdFollowStatus)
                    .HasColumnName("CD_FOLLOW_STATUS")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.CdGender)
                    .HasColumnName("CD_GENDER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdInterviewStatus)
                    .HasColumnName("CD_INTERVIEW_STATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdInvestStatus)
                    .HasColumnName("CD_INVEST_STATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdInvestigator)
                    .HasColumnName("CD_INVESTIGATOR")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdMilitaryBase)
                    .HasColumnName("CD_MILITARY_BASE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdOccupation)
                    .HasColumnName("CD_OCCUPATION")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutcome)
                    .HasColumnName("CD_OUTCOME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdRace)
                    .HasColumnName("CD_RACE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdReasonType)
                    .IsRequired()
                    .HasColumnName("CD_REASON_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdReportedType)
                    .HasColumnName("CD_REPORTED_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .IsRequired()
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsAddr2)
                    .HasColumnName("DS_ADDR2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddress)
                    .IsRequired()
                    .HasColumnName("DS_ADDRESS")
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsAgeUnit)
                    .HasColumnName("DS_AGE_UNIT")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .IsRequired()
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsInterviewOther)
                    .HasColumnName("DS_INTERVIEW_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsNote)
                    .IsRequired()
                    .HasColumnName("DS_NOTE")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsPhn)
                    .IsRequired()
                    .HasColumnName("DS_PHN")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsPhnOther)
                    .HasColumnName("DS_PHN_OTHER")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhnWork)
                    .HasColumnName("DS_PHN_WORK")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .IsRequired()
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDeath)
                    .HasColumnName("DT_DEATH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDiagnosis)
                    .HasColumnName("DT_DIAGNOSIS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDisposition)
                    .HasColumnName("DT_DISPOSITION")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInterviewed)
                    .HasColumnName("DT_INTERVIEWED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInvestigated)
                    .HasColumnName("DT_INVESTIGATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLab)
                    .HasColumnName("DT_LAB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOnset)
                    .HasColumnName("DT_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOutcome)
                    .HasColumnName("DT_OUTCOME")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdLabElec).HasColumnName("ID_LAB_ELEC");

                entity.Property(e => e.IdSetting).HasColumnName("ID_SETTING");

                entity.Property(e => e.InDataEntryTab)
                    .HasColumnName("IN_DATA_ENTRY_TAB")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InEmergencyVisit)
                    .HasColumnName("IN_EMERGENCY_VISIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InHospitalized)
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InHospitalizedForDisease)
                    .HasColumnName("IN_HOSPITALIZED_FOR_DISEASE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InInterviewed)
                    .HasColumnName("IN_INTERVIEWED")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InInvestigated)
                    .HasColumnName("IN_INVESTIGATED")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InNamedContact)
                    .HasColumnName("IN_NAMED_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InNotifiedElr)
                    .HasColumnName("IN_NOTIFIED_ELR")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InPrimary)
                    .HasColumnName("IN_PRIMARY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InProphalaxed)
                    .HasColumnName("IN_PROPHALAXED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSymptomatic)
                    .HasColumnName("IN_SYMPTOMATIC")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InUsAddress)
                    .HasColumnName("IN_US_ADDRESS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirst)
                    .IsRequired()
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NmLast)
                    .IsRequired()
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OutbreakPeopleLabJunk>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdPeople, e.IdLabTest });

                entity.ToTable("OUTBREAK_PEOPLE_LAB_Junk");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdPeople).HasColumnName("ID_PEOPLE");

                entity.Property(e => e.IdLabTest).HasColumnName("ID_LAB_TEST");

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.InAnswer)
                    .IsRequired()
                    .HasColumnName("IN_ANSWER")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakPeopleRiskFactor>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdPeople, e.IdQuestion });

                entity.ToTable("OUTBREAK_PEOPLE_RISK_FACTOR");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdPeople).HasColumnName("ID_PEOPLE");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");

                entity.Property(e => e.DsFreeFormAnswer)
                    .HasColumnName("DS_FREE_FORM_ANSWER")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InAnswer)
                    .IsRequired()
                    .HasColumnName("IN_ANSWER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OutbreakPeopleSymptoms>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdSequence, e.CdSymptoms });

                entity.ToTable("OUTBREAK_PEOPLE_SYMPTOMS");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.CdSymptoms)
                    .HasColumnName("CD_SYMPTOMS")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakRiskFactor>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdQuestion });

                entity.ToTable("OUTBREAK_RISK_FACTOR");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");

                entity.Property(e => e.DsQuestion)
                    .HasColumnName("DS_QUESTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtExpire)
                    .HasColumnName("DT_EXPIRE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.InYesNo)
                    .HasColumnName("IN_YES_NO")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakRiskFactorTmp>(entity =>
            {
                entity.HasKey(e => new { e.IdSerial, e.IdUser });

                entity.ToTable("OUTBREAK_RISK_FACTOR_TMP");

                entity.Property(e => e.IdSerial).HasColumnName("ID_SERIAL");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsQuestion)
                    .HasColumnName("DS_QUESTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtExpire)
                    .HasColumnName("DT_EXPIRE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.IdSession)
                    .HasColumnName("ID_SESSION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InYesNo)
                    .HasColumnName("IN_YES_NO")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakSearchFields>(entity =>
            {
                entity.HasKey(e => e.IdField);

                entity.ToTable("OUTBREAK_SEARCH_FIELDS");

                entity.Property(e => e.IdField)
                    .HasColumnName("ID_FIELD")
                    .ValueGeneratedNever();

                entity.Property(e => e.DsDescription)
                    .HasColumnName("DS_DESCRIPTION")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOperators)
                    .HasColumnName("DS_OPERATORS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPromptType)
                    .HasColumnName("DS_PROMPT_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsSelect)
                    .HasColumnName("DS_SELECT")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.NmColumn)
                    .HasColumnName("NM_COLUMN")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakSettings>(entity =>
            {
                entity.HasKey(e => e.IdSetting);

                entity.ToTable("OUTBREAK_SETTINGS");

                entity.Property(e => e.IdSetting)
                    .HasColumnName("ID_SETTING")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCountry)
                    .HasColumnName("CD_COUNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdSetting)
                    .IsRequired()
                    .HasColumnName("CD_SETTING")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CdState)
                    .IsRequired()
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsAddress)
                    .IsRequired()
                    .HasColumnName("DS_ADDRESS")
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsAddress2)
                    .HasColumnName("DS_ADDRESS2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .IsRequired()
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasColumnType("text");

                entity.Property(e => e.DsContactPhn)
                    .IsRequired()
                    .HasColumnName("DS_CONTACT_PHN")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsRelationOutbreak)
                    .IsRequired()
                    .HasColumnName("DS_RELATION_OUTBREAK")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsSettingOther)
                    .HasColumnName("DS_SETTING_OTHER")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .IsRequired()
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtClosed)
                    .HasColumnName("DT_CLOSED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdResourceSetting).HasColumnName("ID_RESOURCE_SETTING");

                entity.Property(e => e.InPrimary).HasColumnName("IN_PRIMARY");

                entity.Property(e => e.InUsAddress)
                    .HasColumnName("IN_US_ADDRESS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NmContact)
                    .IsRequired()
                    .HasColumnName("NM_CONTACT")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NmFacility)
                    .IsRequired()
                    .HasColumnName("NM_FACILITY")
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdOutbreakNavigation)
                    .WithMany(p => p.OutbreakSettings)
                    .HasForeignKey(d => d.IdOutbreak)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OUTBREAK_SETTINGS_ID_OUTBREAK");

            });

            modelBuilder.Entity<OutbreakStatistics>(entity =>
            {
                entity.HasKey(e => e.IdOutbreak);

                entity.ToTable("OUTBREAK_STATISTICS");

                entity.Property(e => e.IdOutbreak)
                    .HasColumnName("ID_OUTBREAK")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmDeaths).HasColumnName("AM_DEATHS");

                entity.Property(e => e.AmExposed).HasColumnName("AM_EXPOSED");

                entity.Property(e => e.AmHospitalized).HasColumnName("AM_HOSPITALIZED");

                entity.Property(e => e.AmMaxDuration).HasColumnName("AM_MAX_DURATION");

                entity.Property(e => e.AmMinDuration).HasColumnName("AM_MIN_DURATION");

                entity.Property(e => e.AmNbrPersonsIll).HasColumnName("AM_NBR_PERSONS_ILL");

                entity.Property(e => e.AmProphylaxed).HasColumnName("AM_PROPHYLAXED");

                entity.Property(e => e.AmSusceptible).HasColumnName("AM_SUSCEPTIBLE");

                entity.Property(e => e.AmVaccinated).HasColumnName("AM_VACCINATED");

                entity.Property(e => e.CdMaxIn)
                    .HasColumnName("CD_MAX_IN")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CdMinIn)
                    .HasColumnName("CD_MIN_IN")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposed)
                    .HasColumnName("DS_EXPOSED")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsNbrPersonsIll)
                    .HasColumnName("DS_NBR_PERSONS_ILL")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsSusceptible)
                    .HasColumnName("DS_SUSCEPTIBLE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsVaccinated)
                    .HasColumnName("DS_VACCINATED")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OutbreakStatusHistory>(entity =>
            {
                entity.HasKey(e => e.IdHistory);

                entity.ToTable("OUTBREAK_STATUS_HISTORY");

                entity.Property(e => e.IdHistory).HasColumnName("ID_HISTORY");

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdReviewStatus)
                    .IsRequired()
                    .HasColumnName("CD_REVIEW_STATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdStatus)
                    .IsRequired()
                    .HasColumnName("CD_STATUS")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsReason)
                    .IsRequired()
                    .HasColumnName("DS_REASON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.HasOne(d => d.IdOutbreakNavigation)
                    .WithMany(p => p.OutbreakStatusHistory)
                    .HasForeignKey(d => d.IdOutbreak)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OUTBREAK_STATUSHISTORY_ID_OUTBREAK");
            });

            modelBuilder.Entity<OutbreakSurvey>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdQuestion });

                entity.ToTable("OUTBREAK_SURVEY");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.IdUpdated)
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InFromTemplate)
                    .IsRequired()
                    .HasColumnName("IN_FROM_TEMPLATE")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<OutbreakSurveyResults>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdSequence, e.IdQuestion });

                entity.ToTable("OUTBREAK_SURVEY_RESULTS");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");

                entity.Property(e => e.DsAnswer)
                    .HasColumnName("DS_ANSWER")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutbreakSymptoms>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.CdSymptoms });

                entity.ToTable("OUTBREAK_SYMPTOMS");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.CdSymptoms)
                    .HasColumnName("CD_SYMPTOMS")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsOther)
                    .HasColumnName("DS_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(e => e.Outbreak)
                    .WithMany(e => e.OutbreakSymptoms)
                    .HasForeignKey(e => e.IdOutbreak)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<OutbreakTravel>(entity =>
            {
                entity.HasKey(e => new { e.IdOutbreak, e.IdSequence, e.IdTravelSeq });

                entity.ToTable("OUTBREAK_TRAVEL");

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.IdTravelSeq)
                    .HasColumnName("ID_TRAVEL_SEQ")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCountry)
                    .HasColumnName("DS_COUNTRY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtFrom)
                    .HasColumnName("DT_FROM")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTo)
                    .HasColumnName("DT_TO")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutgoingTestRequests>(entity =>
            {
                entity.HasKey(e => e.MessageId);

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.BranchLab)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsertDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderingProviderCity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderingProviderCounty)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderingProviderId)
                    .HasColumnName("OrderingProviderID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderingProviderName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OrderingProviderState)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrderingProviderStreet1)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.OrderingProviderStreet2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderingProviderZip)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PatientId)
                    .HasColumnName("PatientID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PickupDate).HasColumnType("datetime");

                entity.Property(e => e.SpecimenCarrier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecimenCollectionDate).HasColumnType("datetime");

                entity.Property(e => e.SpecimenSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecimenTrackingNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecimenType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusComment)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TestRequestId)
                    .IsRequired()
                    .HasColumnName("TestRequestID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TestType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Page>(entity =>
            {
                entity.HasKey(e => e.IdSec);

                entity.ToTable("PAGE");

                entity.Property(e => e.IdSec)
                    .HasColumnName("ID_SEC")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdField)
                    .HasColumnName("CD_FIELD")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.CdPage)
                    .IsRequired()
                    .HasColumnName("CD_PAGE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.DsHelp)
                    .HasColumnName("DS_HELP")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsSubPageCategory)
                    .HasColumnName("DS_SUB_PAGE_CATEGORY")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IsPageHeader)
                    .HasColumnName("IS_PAGE_HEADER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NmPage)
                    .HasColumnName("NM_PAGE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PageMessageText>(entity =>
            {
                entity.HasKey(e => e.IdMessageTxt);

                entity.ToTable("PAGE_MESSAGE_TEXT");

                entity.Property(e => e.IdMessageTxt)
                    .HasColumnName("ID_MESSAGE_TXT")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdLocation)
                    .IsRequired()
                    .HasColumnName("CD_LOCATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPage)
                    .IsRequired()
                    .HasColumnName("CD_PAGE")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.DsField)
                    .HasColumnName("DS_FIELD")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsMessageText)
                    .HasColumnName("DS_MESSAGE_TEXT")
                    .HasColumnType("ntext");

                entity.Property(e => e.DsStyleClass)
                    .HasColumnName("DS_STYLE_CLASS")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.InActive).HasColumnName("IN_ACTIVE");
            });

            modelBuilder.Entity<PediatricFluExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("PEDIATRIC_FLU_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdLocationOfDeath)
                    .HasColumnName("CD_LOCATION_OF_DEATH")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdTestResult)
                    .HasColumnName("CD_TEST_RESULT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsComplicationsAnotherViral)
                    .HasColumnName("DS_COMPLICATIONS_ANOTHER_VIRAL")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsComplicationsOther)
                    .HasColumnName("DS_COMPLICATIONS_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsCancer)
                    .HasColumnName("DS_EXISTING_CONDITIONS_CANCER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsCardiacDisease)
                    .HasColumnName("DS_EXISTING_CONDITIONS_CARDIAC_DISEASE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsChromosonalAbnormality)
                    .HasColumnName("DS_EXISTING_CONDITIONS_CHROMOSONAL_ABNORMALITY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsChronicPulmonary)
                    .HasColumnName("DS_EXISTING_CONDITIONS_CHRONIC_PULMONARY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsEndoDisorder)
                    .HasColumnName("DS_EXISTING_CONDITIONS_ENDO_DISORDER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsImmunosuppressive)
                    .HasColumnName("DS_EXISTING_CONDITIONS_IMMUNOSUPPRESSIVE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsMitoDisorder)
                    .HasColumnName("DS_EXISTING_CONDITIONS_MITO_DISORDER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsNeuromuscular)
                    .HasColumnName("DS_EXISTING_CONDITIONS_NEUROMUSCULAR")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsOther)
                    .HasColumnName("DS_EXISTING_CONDITIONS_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsOtherNeurological)
                    .HasColumnName("DS_EXISTING_CONDITIONS_OTHER_NEUROLOGICAL")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsPregnantAge)
                    .HasColumnName("DS_EXISTING_CONDITIONS_PREGNANT_AGE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsPrematurity)
                    .HasColumnName("DS_EXISTING_CONDITIONS_PREMATURITY")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsExistingConditionsRenalDisease)
                    .HasColumnName("DS_EXISTING_CONDITIONS_RENAL_DISEASE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsLocationOfDeathOther)
                    .HasColumnName("DS_LOCATION_OF_DEATH_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOriginalClinicalMaterialSent)
                    .HasColumnName("DS_ORIGINAL_CLINICAL_MATERIAL_SENT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsPathologySpecimensSentLab)
                    .HasColumnName("DS_PATHOLOGY_SPECIMENS_SENT_LAB")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsReceivingTherapyAfterAntibiotic)
                    .HasColumnName("DS_RECEIVING_THERAPY_AFTER_ANTIBIOTIC")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsReceivingTherapyAfterAntiviral)
                    .HasColumnName("DS_RECEIVING_THERAPY_AFTER_ANTIVIRAL")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsReceivingTherapyOther)
                    .HasColumnName("DS_RECEIVING_THERAPY_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsStaphAureusSentLab)
                    .HasColumnName("DS_STAPH_AUREUS_SENT_LAB")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHospitalAdmission)
                    .HasColumnName("DT_HOSPITAL_ADMISSION")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTestCollectionDate)
                    .HasColumnName("DT_TEST_COLLECTION_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVaccineFirstDoseDate)
                    .HasColumnName("DT_VACCINE_FIRST_DOSE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVaccineSecondDoseDate)
                    .HasColumnName("DT_VACCINE_SECOND_DOSE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAutopsyPerformed)
                    .HasColumnName("IN_AUTOPSY_PERFORMED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCardiacArrestOutsideHospital)
                    .HasColumnName("IN_CARDIAC_ARREST_OUTSIDE_HOSPITAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplications)
                    .HasColumnName("IN_COMPLICATIONS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsAnotherViral)
                    .HasColumnName("IN_COMPLICATIONS_ANOTHER_VIRAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsArds)
                    .HasColumnName("IN_COMPLICATIONS_ARDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsBronchiolitis)
                    .HasColumnName("IN_COMPLICATIONS_BRONCHIOLITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsCardiomyopathy)
                    .HasColumnName("IN_COMPLICATIONS_CARDIOMYOPATHY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsCroup)
                    .HasColumnName("IN_COMPLICATIONS_CROUP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsEncephalitis)
                    .HasColumnName("IN_COMPLICATIONS_ENCEPHALITIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsHemorrhagic)
                    .HasColumnName("IN_COMPLICATIONS_HEMORRHAGIC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsOther)
                    .HasColumnName("IN_COMPLICATIONS_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsPneumonia)
                    .HasColumnName("IN_COMPLICATIONS_PNEUMONIA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsReye)
                    .HasColumnName("IN_COMPLICATIONS_REYE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsSeizures)
                    .HasColumnName("IN_COMPLICATIONS_SEIZURES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsSepsis)
                    .HasColumnName("IN_COMPLICATIONS_SEPSIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InComplicationsShock)
                    .HasColumnName("IN_COMPLICATIONS_SHOCK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeathAge)
                    .HasColumnName("IN_DEATH_AGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDoseH1n1)
                    .HasColumnName("IN_DOSE_H1N1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditions)
                    .HasColumnName("IN_EXISTING_CONDITIONS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsAsthma)
                    .HasColumnName("IN_EXISTING_CONDITIONS_ASTHMA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsCancer)
                    .HasColumnName("IN_EXISTING_CONDITIONS_CANCER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsCardiacDisease)
                    .HasColumnName("IN_EXISTING_CONDITIONS_CARDIAC_DISEASE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsCerebralPalsy)
                    .HasColumnName("IN_EXISTING_CONDITIONS_CEREBRAL_PALSY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsChromosonalAbnormality)
                    .HasColumnName("IN_EXISTING_CONDITIONS_CHROMOSONAL_ABNORMALITY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsChronicPulmonary)
                    .HasColumnName("IN_EXISTING_CONDITIONS_CHRONIC_PULMONARY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsCysticFibrosis)
                    .HasColumnName("IN_EXISTING_CONDITIONS_CYSTIC_FIBROSIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsDiabetes)
                    .HasColumnName("IN_EXISTING_CONDITIONS_DIABETES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsEndoDisorder)
                    .HasColumnName("IN_EXISTING_CONDITIONS_ENDO_DISORDER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsFebrileSeizures)
                    .HasColumnName("IN_EXISTING_CONDITIONS_FEBRILE_SEIZURES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsImmunosuppressive)
                    .HasColumnName("IN_EXISTING_CONDITIONS_IMMUNOSUPPRESSIVE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsMitoDisorder)
                    .HasColumnName("IN_EXISTING_CONDITIONS_MITO_DISORDER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsModerate)
                    .HasColumnName("IN_EXISTING_CONDITIONS_MODERATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsNeuromuscular)
                    .HasColumnName("IN_EXISTING_CONDITIONS_NEUROMUSCULAR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsObesity)
                    .HasColumnName("IN_EXISTING_CONDITIONS_OBESITY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsOther)
                    .HasColumnName("IN_EXISTING_CONDITIONS_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsOtherNeurological)
                    .HasColumnName("IN_EXISTING_CONDITIONS_OTHER_NEUROLOGICAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsPregnantAge)
                    .HasColumnName("IN_EXISTING_CONDITIONS_PREGNANT_AGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsPrematurity)
                    .HasColumnName("IN_EXISTING_CONDITIONS_PREMATURITY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsRenalDisease)
                    .HasColumnName("IN_EXISTING_CONDITIONS_RENAL_DISEASE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsSeizureDisorder)
                    .HasColumnName("IN_EXISTING_CONDITIONS_SEIZURE_DISORDER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsSickleCell)
                    .HasColumnName("IN_EXISTING_CONDITIONS_SICKLE_CELL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExistingConditionsSsti)
                    .HasColumnName("IN_EXISTING_CONDITIONS_SSTI")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMechanicalVentilation)
                    .HasColumnName("IN_MECHANICAL_VENTILATION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOriginalClinicalMaterialSent)
                    .HasColumnName("IN_ORIGINAL_CLINICAL_MATERIAL_SENT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPathologySpecimensSent)
                    .HasColumnName("IN_PATHOLOGY_SPECIMENS_SENT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientAdmittedRelated)
                    .HasColumnName("IN_PATIENT_ADMITTED_RELATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivingTherapy)
                    .HasColumnName("IN_RECEIVING_THERAPY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivingTherapyAfter)
                    .HasColumnName("IN_RECEIVING_THERAPY_AFTER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivingTherapyAfterAntibiotic)
                    .HasColumnName("IN_RECEIVING_THERAPY_AFTER_ANTIBIOTIC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivingTherapyAfterAntiviral)
                    .HasColumnName("IN_RECEIVING_THERAPY_AFTER_ANTIVIRAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivingTherapyAntiviral)
                    .HasColumnName("IN_RECEIVING_THERAPY_ANTIVIRAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivingTherapyChemo)
                    .HasColumnName("IN_RECEIVING_THERAPY_CHEMO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivingTherapyChronicAspirin)
                    .HasColumnName("IN_RECEIVING_THERAPY_CHRONIC_ASPIRIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivingTherapyOther)
                    .HasColumnName("IN_RECEIVING_THERAPY_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InReceivingTherapySteroids)
                    .HasColumnName("IN_RECEIVING_THERAPY_STEROIDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpecimenCollected)
                    .HasColumnName("IN_SPECIMEN_COLLECTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InStaphAureusSentLab)
                    .HasColumnName("IN_STAPH_AUREUS_SENT_LAB")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTestTypeCommercial)
                    .HasColumnName("IN_TEST_TYPE_COMMERCIAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTwoDose)
                    .HasColumnName("IN_TWO_DOSE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccineDose1)
                    .HasColumnName("IN_VACCINE_DOSE1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccineDose1Days)
                    .HasColumnName("IN_VACCINE_DOSE1_DAYS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccineDose2)
                    .HasColumnName("IN_VACCINE_DOSE2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccineDose2Days)
                    .HasColumnName("IN_VACCINE_DOSE2_DAYS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccineHistLaiv)
                    .HasColumnName("IN_VACCINE_HIST_LAIV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccineHistReceivingSeasonalVaccine)
                    .HasColumnName("IN_VACCINE_HIST_RECEIVING_SEASONAL_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccineHistTiv)
                    .HasColumnName("IN_VACCINE_HIST_TIV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccineHistUnknown)
                    .HasColumnName("IN_VACCINE_HIST_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InVaccinePrevious)
                    .HasColumnName("IN_VACCINE_PREVIOUS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.PediatricFluExt)
                    .HasForeignKey<PediatricFluExt>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FLUPEDIATRICMORTALITY_EPI_CASE");
            });

            modelBuilder.Entity<PediatricFluExt2>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("PEDIATRIC_FLU_EXT2");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCultureSpecimenType)
                    .HasColumnName("CD_CULTURE_SPECIMEN_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsCultureSpecimenTypeOther)
                    .HasColumnName("DS_CULTURE_SPECIMEN_TYPE_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCultureCollection)
                    .HasColumnName("DT_CULTURE_COLLECTION")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InCultureResult)
                    .HasColumnName("IN_CULTURE_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCultureSpecimen)
                    .HasColumnName("IN_CULTURE_SPECIMEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.PediatricFluExt2)
                    .HasForeignKey<PediatricFluExt2>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FLUPEDIATRICMORTALITYCONFIRMPATHOGENS_FLUPEDIATRICMORTALITY");
            });

            modelBuilder.Entity<PediatricFluPathogensExt>(entity =>
            {
                entity.HasKey(e => e.IdCultConfirm);

                entity.ToTable("PEDIATRIC_FLU_PATHOGENS_EXT");

                entity.Property(e => e.IdCultConfirm)
                    .HasColumnName("ID_CULT_CONFIRM")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCultureSpecimenType)
                    .HasColumnName("CD_CULTURE_SPECIMEN_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsCultureOrganismOther)
                    .HasColumnName("DS_CULTURE_ORGANISM_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsCultureSpecimenTypeOther)
                    .HasColumnName("DS_CULTURE_SPECIMEN_TYPE_OTHER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCultureCollection)
                    .HasColumnName("DT_CULTURE_COLLECTION")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InCultureOrganism)
                    .HasColumnName("IN_CULTURE_ORGANISM")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InCultureResult)
                    .HasColumnName("IN_CULTURE_RESULT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InCultureSpecimen)
                    .HasColumnName("IN_CULTURE_SPECIMEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.PediatricFluPathogensExt)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PEDIATRIC_FLU_PATHOGENS_EXT_FK");
            });

            modelBuilder.Entity<PertussisExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("PERTUSSIS_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cd1stAntibiot)
                    .IsRequired()
                    .HasColumnName("CD_1ST_ANTIBIOT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cd2ndAntibiot)
                    .IsRequired()
                    .HasColumnName("CD_2ND_ANTIBIOT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdCultureResult)
                    .IsRequired()
                    .HasColumnName("CD_CULTURE_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdDfaResult)
                    .IsRequired()
                    .HasColumnName("CD_DFA_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdDoses)
                    .IsRequired()
                    .HasColumnName("CD_DOSES")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdNoVaccineReason)
                    .HasColumnName("CD_NO_VACCINE_REASON")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrResult)
                    .IsRequired()
                    .HasColumnName("CD_PCR_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdReason)
                    .IsRequired()
                    .HasColumnName("CD_REASON")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdSerolResult)
                    .IsRequired()
                    .HasColumnName("CD_SEROL_RESULT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdSpread)
                    .HasColumnName("CD_SPREAD")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTransmission)
                    .HasColumnName("CD_TRANSMISSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdVac1Mfg)
                    .IsRequired()
                    .HasColumnName("CD_VAC_1_MFG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsContacts)
                    .IsRequired()
                    .HasColumnName("DS_CONTACTS")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCoughDuration)
                    .IsRequired()
                    .HasColumnName("DS_COUGH_DURATION")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDays1stAntibiot)
                    .HasColumnName("DS_DAYS_1ST_ANTIBIOT")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsDays2ndAntibiot)
                    .IsRequired()
                    .HasColumnName("DS_DAYS_2ND_ANTIBIOT")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsEpiLinkComments)
                    .HasColumnName("DS_EPI_LINK_COMMENTS")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpread)
                    .IsRequired()
                    .HasColumnName("DS_SPREAD")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTransmission)
                    .IsRequired()
                    .HasColumnName("DS_TRANSMISSION")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Dt1stStarted)
                    .HasColumnName("DT_1ST_STARTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dt2ndStarted)
                    .HasColumnName("DT_2ND_STARTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCulture)
                    .HasColumnName("DT_CULTURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDfa)
                    .HasColumnName("DT_DFA")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFinalInterv)
                    .HasColumnName("DT_FINAL_INTERV")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtInvestgStarted)
                    .HasColumnName("DT_INVESTG_STARTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLastPertussis)
                    .HasColumnName("DT_LAST_PERTUSSIS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPcr)
                    .HasColumnName("DT_PCR")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSerol1)
                    .HasColumnName("DT_SEROL_1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSerol2)
                    .HasColumnName("DT_SEROL_2")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAntibiot)
                    .IsRequired()
                    .HasColumnName("IN_ANTIBIOT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InApnea)
                    .IsRequired()
                    .HasColumnName("IN_APNEA")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InCoughFinal)
                    .IsRequired()
                    .HasColumnName("IN_COUGH_FINAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDeath)
                    .IsRequired()
                    .HasColumnName("IN_DEATH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEncephal)
                    .IsRequired()
                    .HasColumnName("IN_ENCEPHAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEpiLinked)
                    .IsRequired()
                    .HasColumnName("IN_EPI_LINKED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHospitalized)
                    .IsRequired()
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InSeizures)
                    .IsRequired()
                    .HasColumnName("IN_SEIZURES")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccinated)
                    .IsRequired()
                    .HasColumnName("IN_VACCINATED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVomit)
                    .IsRequired()
                    .HasColumnName("IN_VOMIT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InWhoop)
                    .IsRequired()
                    .HasColumnName("IN_WHOOP")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InXray)
                    .IsRequired()
                    .HasColumnName("IN_XRAY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<PesticideExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("PESTICIDE_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAirRespirator)
                    .HasColumnName("CD_AIR_RESPIRATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdApplication)
                    .HasColumnName("CD_APPLICATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdAreaWaitTime)
                    .HasColumnName("CD_AREA_WAIT_TIME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdChemicalApron)
                    .HasColumnName("CD_CHEMICAL_APRON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdChemicalBoots)
                    .HasColumnName("CD_CHEMICAL_BOOTS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdChemicalClass)
                    .HasColumnName("CD_CHEMICAL_CLASS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdChemicalGloves)
                    .HasColumnName("CD_CHEMICAL_GLOVES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdChemicalGoggles)
                    .HasColumnName("CD_CHEMICAL_GOGGLES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdChemicalHeadgear)
                    .HasColumnName("CD_CHEMICAL_HEADGEAR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdChemicalSuits)
                    .HasColumnName("CD_CHEMICAL_SUITS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdClosedSystem)
                    .HasColumnName("CD_CLOSED_SYSTEM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdClothGloves)
                    .HasColumnName("CD_CLOTH_GLOVES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdContributingFactors)
                    .HasColumnName("CD_CONTRIBUTING_FACTORS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCoveralls)
                    .HasColumnName("CD_COVERALLS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCrop)
                    .HasColumnName("CD_CROP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDustMask)
                    .HasColumnName("CD_DUST_MASK")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdEmployeeInformed)
                    .HasColumnName("CD_EMPLOYEE_INFORMED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdEmployeeTrained)
                    .HasColumnName("CD_EMPLOYEE_TRAINED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdEmployeeWarned)
                    .HasColumnName("CD_EMPLOYEE_WARNED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdEnclosedCab)
                    .HasColumnName("CD_ENCLOSED_CAB")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdEquipment)
                    .HasColumnName("CD_EQUIPMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdEquipmentReq)
                    .HasColumnName("CD_EQUIPMENT_REQ")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposTime)
                    .HasColumnName("CD_EXPOS_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposureActivity)
                    .HasColumnName("CD_EXPOSURE_ACTIVITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposureSite)
                    .HasColumnName("CD_EXPOSURE_SITE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFaceShield)
                    .HasColumnName("CD_FACE_SHIELD")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFatal)
                    .HasColumnName("CD_FATAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFullFace)
                    .HasColumnName("CD_FULL_FACE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFunctionalClass)
                    .HasColumnName("CD_FUNCTIONAL_CLASS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdIllnessRelated)
                    .HasColumnName("CD_ILLNESS_RELATED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdIntentional)
                    .HasColumnName("CD_INTENTIONAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLabelFollowed)
                    .HasColumnName("CD_LABEL_FOLLOWED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLicensing)
                    .HasColumnName("CD_LICENSING")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLocation)
                    .HasColumnName("CD_LOCATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLocationDesc)
                    .HasColumnName("CD_LOCATION_DESC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLongPants)
                    .HasColumnName("CD_LONG_PANTS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLongShirt)
                    .HasColumnName("CD_LONG_SHIRT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdLostTime)
                    .HasColumnName("CD_LOST_TIME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdMedicalReceived)
                    .HasColumnName("CD_MEDICAL_RECEIVED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdMedicalReceivedType)
                    .HasColumnName("CD_MEDICAL_RECEIVED_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdMethodReported)
                    .HasColumnName("CD_METHOD_REPORTED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdNonchemicalHeadgear)
                    .HasColumnName("CD_NONCHEMICAL_HEADGEAR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOccupation)
                    .HasColumnName("CD_OCCUPATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOrganicRespirator)
                    .HasColumnName("CD_ORGANIC_RESPIRATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOtherClothing)
                    .HasColumnName("CD_OTHER_CLOTHING")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOtherControls)
                    .HasColumnName("CD_OTHER_CONTROLS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOtherEye)
                    .HasColumnName("CD_OTHER_EYE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOtherHand)
                    .HasColumnName("CD_OTHER_HAND")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOtherRespiratory)
                    .HasColumnName("CD_OTHER_RESPIRATORY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdOthersExposed)
                    .HasColumnName("CD_OTHERS_EXPOSED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdParticulateRespirator)
                    .HasColumnName("CD_PARTICULATE_RESPIRATOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPhysicalFormulation)
                    .HasColumnName("CD_PHYSICAL_FORMULATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPreExist)
                    .HasColumnName("CD_PRE_EXIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdProductClass)
                    .HasColumnName("CD_PRODUCT_CLASS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPurpose)
                    .HasColumnName("CD_PURPOSE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdRecordsReceived)
                    .HasColumnName("CD_RECORDS_RECEIVED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportSourceAddl)
                    .HasColumnName("CD_REPORT_SOURCE_ADDL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportSourceInitial)
                    .HasColumnName("CD_REPORT_SOURCE_INITIAL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportSourceSecond)
                    .HasColumnName("CD_REPORT_SOURCE_SECOND")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSafetyGlasses)
                    .HasColumnName("CD_SAFETY_GLASSES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSeverity)
                    .HasColumnName("CD_SEVERITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTargetDisease)
                    .HasColumnName("CD_TARGET_DISEASE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTargetSurface)
                    .HasColumnName("CD_TARGET_SURFACE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTreatedArea)
                    .HasColumnName("CD_TREATED_AREA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdViolationFifra)
                    .HasColumnName("CD_VIOLATION_FIFRA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdViolationOsha)
                    .HasColumnName("CD_VIOLATION_OSHA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdWorkRelate)
                    .HasColumnName("CD_WORK_RELATE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsActiveIngredientPct)
                    .HasColumnName("DS_ACTIVE_INGREDIENT_PCT")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsCicsCode)
                    .HasColumnName("DS_CICS_CODE")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.DsEpaDistributorNum)
                    .HasColumnName("DS_EPA_DISTRIBUTOR_NUM")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DsEpaRegistrationNum)
                    .HasColumnName("DS_EPA_REGISTRATION_NUM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsIllnessRelated)
                    .HasColumnName("DS_ILLNESS_RELATED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsIncidentDescription)
                    .HasColumnName("DS_INCIDENT_DESCRIPTION")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsLengthHosp)
                    .HasColumnName("DS_LENGTH_HOSP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsLostDays)
                    .HasColumnName("DS_LOST_DAYS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsMedicalDiagnosis)
                    .HasColumnName("DS_MEDICAL_DIAGNOSIS")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsNaicsCode)
                    .HasColumnName("DS_NAICS_CODE")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DsOccnarCode)
                    .HasColumnName("DS_OCCNAR_CODE")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherActivity)
                    .HasColumnName("DS_OTHER_ACTIVITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherExposure)
                    .HasColumnName("DS_OTHER_EXPOSURE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherOccupation)
                    .HasColumnName("DS_OTHER_OCCUPATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherSite)
                    .HasColumnName("DS_OTHER_SITE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherViolations)
                    .HasColumnName("DS_OTHER_VIOLATIONS")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsPreExist)
                    .HasColumnName("DS_PRE_EXIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTreatment)
                    .HasColumnName("DS_TREATMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExposDate)
                    .HasColumnName("DT_EXPOS_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdPhysician).HasColumnName("ID_PHYSICIAN");

                entity.Property(e => e.InDermal)
                    .HasColumnName("IN_DERMAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrift)
                    .HasColumnName("IN_DRIFT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InIndoorAir)
                    .HasColumnName("IN_INDOOR_AIR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InIngestion)
                    .HasColumnName("IN_INGESTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInhalation)
                    .HasColumnName("IN_INHALATION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InInjection)
                    .HasColumnName("IN_INJECTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLeakSpill)
                    .HasColumnName("IN_LEAK_SPILL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOcular)
                    .HasColumnName("IN_OCULAR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherExposure)
                    .HasColumnName("IN_OTHER_EXPOSURE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurface)
                    .HasColumnName("IN_SURFACE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTargeted)
                    .HasColumnName("IN_TARGETED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUnknownExposure)
                    .HasColumnName("IN_UNKNOWN_EXPOSURE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUnknownRoute)
                    .HasColumnName("IN_UNKNOWN_ROUTE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmCompany)
                    .HasColumnName("NM_COMPANY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmPesticide)
                    .HasColumnName("NM_PESTICIDE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PesticideProductExt>(entity =>
            {
                entity.HasKey(e => e.IdProduct);

                entity.ToTable("PESTICIDE_PRODUCT_EXT");

                entity.Property(e => e.IdProduct).HasColumnName("ID_PRODUCT");

                entity.Property(e => e.CdChemicalClass)
                    .HasColumnName("CD_CHEMICAL_CLASS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFunctionalClass)
                    .HasColumnName("CD_FUNCTIONAL_CLASS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdPhysicalFormulation)
                    .HasColumnName("CD_PHYSICAL_FORMULATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdProductClass)
                    .HasColumnName("CD_PRODUCT_CLASS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsActiveIngredientPct)
                    .HasColumnName("DS_ACTIVE_INGREDIENT_PCT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsEpaDistributorNum)
                    .HasColumnName("DS_EPA_DISTRIBUTOR_NUM")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.DsEpaRegistrationNum)
                    .HasColumnName("DS_EPA_REGISTRATION_NUM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmPesticide)
                    .HasColumnName("NM_PESTICIDE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PfgeData>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("PFGE_DATA");

                entity.Property(e => e.IdKey).HasColumnName("ID_KEY");

                entity.Property(e => e.DsAccession)
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcClusterCode)
                    .HasColumnName("DS_CDC_CLUSTER_CODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsErrorMsg)
                    .HasColumnName("DS_ERROR_MSG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsOgroup)
                    .HasColumnName("DS_OGROUP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfge)
                    .HasColumnName("DS_PFGE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeFlorida)
                    .HasColumnName("DS_PFGE_FLORIDA")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeSecondary)
                    .HasColumnName("DS_PFGE_SECONDARY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsPnSerotype)
                    .HasColumnName("DS_PN_SEROTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsSerotype)
                    .HasColumnName("DS_SEROTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsWgsClusterCode)
                    .HasColumnName("DS_WGS_CLUSTER_CODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtImported)
                    .HasColumnName("DT_IMPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.InImported)
                    .HasColumnName("IN_IMPORTED")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PopulationData>(entity =>
            {
                entity.HasKey(e => e.IdPopulation);

                entity.ToTable("POPULATION_DATA");

                entity.Property(e => e.IdPopulation).HasColumnName("ID_POPULATION");

                entity.Property(e => e.AmPopulation).HasColumnName("AM_POPULATION");

                entity.Property(e => e.AmYear).HasColumnName("AM_YEAR");

                entity.Property(e => e.CdAgeBucket)
                    .HasColumnName("CD_AGE_BUCKET")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty).HasColumnName("CD_COUNTY");

                entity.Property(e => e.CdEthnicity)
                    .HasColumnName("CD_ETHNICITY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdGender)
                    .HasColumnName("CD_GENDER")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdRace)
                    .HasColumnName("CD_RACE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PrintLog>(entity =>
            {
                entity.HasKey(e => e.IdPrint);

                entity.ToTable("PRINT_LOG");

                entity.Property(e => e.IdPrint).HasColumnName("ID_PRINT");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsLink)
                    .HasColumnName("DS_LINK")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");
            });

            modelBuilder.Entity<ProfileHistory>(entity =>
            {
                entity.HasKey(e => new { e.IdProfile, e.IdProfileHistory })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("PROFILE_HISTORY");

                entity.HasIndex(e => e.NmFirst)
                    .HasName("IDX_PROFILE_HISTORY_NM_FIRST");

                entity.HasIndex(e => new { e.IdProfile, e.IdProfileHistory })
                    .HasName("IDX_PROFILE_HISTORY_ID_PROFILE_HISTORY")
                    .ForSqlServerIsClustered();

                entity.HasIndex(e => new { e.IdProfile, e.InHistory })
                    .HasName("IDX_PROFILE_HISTORY_IN_HISTORY");

                entity.HasIndex(e => new { e.CdState, e.InHistory, e.IdProfile })
                    .HasName("IDX_PROFILE_HISTORY_STATE_HISTORY");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.IdProfileHistory)
                    .HasColumnName("ID_PROFILE_HISTORY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AmLatitude).HasColumnName("AM_LATITUDE");

                entity.Property(e => e.AmLongitude).HasColumnName("AM_LONGITUDE");

                entity.Property(e => e.CdCountry)
                    .HasColumnName("CD_COUNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .IsRequired()
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdState)
                    .IsRequired()
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAccumailMsg)
                    .HasColumnName("DS_ACCUMAIL_MSG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr1Name)
                    .HasColumnName("DS_ADDR1_NAME")
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAddr2)
                    .IsRequired()
                    .HasColumnName("DS_ADDR2")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCity)
                    .IsRequired()
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsRawAddress)
                    .HasColumnName("DS_RAW_ADDRESS")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsReason)
                    .HasColumnName("DS_REASON")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .IsRequired()
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAddressValidated).HasColumnName("IN_ADDRESS_VALIDATED");

                entity.Property(e => e.InHistory)
                    .IsRequired()
                    .HasColumnName("IN_HISTORY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.InUsAddress)
                    .HasColumnName("IN_US_ADDRESS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('YES')");

                entity.Property(e => e.NmFirst)
                    .IsRequired()
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmLast)
                    .IsRequired()
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmMaiden)
                    .IsRequired()
                    .HasColumnName("NM_MAIDEN")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmMiddle)
                    .HasColumnName("NM_MIDDLE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmSuffix)
                    .IsRequired()
                    .HasColumnName("NM_SUFFIX")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.IdProfileNavigation)
                    .WithMany(p => p.ProfileHistory)
                    .HasForeignKey(d => d.IdProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PROFILE_H__ID_PR__0B5CAFEA");
            });

            modelBuilder.Entity<ProfileRelation>(entity =>
            {
                entity.ToTable("PROFILE_RELATION");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AmDistance).HasColumnName("AM_DISTANCE");

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConfirmed)
                    .HasColumnName("DT_CONFIRMED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdConfirmed)
                    .HasColumnName("ID_CONFIRMED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdProfileMaster).HasColumnName("ID_PROFILE_MASTER");

                entity.Property(e => e.IdProfileRelated).HasColumnName("ID_PROFILE_RELATED");

                entity.HasOne(d => d.IdProfileMasterNavigation)
                    .WithMany(p => p.ProfileRelationIdProfileMasterNavigation)
                    .HasForeignKey(d => d.IdProfileMaster)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PROFILE_R__ID_PR__59DCC4F4");

                entity.HasOne(d => d.IdProfileRelatedNavigation)
                    .WithMany(p => p.ProfileRelationIdProfileRelatedNavigation)
                    .HasForeignKey(d => d.IdProfileRelated)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PROFILE_R__ID_PR__58E8A0BB");
            });

            modelBuilder.Entity<QiAssessment>(entity =>
            {
                entity.HasKey(e => e.IdAssessment);

                entity.ToTable("QI_ASSESSMENT");

                entity.Property(e => e.IdAssessment)
                    .HasColumnName("ID_ASSESSMENT")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmMonth).HasColumnName("AM_MONTH");

                entity.Property(e => e.AmQi).HasColumnName("AM_QI");

                entity.Property(e => e.AmScoreToPass).HasColumnName("AM_SCORE_TO_PASS");

                entity.Property(e => e.AmToNorm).HasColumnName("AM_TO_NORM");

                entity.Property(e => e.AmYear).HasColumnName("AM_YEAR");

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdOfficial)
                    .HasColumnName("CD_OFFICIAL")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdPass)
                    .HasColumnName("CD_PASS")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CdPassTotal)
                    .HasColumnName("CD_PASS_TOTAL")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdQiSubtype)
                    .HasColumnName("CD_QI_SUBTYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdQiType)
                    .HasColumnName("CD_QI_TYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFrom)
                    .HasColumnName("DT_FROM")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTo)
                    .HasColumnName("DT_TO")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCriteria).HasColumnName("ID_CRITERIA");
            });

            modelBuilder.Entity<QiMeasure>(entity =>
            {
                entity.HasKey(e => e.IdMeasure);

                entity.ToTable("QI_MEASURE");

                entity.Property(e => e.IdMeasure).HasColumnName("ID_MEASURE");

                entity.Property(e => e.AmAttendees).HasColumnName("AM_ATTENDEES");

                entity.Property(e => e.AmMeasureTime)
                    .HasColumnName("AM_MEASURE_TIME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AmPoints).HasColumnName("AM_POINTS");

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdMeasureType)
                    .HasColumnName("CD_MEASURE_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsMonitor)
                    .HasColumnName("DS_MONITOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtMeasure)
                    .HasColumnName("DT_MEASURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdQiMeasure).HasColumnName("ID_QI_MEASURE");

                entity.Property(e => e.InAttended).HasColumnName("IN_ATTENDED");

                entity.Property(e => e.InFollowup).HasColumnName("IN_FOLLOWUP");

                entity.Property(e => e.NmMeasure)
                    .HasColumnName("NM_MEASURE")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuestionValidation>(entity =>
            {
                entity.ToTable("QUESTION_VALIDATION");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DsErrNsa)
                    .HasColumnName("DS_ERR_NSA")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsParameter).HasColumnName("DS_PARAMETER");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");

                entity.Property(e => e.IdValidation).HasColumnName("ID_VALIDATION");

                entity.Property(e => e.NmShort)
                    .HasColumnName("NM_SHORT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdQuestionNavigation)
                    .WithMany(p => p.QuestionValidation)
                    .HasForeignKey(d => d.IdQuestion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__QUESTION___ID_QU__3BAD438F");
            });

            modelBuilder.Entity<RabiesExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("RABIES_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAdminBy)
                    .HasColumnName("CD_ADMIN_BY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdAnimalNotTested)
                    .HasColumnName("CD_ANIMAL_NOT_TESTED")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdAnimalTested)
                    .HasColumnName("CD_ANIMAL_TESTED")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdAnimalWas)
                    .HasColumnName("CD_ANIMAL_WAS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdAttackProvoked)
                    .HasColumnName("CD_ATTACK_PROVOKED")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdConsultedPep)
                    .HasColumnName("CD_CONSULTED_PEP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdRelationshipAnimal)
                    .HasColumnName("CD_RELATIONSHIP_ANIMAL")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdReportedAnimalControl)
                    .HasColumnName("CD_REPORTED_ANIMAL_CONTROL")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdSuppliedBy)
                    .HasColumnName("CD_SUPPLIED_BY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdTypeExposure)
                    .HasColumnName("CD_TYPE_EXPOSURE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdTypePep)
                    .HasColumnName("CD_TYPE_PEP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdVaccBy)
                    .HasColumnName("CD_VACC_BY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsAfterExposure)
                    .HasColumnName("DS_AFTER_EXPOSURE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsBegunCounty)
                    .HasColumnName("DS_BEGUN_COUNTY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsBiteSpecify)
                    .HasColumnName("DS_BITE_SPECIFY")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotGivenSpecify)
                    .HasColumnName("DS_NOT_GIVEN_SPECIFY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsNottestedOther)
                    .HasColumnName("DS_NOTTESTED_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherSpecify)
                    .HasColumnName("DS_OTHER_SPECIFY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherTreatment)
                    .HasColumnName("DS_OTHER_TREATMENT")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DsOthersiteSpecify)
                    .HasColumnName("DS_OTHERSITE_SPECIFY")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsRecommendedName)
                    .HasColumnName("DS_RECOMMENDED_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsRelationshipSpecify)
                    .HasColumnName("DS_RELATIONSHIP_SPECIFY")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsSuppliedByOther)
                    .HasColumnName("DS_SUPPLIED_BY_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsTestedOther)
                    .HasColumnName("DS_TESTED_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsTypeVacc)
                    .HasColumnName("DS_TYPE_VACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsWhereBite)
                    .HasColumnName("DS_WHERE_BITE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDateVacc)
                    .HasColumnName("DT_DATE_VACC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExposure)
                    .HasColumnName("DT_EXPOSURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtLastVacc)
                    .HasColumnName("DT_LAST_VACC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPepInitiated)
                    .HasColumnName("DT_PEP_INITIATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSeePhysician)
                    .HasColumnName("DT_SEE_PHYSICIAN")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTested)
                    .HasColumnName("DT_TESTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAnimalTested)
                    .HasColumnName("IN_ANIMAL_TESTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEverVacc)
                    .HasColumnName("IN_EVER_VACC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGaveAntibiotics)
                    .HasColumnName("IN_GAVE_ANTIBIOTICS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGaveTetanus)
                    .HasColumnName("IN_GAVE_TETANUS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHeadNeck)
                    .HasColumnName("IN_HEAD_NECK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPatientWashed)
                    .HasColumnName("IN_PATIENT_WASHED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPepInitiated)
                    .HasColumnName("IN_PEP_INITIATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPepRecommended)
                    .HasColumnName("IN_PEP_RECOMMENDED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPreviouslyVacc)
                    .HasColumnName("IN_PREVIOUSLY_VACC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSuturedWound)
                    .HasColumnName("IN_SUTURED_WOUND")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWashedFlushed)
                    .HasColumnName("IN_WASHED_FLUSHED")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Relationship>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.CdRelType, e.IdIdentifier });

                entity.ToTable("RELATIONSHIP");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.CdRelType)
                    .HasColumnName("CD_REL_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdIdentifier)
                    .HasColumnName("ID_IDENTIFIER")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsComments)
                    .IsRequired()
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRelEffective)
                    .HasColumnName("DT_REL_EFFECTIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRelEnd)
                    .HasColumnName("DT_REL_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<ReportCriteria>(entity =>
            {
                entity.HasKey(e => e.IdCriteria);

                entity.ToTable("REPORT_CRITERIA");

                entity.HasIndex(e => new { e.NmReport, e.InDefault })
                    .HasName("IDX_REPORT_CRITERIA_DEFAULT_TEMPLATE");

                entity.Property(e => e.IdCriteria)
                    .HasColumnName("ID_CRITERIA")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmAgeFrom).HasColumnName("AM_AGE_FROM");

                entity.Property(e => e.AmAgeFrom1).HasColumnName("AM_AGE_FROM1");

                entity.Property(e => e.AmAgeFrom2).HasColumnName("AM_AGE_FROM2");

                entity.Property(e => e.AmAgeFrom3).HasColumnName("AM_AGE_FROM3");

                entity.Property(e => e.AmAgeFrom4).HasColumnName("AM_AGE_FROM4");

                entity.Property(e => e.AmAgeFrom5).HasColumnName("AM_AGE_FROM5");

                entity.Property(e => e.AmAgeFrom6).HasColumnName("AM_AGE_FROM6");

                entity.Property(e => e.AmAgeTo).HasColumnName("AM_AGE_TO");

                entity.Property(e => e.AmAgeTo1).HasColumnName("AM_AGE_TO1");

                entity.Property(e => e.AmAgeTo2).HasColumnName("AM_AGE_TO2");

                entity.Property(e => e.AmAgeTo3).HasColumnName("AM_AGE_TO3");

                entity.Property(e => e.AmAgeTo4).HasColumnName("AM_AGE_TO4");

                entity.Property(e => e.AmAgeTo5).HasColumnName("AM_AGE_TO5");

                entity.Property(e => e.AmAgeTo6).HasColumnName("AM_AGE_TO6");

                entity.Property(e => e.AmLimit).HasColumnName("AM_LIMIT");

                entity.Property(e => e.AmRows).HasColumnName("AM_ROWS");

                entity.Property(e => e.AmWeekFrom).HasColumnName("AM_WEEK_FROM");

                entity.Property(e => e.AmWeekTo).HasColumnName("AM_WEEK_TO");

                entity.Property(e => e.AmYearFrom).HasColumnName("AM_YEAR_FROM");

                entity.Property(e => e.AmYearTo).HasColumnName("AM_YEAR_TO");

                entity.Property(e => e.CdBiotype)
                    .HasColumnName("CD_BIOTYPE")
                    .IsUnicode(false);

                entity.Property(e => e.CdCaseStatus)
                    .HasColumnName("CD_CASE_STATUS")
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .IsUnicode(false);

                entity.Property(e => e.CdEthnicityReason)
                    .HasColumnName("CD_ETHNICITY_REASON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFiletype)
                    .HasColumnName("CD_FILETYPE")
                    .HasMaxLength(24);

                entity.Property(e => e.CdInvestigator)
                    .HasColumnName("CD_INVESTIGATOR")
                    .IsUnicode(false);

                entity.Property(e => e.CdPerformType)
                    .HasColumnName("CD_PERFORM_TYPE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CdPeriodicForm)
                    .HasColumnName("CD_PERIODIC_FORM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CdRaceReason)
                    .HasColumnName("CD_RACE_REASON")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerogroup)
                    .HasColumnName("CD_SEROGROUP")
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecies)
                    .HasColumnName("CD_SPECIES")
                    .IsUnicode(false);

                entity.Property(e => e.CdStrain)
                    .HasColumnName("CD_STRAIN")
                    .IsUnicode(false);

                entity.Property(e => e.DsBreakby)
                    .HasColumnName("DS_BREAKBY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCaseStatus)
                    .HasColumnName("DS_CASE_STATUS")
                    .IsUnicode(false);

                entity.Property(e => e.DsClass)
                    .HasColumnName("DS_CLASS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsClause)
                    .HasColumnName("DS_CLAUSE")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsComparison)
                    .HasColumnName("DS_COMPARISON")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCountry)
                    .HasColumnName("DS_COUNTRY")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsCustomHeader)
                    .HasColumnName("DS_CUSTOM_HEADER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDatafrom)
                    .HasColumnName("DS_DATAFROM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsDatetype)
                    .HasColumnName("DS_DATETYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsDaycare)
                    .HasColumnName("DS_DAYCARE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsEthnicity)
                    .HasColumnName("DS_ETHNICITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsFilter)
                    .HasColumnName("DS_FILTER")
                    .IsUnicode(false);

                entity.Property(e => e.DsFilterAdditional)
                    .HasColumnName("DS_FILTER_ADDITIONAL")
                    .HasMaxLength(270)
                    .IsUnicode(false);

                entity.Property(e => e.DsGender)
                    .HasColumnName("DS_GENDER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsGraphby)
                    .HasColumnName("DS_GRAPHBY")
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.DsGraphtype)
                    .HasColumnName("DS_GRAPHTYPE")
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.DsGroupby)
                    .HasColumnName("DS_GROUPBY")
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.DsHospitalized)
                    .HasColumnName("DS_HOSPITALIZED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsHospitalizedForDisease)
                    .HasColumnName("DS_HOSPITALIZED_FOR_DISEASE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsImported)
                    .HasColumnName("DS_IMPORTED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsJurisdiction)
                    .HasColumnName("DS_JURISDICTION")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsNavPage)
                    .HasColumnName("DS_NAV_PAGE")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.DsNavReport)
                    .HasColumnName("DS_NAV_REPORT")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.DsOccupation)
                    .HasColumnName("DS_OCCUPATION")
                    .IsUnicode(false);

                entity.Property(e => e.DsOutbreak)
                    .HasColumnName("DS_OUTBREAK")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOutcome)
                    .HasColumnName("DS_OUTCOME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsPerformBy)
                    .HasColumnName("DS_PERFORM_BY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsProphalaxed)
                    .HasColumnName("DS_PROPHALAXED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsRace)
                    .HasColumnName("DS_RACE")
                    .IsUnicode(false);

                entity.Property(e => e.DsReport)
                    .HasColumnName("DS_REPORT")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.DsReportedType)
                    .HasColumnName("DS_REPORTED_TYPE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRiskFactor)
                    .HasColumnName("DS_RISK_FACTOR")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpDesc)
                    .HasColumnName("DS_SP_DESC")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpName)
                    .HasColumnName("DS_SP_NAME")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.DsState)
                    .HasColumnName("DS_STATE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsSubRiskFactor)
                    .HasColumnName("DS_SUB_RISK_FACTOR")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCompleted)
                    .HasColumnName("DT_COMPLETED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFrom)
                    .HasColumnName("DT_FROM")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFrom1)
                    .HasColumnName("DT_FROM1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFrom2)
                    .HasColumnName("DT_FROM2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFrom3)
                    .HasColumnName("DT_FROM3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRange)
                    .HasColumnName("DT_RANGE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtTemplate)
                    .HasColumnName("DT_TEMPLATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTo)
                    .HasColumnName("DT_TO")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTo1)
                    .HasColumnName("DT_TO1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTo2)
                    .HasColumnName("DT_TO2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTo3)
                    .HasColumnName("DT_TO3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DxCode)
                    .HasColumnName("DX_CODE")
                    .IsUnicode(false);

                entity.Property(e => e.DxFamily)
                    .HasColumnName("DX_FAMILY")
                    .IsUnicode(false);

                entity.Property(e => e.DxStatus)
                    .HasColumnName("DX_STATUS")
                    .IsUnicode(false);

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InBuiltData)
                    .HasColumnName("IN_BUILT_DATA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDateTypeWeek).HasColumnName("IN_DATE_TYPE_WEEK");

                entity.Property(e => e.InDefault)
                    .HasColumnName("IN_DEFAULT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDied)
                    .HasColumnName("IN_DIED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InFooter)
                    .HasColumnName("IN_FOOTER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InInsurance)
                    .HasColumnName("IN_INSURANCE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InInterviewed)
                    .HasColumnName("IN_INTERVIEWED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InInvestigated)
                    .HasColumnName("IN_INVESTIGATED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InMedicaid)
                    .HasColumnName("IN_MEDICAID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InSymptomatic)
                    .HasColumnName("IN_SYMPTOMATIC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InTemplate)
                    .HasColumnName("IN_TEMPLATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NmReport)
                    .HasColumnName("NM_REPORT")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.NmTemplate)
                    .HasColumnName("NM_TEMPLATE")
                    .HasMaxLength(125)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportFields>(entity =>
            {
                entity.HasKey(e => new { e.CdType, e.CdValue });

                entity.ToTable("REPORT_FIELDS");

                entity.Property(e => e.CdType)
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdValue)
                    .HasColumnName("CD_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAssociation)
                    .HasColumnName("DS_ASSOCIATION")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.DsElement)
                    .HasColumnName("DS_ELEMENT")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.IdSequence).HasColumnName("ID_SEQUENCE");

                entity.Property(e => e.NmLong)
                    .HasColumnName("NM_LONG")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.NmShort)
                    .HasColumnName("NM_SHORT")
                    .HasMaxLength(125)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportParamSelection>(entity =>
            {
                entity.HasKey(e => new { e.IdUser, e.NmReport, e.NmField });

                entity.ToTable("REPORT_PARAM_SELECTION");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmReport)
                    .HasColumnName("NM_REPORT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NmField)
                    .HasColumnName("NM_FIELD")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsFieldValue)
                    .HasColumnName("DS_FIELD_VALUE")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Resource>(entity =>
            {
                entity.HasKey(e => e.IdResource)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("RESOURCE");

                entity.Property(e => e.IdResource)
                    .HasColumnName("ID_RESOURCE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdResourceType)
                    .IsRequired()
                    .HasColumnName("CD_RESOURCE_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr1Name)
                    .HasColumnName("DS_ADDR1_NAME")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr2)
                    .HasColumnName("DS_ADDR2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsEmail)
                    .HasColumnName("DS_EMAIL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsFax)
                    .HasColumnName("DS_FAX")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhn)
                    .HasColumnName("DS_PHN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsSentinelNum)
                    .HasColumnName("DS_SENTINEL_NUM")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsWeekend)
                    .HasColumnName("DS_WEEKEND")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("DT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdElrLink)
                    .HasColumnName("ID_ELR_LINK")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InChd)
                    .HasColumnName("IN_CHD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMedExaminer).HasColumnName("IN_MED_EXAMINER");

                entity.Property(e => e.InRabiesLab).HasColumnName("IN_RABIES_LAB");

                entity.Property(e => e.InSentinel)
                    .HasColumnName("IN_SENTINEL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InStateLab)
                    .HasColumnName("IN_STATE_LAB")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.InUsed)
                    .HasColumnName("IN_USED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NmResource)
                    .IsRequired()
                    .HasColumnName("NM_RESOURCE")
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ResourceSetting>(entity =>
            {
                entity.HasKey(e => e.IdResourceSetting)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("RESOURCE_SETTING");

                entity.Property(e => e.IdResourceSetting)
                    .HasColumnName("ID_RESOURCE_SETTING")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdSetting)
                   .HasColumnName("CD_SETTING")
                   .HasMaxLength(20)
                   .IsUnicode(false);

                entity.Property(e => e.NmSetting)
                   .HasColumnName("NM_SETTING")
                   .HasMaxLength(20)
                   .IsUnicode(false);

                entity.Property(e => e.DsAddr1Name)
                 .HasColumnName("DS_ADDR1_NAME")
                 .HasMaxLength(65)
                 .IsUnicode(false);

                entity.Property(e => e.DsAddr2)
                    .HasColumnName("DS_ADDR2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                   .HasColumnName("DS_CITY")
                   .HasMaxLength(30)
                   .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                   .HasColumnName("DS_ZIP")
                   .HasMaxLength(10)
                   .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdCountry)
                    .HasColumnName("CD_COUNTRY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InUsAddress)
                    .HasColumnName("IN_US_ADDRESS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NmContact)
                   .HasColumnName("NM_CONTACT")
                   .HasMaxLength(50)
                   .IsUnicode(false);

                entity.Property(e => e.DsPhn)
                    .HasColumnName("DS_PHN")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DtEffective)
                   .HasColumnName("DT_EFFECTIVE")
                   .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("DT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.AmLatitude)
                .HasColumnName("AM_LATITUDE");

                entity.Property(e => e.AmLongitude)
                .HasColumnName("AM_LONGITUDE");

                entity.Property(e => e.InAddressValidated)
                .HasColumnName("IN_ADDRESS_VALIDATED");

                entity.Property(e => e.DsAccumailMsg)
                    .HasColumnName("DS_ACCUMAIL_MSG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsRawAddress)
                    .HasColumnName("DS_RAW_ADDRESS")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsAhcaNumber)
                    .HasColumnName("DS_AHCA_NUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);


            });

            modelBuilder.Entity<RiskFactor>(entity =>
            {
                entity.HasKey(e => e.InKey);

                entity.ToTable("RISK_FACTOR");

                entity.Property(e => e.InKey).HasColumnName("IN_KEY");

                entity.Property(e => e.CdType)
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDatabaseValue)
                    .HasColumnName("DS_DATABASE_VALUE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDisplayValue)
                    .HasColumnName("DS_DISPLAY_VALUE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDropDownDisplay)
                    .HasColumnName("DS_DROP_DOWN_DISPLAY")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsFldName)
                    .HasColumnName("DS_FLD_NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsFontSize)
                    .HasColumnName("DS_FONT_SIZE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsHeader)
                    .HasColumnName("DS_HEADER")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOrder)
                    .HasColumnName("DS_ORDER")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.DsTblName)
                    .HasColumnName("DS_TBL_NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InCustomLilelist)
                    .HasColumnName("IN_CUSTOM_LILELIST")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InExportable)
                    .HasColumnName("IN_EXPORTABLE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.InMultipleAnswers)
                    .HasColumnName("IN_MULTIPLE_ANSWERS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InRiskFactorReport)
                    .HasColumnName("IN_RISK_FACTOR_REPORT")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<SalmonellaContactExt>(entity =>
            {
                entity.HasKey(e => e.IdContact);

                entity.ToTable("SALMONELLA_CONTACT_EXT");

                entity.Property(e => e.IdContact)
                    .HasColumnName("ID_CONTACT")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdContactType)
                    .HasColumnName("CD_CONTACT_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdEthnicityContact)
                    .HasColumnName("CD_ETHNICITY_CONTACT")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdGenderContact)
                    .HasColumnName("CD_GENDER_CONTACT")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdRaceContact)
                    .HasColumnName("CD_RACE_CONTACT")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr1)
                    .HasColumnName("DS_ADDR_1")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddr2)
                    .HasColumnName("DS_ADDR_2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .HasColumnName("ds_notes")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhone)
                    .HasColumnName("DS_PHONE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtContactEnd)
                    .HasColumnName("DT_CONTACT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtContactStart)
                    .HasColumnName("DT_CONTACT_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InConfirmedCase)
                    .HasColumnName("IN_CONFIRMED_CASE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSensitiveSituation)
                    .HasColumnName("IN_SENSITIVE_SITUATION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalmonellaExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("SALMONELLA_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmHousehold5YearsOld).HasColumnName("AM_HOUSEHOLD_5_YEARS_OLD");

                entity.Property(e => e.AmHouseholdPeopleDiapers).HasColumnName("AM_HOUSEHOLD_PEOPLE_DIAPERS");

                entity.Property(e => e.AmHouseholdPets).HasColumnName("AM_HOUSEHOLD_PETS");

                entity.Property(e => e.AmHouseholdToilets).HasColumnName("AM_HOUSEHOLD_TOILETS");

                entity.Property(e => e.AmHouseholdTotalPeople).HasColumnName("AM_HOUSEHOLD_TOTAL_PEOPLE");

                entity.Property(e => e.CdBottlesCleanedHist)
                    .HasColumnName("CD_BOTTLES_CLEANED_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdConsumeAtRestaurantHist)
                    .HasColumnName("CD_CONSUME_AT_RESTAURANT_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdConsumeRawProduceHist)
                    .HasColumnName("CD_CONSUME_RAW_PRODUCE_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdContactsDiarrhea7DaysHist)
                    .HasColumnName("CD_CONTACTS_DIARRHEA_7_DAYS_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdDishwasherRun)
                    .HasColumnName("CD_DISHWASHER_RUN")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdDrinkUntreatedWaterHist)
                    .HasColumnName("CD_DRINK_UNTREATED_WATER_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdEggsPrepared)
                    .HasColumnName("CD_EGGS_PREPARED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposureAnimals2Hist)
                    .HasColumnName("CD_EXPOSURE_ANIMALS2_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposureAnimalsHist)
                    .HasColumnName("CD_EXPOSURE_ANIMALS_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdHoursSpendOutdoors)
                    .HasColumnName("CD_HOURS_SPEND_OUTDOORS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdHowBottlesCleaned)
                    .HasColumnName("CD_HOW_BOTTLES_CLEANED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdHowTeethingCleaned)
                    .HasColumnName("CD_HOW_TEETHING_CLEANED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdMadeWaterDrink)
                    .HasColumnName("CD_MADE_WATER_DRINK")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdMealsPrepared)
                    .HasColumnName("CD_MEALS_PREPARED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdMeatPreparedWeek)
                    .HasColumnName("CD_MEAT_PREPARED_WEEK")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdMeatThawedCookingHist)
                    .HasColumnName("CD_MEAT_THAWED_COOKING_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdOutdoorActivitiesHist)
                    .HasColumnName("CD_OUTDOOR_ACTIVITIES_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdPetCleanFrequency)
                    .HasColumnName("CD_PET_CLEAN_FREQUENCY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdPetFoodTypeHist)
                    .HasColumnName("CD_PET_FOOD_TYPE_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdPetFoodWhereHist)
                    .HasColumnName("CD_PET_FOOD_WHERE_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdPipedWaterType)
                    .HasColumnName("CD_PIPED_WATER_TYPE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdPrepareRawMeatHist)
                    .HasColumnName("CD_PREPARE_RAW_MEAT_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdRecWaterHist)
                    .HasColumnName("CD_REC_WATER_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdResidenceSetting)
                    .HasColumnName("CD_RESIDENCE_SETTING")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdResidenceType)
                    .HasColumnName("CD_RESIDENCE_TYPE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdSeeReptilesWeek)
                    .HasColumnName("CD_SEE_REPTILES_WEEK")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerogroup)
                    .HasColumnName("CD_SEROGROUP")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerotype)
                    .HasColumnName("CD_SEROTYPE")
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.CdShoesWornInside)
                    .HasColumnName("CD_SHOES_WORN_INSIDE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdSurfacesCleanedHist)
                    .HasColumnName("CD_SURFACES_CLEANED_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdSurfacesUsedPrepareHist)
                    .HasColumnName("CD_SURFACES_USED_PREPARE_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdTeethingCleanedHist)
                    .HasColumnName("CD_TEETHING_CLEANED_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdThreeDaysFormulaPowderHist)
                    .HasColumnName("CD_THREE_DAYS_FORMULA_POWDER_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdThreeDaysSpendFloor)
                    .HasColumnName("CD_THREE_DAYS_SPEND_FLOOR")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CdTravelTypeHist)
                    .HasColumnName("CD_TRAVEL_TYPE_HIST")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdTypeFilterUsedHist)
                    .HasColumnName("CD_TYPE_FILTER_USED_HIST")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdUseSoapHand)
                    .HasColumnName("CD_USE_SOAP_HAND")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdWashHands)
                    .HasColumnName("CD_WASH_HANDS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdWasteDisposalType)
                    .HasColumnName("CD_WASTE_DISPOSAL_TYPE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdWaterDrink)
                    .HasColumnName("CD_WATER_DRINK")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsAnimalHistoryComments)
                    .HasColumnName("DS_ANIMAL_HISTORY_COMMENTS")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsBottlesCleanedOther)
                    .HasColumnName("DS_BOTTLES_CLEANED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsCdcClusterCode)
                    .HasColumnName("DS_CDC_CLUSTER_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsChildExposure)
                    .HasColumnName("DS_CHILD_EXPOSURE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsChildrenDaycare)
                    .HasColumnName("DS_CHILDREN_DAYCARE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeAtRestaurant)
                    .HasColumnName("DS_CONSUME_AT_RESTAURANT")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeBeef)
                    .HasColumnName("DS_CONSUME_BEEF")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeButcherEthnicMarket)
                    .HasColumnName("DS_CONSUME_BUTCHER_ETHNIC_MARKET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeCheese)
                    .HasColumnName("DS_CONSUME_CHEESE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeEggs)
                    .HasColumnName("DS_CONSUME_EGGS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeFish)
                    .HasColumnName("DS_CONSUME_FISH")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeFoodRecall)
                    .HasColumnName("DS_CONSUME_FOOD_RECALL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeFreshFruits)
                    .HasColumnName("DS_CONSUME_FRESH_FRUITS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeFreshVegetables)
                    .HasColumnName("DS_CONSUME_FRESH_VEGETABLES")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeJuice)
                    .HasColumnName("DS_CONSUME_JUICE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeMilkProducts)
                    .HasColumnName("DS_CONSUME_MILK_PRODUCTS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeNuts)
                    .HasColumnName("DS_CONSUME_NUTS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumePeanut)
                    .HasColumnName("DS_CONSUME_PEANUT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumePork)
                    .HasColumnName("DS_CONSUME_PORK")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumePoultry)
                    .HasColumnName("DS_CONSUME_POULTRY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeRawEggs)
                    .HasColumnName("DS_CONSUME_RAW_EGGS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeRawProduce)
                    .HasColumnName("DS_CONSUME_RAW_PRODUCE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeRestaurantOther)
                    .HasColumnName("DS_CONSUME_RESTAURANT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeShellFish)
                    .HasColumnName("DS_CONSUME_SHELL_FISH")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeSlaughtered)
                    .HasColumnName("DS_CONSUME_SLAUGHTERED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeStand)
                    .HasColumnName("DS_CONSUME_STAND")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactDiapered)
                    .HasColumnName("DS_CONTACT_DIAPERED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactHealthcare)
                    .HasColumnName("DS_CONTACT_HEALTHCARE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsDrinkUntreatedWater)
                    .HasColumnName("DS_DRINK_UNTREATED_WATER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsDrinkUntreatedWaterOther)
                    .HasColumnName("DS_DRINK_UNTREATED_WATER_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsEatGroupMeal)
                    .HasColumnName("DS_EAT_GROUP_MEAL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsEatOutdoorSetting)
                    .HasColumnName("DS_EAT_OUTDOOR_SETTING")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsEpidemiologicLink)
                    .HasColumnName("DS_EPIDEMIOLOGIC_LINK")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposureAnimalOther)
                    .HasColumnName("DS_EXPOSURE_ANIMAL_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposureAnimalSettingOther)
                    .HasColumnName("DS_EXPOSURE_ANIMAL_SETTING_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposureExcreta)
                    .HasColumnName("DS_EXPOSURE_EXCRETA")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposurePeriod)
                    .HasColumnName("DS_EXPOSURE_PERIOD")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposurePeriodLongTerm)
                    .HasColumnName("DS_EXPOSURE_PERIOD_LONG_TERM")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsLiveInstitution)
                    .HasColumnName("DS_LIVE_INSTITUTION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsMeatThawedCookingOther)
                    .HasColumnName("DS_MEAT_THAWED_COOKING_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOccupationsHousehold)
                    .HasColumnName("DS_OCCUPATIONS_HOUSEHOLD")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsOutdoorActivities)
                    .HasColumnName("DS_OUTDOOR_ACTIVITIES")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOutdoorActivitiesOther)
                    .HasColumnName("DS_OUTDOOR_ACTIVITIES_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPetFoodLocationOther)
                    .HasColumnName("DS_PET_FOOD_LOCATION_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPetFoodOther)
                    .HasColumnName("DS_PET_FOOD_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfge)
                    .HasColumnName("DS_PFGE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfgeFlorida)
                    .HasColumnName("DS_PFGE_FLORIDA")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsPipedWaterType)
                    .HasColumnName("DS_PIPED_WATER_TYPE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPrepareFoodSymptomatic)
                    .HasColumnName("DS_PREPARE_FOOD_SYMPTOMATIC")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsPrepareRawMeatOther)
                    .HasColumnName("DS_PREPARE_RAW_MEAT_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPublicHealthInformation)
                    .HasColumnName("DS_PUBLIC_HEALTH_INFORMATION")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsRecWater)
                    .HasColumnName("DS_REC_WATER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsRecWaterOther)
                    .HasColumnName("DS_REC_WATER_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsResidenceSettingOther)
                    .HasColumnName("DS_RESIDENCE_SETTING_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsResidenceTypeOther)
                    .HasColumnName("DS_RESIDENCE_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsSurfacesCleanedOther)
                    .HasColumnName("DS_SURFACES_CLEANED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsSurfacesUsedPrepareOther)
                    .HasColumnName("DS_SURFACES_USED_PREPARE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsTeethingCleanedOther)
                    .HasColumnName("DS_TEETHING_CLEANED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsThreeDaysBreastMilk)
                    .HasColumnName("DS_THREE_DAYS_BREAST_MILK")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsThreeDaysCereals)
                    .HasColumnName("DS_THREE_DAYS_CEREALS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsThreeDaysFormulaCan)
                    .HasColumnName("DS_THREE_DAYS_FORMULA_CAN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsThreeDaysFormulaPowder)
                    .HasColumnName("DS_THREE_DAYS_FORMULA_POWDER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsThreeDaysFormulaPowderOther)
                    .HasColumnName("DS_THREE_DAYS_FORMULA_POWDER_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsThreeDaysHomemadeFood)
                    .HasColumnName("DS_THREE_DAYS_HOMEMADE_FOOD")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsThreeDaysHomemadeJuice)
                    .HasColumnName("DS_THREE_DAYS_HOMEMADE_JUICE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsThreeDaysStoreFood)
                    .HasColumnName("DS_THREE_DAYS_STORE_FOOD")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsTypeFilterUsedOther)
                    .HasColumnName("DS_TYPE_FILTER_USED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsWasteDisposalTypeOther)
                    .HasColumnName("DS_WASTE_DISPOSAL_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InBottlesCleanedBottleBrush)
                    .HasColumnName("IN_BOTTLES_CLEANED_BOTTLE_BRUSH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBottlesCleanedDishwasher)
                    .HasColumnName("IN_BOTTLES_CLEANED_DISHWASHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBottlesCleanedOther)
                    .HasColumnName("IN_BOTTLES_CLEANED_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBottlesCleanedRinsed)
                    .HasColumnName("IN_BOTTLES_CLEANED_RINSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBottlesCleanedSterilized)
                    .HasColumnName("IN_BOTTLES_CLEANED_STERILIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBottlesCleanedUnk)
                    .HasColumnName("IN_BOTTLES_CLEANED_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBottlesCleanedWashed)
                    .HasColumnName("IN_BOTTLES_CLEANED_WASHED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InChildrenDaycare)
                    .HasColumnName("IN_CHILDREN_DAYCARE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCleanupPetFeces)
                    .HasColumnName("IN_CLEANUP_PET_FECES")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.InCleanupPetFecesFrequently)
                    .HasColumnName("IN_CLEANUP_PET_FECES_FREQUENTLY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeAtRestaurant)
                    .HasColumnName("IN_CONSUME_AT_RESTAURANT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeBeef)
                    .HasColumnName("IN_CONSUME_BEEF")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeBeefUndercooked)
                    .HasColumnName("IN_CONSUME_BEEF_UNDERCOOKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeButcherEthnicMarket)
                    .HasColumnName("IN_CONSUME_BUTCHER_ETHNIC_MARKET")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeCheese)
                    .HasColumnName("IN_CONSUME_CHEESE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeEggs)
                    .HasColumnName("IN_CONSUME_EGGS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeEggsUndercooked)
                    .HasColumnName("IN_CONSUME_EGGS_UNDERCOOKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeFish)
                    .HasColumnName("IN_CONSUME_FISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeFishUndercooked)
                    .HasColumnName("IN_CONSUME_FISH_UNDERCOOKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeFoodRecall)
                    .HasColumnName("IN_CONSUME_FOOD_RECALL")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeFreshFruits)
                    .HasColumnName("IN_CONSUME_FRESH_FRUITS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeFreshVegetables)
                    .HasColumnName("IN_CONSUME_FRESH_VEGETABLES")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeJuice)
                    .HasColumnName("IN_CONSUME_JUICE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeMilkProducts)
                    .HasColumnName("IN_CONSUME_MILK_PRODUCTS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeNuts)
                    .HasColumnName("IN_CONSUME_NUTS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumePeanut)
                    .HasColumnName("IN_CONSUME_PEANUT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumePork)
                    .HasColumnName("IN_CONSUME_PORK")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumePorkUndercooked)
                    .HasColumnName("IN_CONSUME_PORK_UNDERCOOKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumePoultry)
                    .HasColumnName("IN_CONSUME_POULTRY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumePoultryUndercooked)
                    .HasColumnName("IN_CONSUME_POULTRY_UNDERCOOKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawEggs)
                    .HasColumnName("IN_CONSUME_RAW_EGGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProduce)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProduceCantaloupe)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE_CANTALOUPE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProduceCilantro)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE_CILANTRO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProduceFoodSalad)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE_FOOD_SALAD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProduceGreenOnions)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE_GREEN_ONIONS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProduceLettuce)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE_LETTUCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProducePeppers)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE_PEPPERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProduceSprouts)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE_SPROUTS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRawProduceTomatoes)
                    .HasColumnName("IN_CONSUME_RAW_PRODUCE_TOMATOES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRestaurantDelivery)
                    .HasColumnName("IN_CONSUME_RESTAURANT_DELIVERY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRestaurantFastFood)
                    .HasColumnName("IN_CONSUME_RESTAURANT_FAST_FOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRestaurantOther)
                    .HasColumnName("IN_CONSUME_RESTAURANT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRestaurantSelfService)
                    .HasColumnName("IN_CONSUME_RESTAURANT_SELF_SERVICE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeRestaurantSitDown)
                    .HasColumnName("IN_CONSUME_RESTAURANT_SIT_DOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeShellFish)
                    .HasColumnName("IN_CONSUME_SHELL_FISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeShellFishUndercooked)
                    .HasColumnName("IN_CONSUME_SHELL_FISH_UNDERCOOKED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeSlaughtered)
                    .HasColumnName("IN_CONSUME_SLAUGHTERED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeStand)
                    .HasColumnName("IN_CONSUME_STAND")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InContactDiapered)
                    .HasColumnName("IN_CONTACT_DIAPERED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactHealthcare)
                    .HasColumnName("IN_CONTACT_HEALTHCARE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrhea24hAfter)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_24H_AFTER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrhea24hBefore)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_24H_BEFORE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrhea7Days)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_7_DAYS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrheaHousehold)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_HOUSEHOLD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrheaUnk)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrheaWithin24h)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_WITHIN_24H")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrinkSharedWell)
                    .HasColumnName("IN_DRINK_SHARED_WELL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrinkUntreatedWater)
                    .HasColumnName("IN_DRINK_UNTREATED_WATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrinkUntreatedWaterOther)
                    .HasColumnName("IN_DRINK_UNTREATED_WATER_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrinkUntreatedWaterWell)
                    .HasColumnName("IN_DRINK_UNTREATED_WATER_WELL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEatGroupMeal)
                    .HasColumnName("IN_EAT_GROUP_MEAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEatOutdoorSetting)
                    .HasColumnName("IN_EAT_OUTDOOR_SETTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InEpidemiologicLink)
                    .HasColumnName("IN_EPIDEMIOLOGIC_LINK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimals)
                    .HasColumnName("IN_EXPOSURE_ANIMALS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsBird)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_BIRD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsCat)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_CAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsChicken)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_CHICKEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsCow)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_COW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsDog)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_DOG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsDuck)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_DUCK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsFish)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_FISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsFrog)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_FROG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsGoat)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_GOAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsHamster)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_HAMSTER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsHorse)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_HORSE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsLizard)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_LIZARD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsOther)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsSetDayCare)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_SET_DAY_CARE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsSetFarm)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_SET_FARM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsSetOther)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_SET_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsSetPet)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_SET_PET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsSetWild)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_SET_WILD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsSetZooFair)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_SET_ZOO_FAIR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsSnake)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_SNAKE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureAnimalsTurtle)
                    .HasColumnName("IN_EXPOSURE_ANIMALS_TURTLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureExcreta)
                    .HasColumnName("IN_EXPOSURE_EXCRETA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFruitsSameSurfacesMeal)
                    .HasColumnName("IN_FRUITS_SAME_SURFACES_MEAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLiveInstitution)
                    .HasColumnName("IN_LIVE_INSTITUTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLiveNearIndustrialFarms)
                    .HasColumnName("IN_LIVE_NEAR_INDUSTRIAL_FARMS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMeatThawedCookingKitchen)
                    .HasColumnName("IN_MEAT_THAWED_COOKING_KITCHEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMeatThawedCookingMicrowave)
                    .HasColumnName("IN_MEAT_THAWED_COOKING_MICROWAVE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMeatThawedCookingNeverFrozen)
                    .HasColumnName("IN_MEAT_THAWED_COOKING_NEVER_FROZEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMeatThawedCookingOther)
                    .HasColumnName("IN_MEAT_THAWED_COOKING_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMeatThawedCookingRefrigerator)
                    .HasColumnName("IN_MEAT_THAWED_COOKING_REFRIGERATOR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMeatThawedCookingUnderWater)
                    .HasColumnName("IN_MEAT_THAWED_COOKING_UNDER_WATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMeatThawedCookingUnk)
                    .HasColumnName("IN_MEAT_THAWED_COOKING_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InNeighborsPoultryLivestock)
                    .HasColumnName("IN_NEIGHBORS_POULTRY_LIVESTOCK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOccupationsExposureAnimals)
                    .HasColumnName("IN_OCCUPATIONS_EXPOSURE_ANIMALS")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.InOccupationsExposureSoil)
                    .HasColumnName("IN_OCCUPATIONS_EXPOSURE_SOIL")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivities)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivitiesCamping)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES_CAMPING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivitiesFishing)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES_FISHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivitiesHiking)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES_HIKING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivitiesHunting)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES_HUNTING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivitiesOther)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivitiesPlaying)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES_PLAYING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivitiesSports)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES_SPORTS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOutdoorActivitiesYardWork)
                    .HasColumnName("IN_OUTDOOR_ACTIVITIES_YARD_WORK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodTypeDry)
                    .HasColumnName("IN_PET_FOOD_TYPE_DRY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodTypeFreshFrozen)
                    .HasColumnName("IN_PET_FOOD_TYPE_FRESH_FROZEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodTypeOther)
                    .HasColumnName("IN_PET_FOOD_TYPE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodTypeRaw)
                    .HasColumnName("IN_PET_FOOD_TYPE_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodTypeUnk)
                    .HasColumnName("IN_PET_FOOD_TYPE_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodWhereGarage)
                    .HasColumnName("IN_PET_FOOD_WHERE_GARAGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodWhereKitchen)
                    .HasColumnName("IN_PET_FOOD_WHERE_KITCHEN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodWhereLaundry)
                    .HasColumnName("IN_PET_FOOD_WHERE_LAUNDRY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodWhereOther)
                    .HasColumnName("IN_PET_FOOD_WHERE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetFoodWhereUnk)
                    .HasColumnName("IN_PET_FOOD_WHERE_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPetsInHousehold)
                    .HasColumnName("IN_PETS_IN_HOUSEHOLD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareFoodSymptomatic)
                    .HasColumnName("IN_PREPARE_FOOD_SYMPTOMATIC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareRawMeat)
                    .HasColumnName("IN_PREPARE_RAW_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareRawMeatBeef)
                    .HasColumnName("IN_PREPARE_RAW_MEAT_BEEF")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareRawMeatFish)
                    .HasColumnName("IN_PREPARE_RAW_MEAT_FISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareRawMeatOther)
                    .HasColumnName("IN_PREPARE_RAW_MEAT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareRawMeatPork)
                    .HasColumnName("IN_PREPARE_RAW_MEAT_PORK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareRawMeatPoultry)
                    .HasColumnName("IN_PREPARE_RAW_MEAT_POULTRY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareRawMeatShellfish)
                    .HasColumnName("IN_PREPARE_RAW_MEAT_SHELLFISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWater)
                    .HasColumnName("IN_REC_WATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterBoating)
                    .HasColumnName("IN_REC_WATER_BOATING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterFountain)
                    .HasColumnName("IN_REC_WATER_FOUNTAIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterKidPoolHist)
                    .HasColumnName("IN_REC_WATER_KID_POOL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterKidWad)
                    .HasColumnName("IN_REC_WATER_KID_WAD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterOcean)
                    .HasColumnName("IN_REC_WATER_OCEAN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterOther)
                    .HasColumnName("IN_REC_WATER_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterPark)
                    .HasColumnName("IN_REC_WATER_PARK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterPool)
                    .HasColumnName("IN_REC_WATER_POOL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterRiver)
                    .HasColumnName("IN_REC_WATER_RIVER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterSpa)
                    .HasColumnName("IN_REC_WATER_SPA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecWaterWadPoolHist)
                    .HasColumnName("IN_REC_WATER_WAD_POOL_HIST")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSeparateSystemPiped)
                    .HasColumnName("IN_SEPARATE_SYSTEM_PIPED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSepticTankFailures)
                    .HasColumnName("IN_SEPTIC_TANK_FAILURES")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesCleanedDishwasher)
                    .HasColumnName("IN_SURFACES_CLEANED_DISHWASHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesCleanedDisinfected)
                    .HasColumnName("IN_SURFACES_CLEANED_DISINFECTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesCleanedMultiSponge)
                    .HasColumnName("IN_SURFACES_CLEANED_MULTI_SPONGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesCleanedNoClean)
                    .HasColumnName("IN_SURFACES_CLEANED_NO_CLEAN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesCleanedOther)
                    .HasColumnName("IN_SURFACES_CLEANED_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesCleanedRinsed)
                    .HasColumnName("IN_SURFACES_CLEANED_RINSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesCleanedSingleSponge)
                    .HasColumnName("IN_SURFACES_CLEANED_SINGLE_SPONGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesCleanedUnk)
                    .HasColumnName("IN_SURFACES_CLEANED_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesCleanedWashed)
                    .HasColumnName("IN_SURFACES_CLEANED_WASHED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesUsedPrepareCountertop)
                    .HasColumnName("IN_SURFACES_USED_PREPARE_COUNTERTOP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesUsedPrepareOther)
                    .HasColumnName("IN_SURFACES_USED_PREPARE_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesUsedPreparePlasticCut)
                    .HasColumnName("IN_SURFACES_USED_PREPARE_PLASTIC_CUT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesUsedPreparePlate)
                    .HasColumnName("IN_SURFACES_USED_PREPARE_PLATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesUsedPrepareSink)
                    .HasColumnName("IN_SURFACES_USED_PREPARE_SINK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesUsedPrepareTable)
                    .HasColumnName("IN_SURFACES_USED_PREPARE_TABLE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesUsedPrepareUnk)
                    .HasColumnName("IN_SURFACES_USED_PREPARE_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSurfacesUsedPrepareWoodCut)
                    .HasColumnName("IN_SURFACES_USED_PREPARE_WOOD_CUT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTeethingCleanedDishwasher)
                    .HasColumnName("IN_TEETHING_CLEANED_DISHWASHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTeethingCleanedOther)
                    .HasColumnName("IN_TEETHING_CLEANED_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTeethingCleanedRinsed)
                    .HasColumnName("IN_TEETHING_CLEANED_RINSED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTeethingCleanedSterilized)
                    .HasColumnName("IN_TEETHING_CLEANED_STERILIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTeethingCleanedUnk)
                    .HasColumnName("IN_TEETHING_CLEANED_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTeethingCleanedWashed)
                    .HasColumnName("IN_TEETHING_CLEANED_WASHED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysBreastMilk)
                    .HasColumnName("IN_THREE_DAYS_BREAST_MILK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysBreastMilkStore)
                    .HasColumnName("IN_THREE_DAYS_BREAST_MILK_STORE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysCereals)
                    .HasColumnName("IN_THREE_DAYS_CEREALS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysCrawling)
                    .HasColumnName("IN_THREE_DAYS_CRAWLING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysDiapers)
                    .HasColumnName("IN_THREE_DAYS_DIAPERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysExposedDirtSand)
                    .HasColumnName("IN_THREE_DAYS_EXPOSED_DIRT_SAND")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysFormulaCan)
                    .HasColumnName("IN_THREE_DAYS_FORMULA_CAN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysFormulaPowder)
                    .HasColumnName("IN_THREE_DAYS_FORMULA_POWDER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysFormulaPowderBottled)
                    .HasColumnName("IN_THREE_DAYS_FORMULA_POWDER_BOTTLED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysFormulaPowderFiltered)
                    .HasColumnName("IN_THREE_DAYS_FORMULA_POWDER_FILTERED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysFormulaPowderOther)
                    .HasColumnName("IN_THREE_DAYS_FORMULA_POWDER_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysFormulaPowderUnfiltered)
                    .HasColumnName("IN_THREE_DAYS_FORMULA_POWDER_UNFILTERED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysFormulaPowderWaterBoiled)
                    .HasColumnName("IN_THREE_DAYS_FORMULA_POWDER_WATER_BOILED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysHomemadeFood)
                    .HasColumnName("IN_THREE_DAYS_HOMEMADE_FOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysHomemadeJuice)
                    .HasColumnName("IN_THREE_DAYS_HOMEMADE_JUICE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysRideMeat)
                    .HasColumnName("IN_THREE_DAYS_RIDE_MEAT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysSpendFloor)
                    .HasColumnName("IN_THREE_DAYS_SPEND_FLOOR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysStoreFood)
                    .HasColumnName("IN_THREE_DAYS_STORE_FOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysSuckFingers)
                    .HasColumnName("IN_THREE_DAYS_SUCK_FINGERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysTeething)
                    .HasColumnName("IN_THREE_DAYS_TEETHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysToiletTrained)
                    .HasColumnName("IN_THREE_DAYS_TOILET_TRAINED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InThreeDaysWalking)
                    .HasColumnName("IN_THREE_DAYS_WALKING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelInState)
                    .HasColumnName("IN_TRAVEL_IN_STATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelOutCountry)
                    .HasColumnName("IN_TRAVEL_OUT_COUNTRY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelOutState)
                    .HasColumnName("IN_TRAVEL_OUT_STATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelOvernight)
                    .HasColumnName("IN_TRAVEL_OVERNIGHT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelThreeDayBefore)
                    .HasColumnName("IN_TRAVEL_THREE_DAY_BEFORE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypeFilterUsedFaucet)
                    .HasColumnName("IN_TYPE_FILTER_USED_FAUCET")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypeFilterUsedOther)
                    .HasColumnName("IN_TYPE_FILTER_USED_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypeFilterUsedPitcher)
                    .HasColumnName("IN_TYPE_FILTER_USED_PITCHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypeFilterUsedRefrigerator)
                    .HasColumnName("IN_TYPE_FILTER_USED_REFRIGERATOR")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypeFilterUsedSink)
                    .HasColumnName("IN_TYPE_FILTER_USED_SINK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypeFilterUsedUnk)
                    .HasColumnName("IN_TYPE_FILTER_USED_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTypeFilterUsedWholeHouse)
                    .HasColumnName("IN_TYPE_FILTER_USED_WHOLE_HOUSE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUseBottles)
                    .HasColumnName("IN_USE_BOTTLES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InUseTeething)
                    .HasColumnName("IN_USE_TEETHING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWaterFilteredAtHome)
                    .HasColumnName("IN_WATER_FILTERED_AT_HOME")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Scenario>(entity =>
            {
                entity.ToTable("SCENARIO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsName)
                    .IsRequired()
                    .HasColumnName("DS_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsPriority)
                    .HasColumnName("DS_PRIORITY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdScenarioRule).HasColumnName("ID_SCENARIO_RULE");

                entity.HasOne(d => d.IdScenarioRuleNavigation)
                    .WithMany(p => p.Scenario)
                    .HasForeignKey(d => d.IdScenarioRule)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SCENARIO__ID_SCE__77F737C0");
            });

            modelBuilder.Entity<ScenarioOutcome>(entity =>
            {
                entity.ToTable("SCENARIO_OUTCOME");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DsAttribute)
                    .IsRequired()
                    .HasColumnName("DS_ATTRIBUTE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsValue)
                    .HasColumnName("DS_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdScenario).HasColumnName("ID_SCENARIO");

                entity.HasOne(d => d.IdScenarioNavigation)
                    .WithMany(p => p.ScenarioOutcome)
                    .HasForeignKey(d => d.IdScenario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SCENARIO___ID_SC__008C7DC1");
            });

            modelBuilder.Entity<ScenarioRule>(entity =>
            {
                entity.ToTable("SCENARIO_RULE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DsDesc)
                    .IsRequired()
                    .HasColumnName("DS_DESC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdParentRule).HasColumnName("ID_PARENT_RULE");

                entity.HasOne(d => d.IdParentRuleNavigation)
                    .WithMany(p => p.InverseIdParentRuleNavigation)
                    .HasForeignKey(d => d.IdParentRule)
                    .HasConstraintName("FK__SCENARIO___ID_PA__751ACB15");
            });

            modelBuilder.Entity<ScenarioRuleGroup>(entity =>
            {
                entity.ToTable("SCENARIO_RULE_GROUP");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdLogicalOperator)
                    .IsRequired()
                    .HasColumnName("CD_LOGICAL_OPERATOR")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.ScenarioRuleGroup)
                    .HasForeignKey<ScenarioRuleGroup>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SCENARIO_RUL__ID__7AD3A46B");
            });

            modelBuilder.Entity<ScenarioSingleRule>(entity =>
            {
                entity.ToTable("SCENARIO_SINGLE_RULE");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdOperator)
                    .IsRequired()
                    .HasColumnName("CD_OPERATOR")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsAttribute)
                    .IsRequired()
                    .HasColumnName("DS_ATTRIBUTE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsValue)
                    .HasColumnName("DS_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.ScenarioSingleRule)
                    .HasForeignKey<ScenarioSingleRule>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SCENARIO_SIN__ID__7DB01116");
            });

            modelBuilder.Entity<SentinelElrMatch>(entity =>
            {
                entity.HasKey(e => e.IdSpecimen);

                entity.ToTable("SENTINEL_ELR_MATCH");

                entity.Property(e => e.IdSpecimen)
                    .HasColumnName("ID_SPECIMEN")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCultureAdeno)
                    .HasColumnName("CD_Culture_Adeno")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureAh1)
                    .HasColumnName("CD_Culture_AH1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureAh3)
                    .HasColumnName("CD_Culture_AH3")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureAnovelH1)
                    .HasColumnName("CD_Culture_ANovel_H1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureAunk)
                    .HasColumnName("CD_Culture_AUnk")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureAunsubtypable)
                    .HasColumnName("CD_Culture_AUnsubtypable")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureB)
                    .HasColumnName("CD_Culture_B")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureBoca)
                    .HasColumnName("CD_Culture_Boca")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureEntero)
                    .HasColumnName("CD_Culture_Entero")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureMpv)
                    .HasColumnName("CD_Culture_MPV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureOtherVirus)
                    .HasColumnName("CD_Culture_OtherVirus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCulturePiv1)
                    .HasColumnName("CD_Culture_PIV1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCulturePiv2)
                    .HasColumnName("CD_Culture_PIV2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCulturePiv3)
                    .HasColumnName("CD_Culture_PIV3")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCulturePiv4)
                    .HasColumnName("CD_Culture_PIV4")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureRhino)
                    .HasColumnName("CD_Culture_Rhino")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCultureRsv)
                    .HasColumnName("CD_Culture_RSV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrA09h1)
                    .HasColumnName("CD_PCR_A09H1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrAdeno)
                    .HasColumnName("CD_PCR_Adeno")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrAh1)
                    .HasColumnName("CD_PCR_AH1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrAh3)
                    .HasColumnName("CD_PCR_AH3")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrAunk)
                    .HasColumnName("CD_PCR_AUnk")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrAunsubtypable)
                    .HasColumnName("CD_PCR_AUnsubtypable")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrB)
                    .HasColumnName("CD_PCR_B")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrBoca)
                    .HasColumnName("CD_PCR_Boca")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrEntero)
                    .HasColumnName("CD_PCR_Entero")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrMpv)
                    .HasColumnName("CD_PCR_MPV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrPiv1)
                    .HasColumnName("CD_PCR_PIV1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrPiv2)
                    .HasColumnName("CD_PCR_PIV2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrPiv3)
                    .HasColumnName("CD_PCR_PIV3")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrPiv4)
                    .HasColumnName("CD_PCR_PIV4")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrRhino)
                    .HasColumnName("CD_PCR_Rhino")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrRsv)
                    .HasColumnName("CD_PCR_RSV")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdPcrUnableToTest)
                    .HasColumnName("CD_PCR_UnableToTest")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DsAccession)
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAttached)
                    .HasColumnName("DT_ATTACHED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCulture)
                    .HasColumnName("DT_CULTURE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtObservation)
                    .HasColumnName("DT_OBSERVATION")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPcr)
                    .HasColumnName("DT_PCR")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAttached)
                    .IsRequired()
                    .HasColumnName("ID_ATTACHED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SentinelSpecimen>(entity =>
            {
                entity.HasKey(e => new { e.IdSpecimen, e.IdSentinel });

                entity.ToTable("SENTINEL_SPECIMEN");

                entity.Property(e => e.IdSpecimen).HasColumnName("ID_SPECIMEN");

                entity.Property(e => e.IdSentinel).HasColumnName("ID_SENTINEL");

                entity.Property(e => e.CdAddress)
                    .HasColumnName("CD_ADDRESS")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.CdAge)
                    .HasColumnName("CD_AGE")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CdAgeType)
                    .HasColumnName("CD_AGE_TYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdEthnicity)
                    .HasColumnName("CD_ETHNICITY")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CdGender)
                    .HasColumnName("CD_GENDER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdRace)
                    .HasColumnName("CD_RACE")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsDiagnosis)
                    .IsRequired()
                    .HasColumnName("DS_DIAGNOSIS")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('ILI')");

                entity.Property(e => e.DsMeasuredTemperature)
                    .HasColumnName("DS_MEASURED_TEMPERATURE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherSymptom)
                    .HasColumnName("DS_OTHER_SYMPTOM")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsRapidTest)
                    .HasColumnName("DS_RAPID_TEST")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.DsSeverityIllness)
                    .HasColumnName("DS_SEVERITY_ILLNESS")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DsSpecimenType)
                    .HasColumnName("DS_SPECIMEN_TYPE")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DsTestsOther)
                    .HasColumnName("DS_TESTS_OTHER")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsZipcode)
                    .HasColumnName("DS_ZIPCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtBirth)
                    .HasColumnName("DT_BIRTH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtImported)
                    .HasColumnName("DT_IMPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtOnset)
                    .HasColumnName("DT_ONSET")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVisit)
                    .HasColumnName("DT_VISIT")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdImported)
                    .HasColumnName("ID_IMPORTED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAbpain).HasColumnName("IN_ABPAIN");

                entity.Property(e => e.InAnorexia).HasColumnName("IN_ANOREXIA");

                entity.Property(e => e.InAntipyreticsUsage).HasColumnName("IN_ANTIPYRETICS_USAGE");

                entity.Property(e => e.InChills).HasColumnName("IN_CHILLS");

                entity.Property(e => e.InConjunctivitis).HasColumnName("IN_CONJUNCTIVITIS");

                entity.Property(e => e.InCough).HasColumnName("IN_COUGH");

                entity.Property(e => e.InDiarrhea).HasColumnName("IN_DIARRHEA");

                entity.Property(e => e.InEarache).HasColumnName("IN_EARACHE");

                entity.Property(e => e.InFever).HasColumnName("IN_FEVER");

                entity.Property(e => e.InHeadache).HasColumnName("IN_HEADACHE");

                entity.Property(e => e.InHospitalization).HasColumnName("IN_HOSPITALIZATION");

                entity.Property(e => e.InMalaise).HasColumnName("IN_MALAISE");

                entity.Property(e => e.InMyalgia).HasColumnName("IN_MYALGIA");

                entity.Property(e => e.InNasalcong).HasColumnName("IN_NASALCONG");

                entity.Property(e => e.InNovelH1n1).HasColumnName("IN_NOVEL_H1N1");

                entity.Property(e => e.InReceiveAntiviral).HasColumnName("IN_RECEIVE_ANTIVIRAL");

                entity.Property(e => e.InReceiveTreatment).HasColumnName("IN_RECEIVE_TREATMENT");

                entity.Property(e => e.InRhinorrhea).HasColumnName("IN_RHINORRHEA");

                entity.Property(e => e.InSeasonalVaccine).HasColumnName("IN_SEASONAL_VACCINE");

                entity.Property(e => e.InSentCdc).HasColumnName("IN_SENT_CDC");

                entity.Property(e => e.InSoreThroat).HasColumnName("IN_SORE_THROAT");

                entity.Property(e => e.InVomiting).HasColumnName("IN_VOMITING");

                entity.Property(e => e.InWheezing).HasColumnName("IN_WHEEZING");

                entity.Property(e => e.NmFirst)
                    .HasColumnName("NM_FIRST")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NmLast)
                    .IsRequired()
                    .HasColumnName("NM_LAST")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ShigellaExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("SHIGELLA_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.DsCamp)
                    .HasColumnName("DS_CAMP")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactDiapered)
                    .HasColumnName("DS_CONTACT_DIAPERED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactHealthcare)
                    .HasColumnName("DS_CONTACT_HEALTHCARE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDaycare)
                    .HasColumnName("DS_DAYCARE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDrinkUntreatedWater)
                    .HasColumnName("DS_DRINK_UNTREATED_WATER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsDrinkUntreatedWaterOther)
                    .HasColumnName("DS_DRINK_UNTREATED_WATER_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsElementaryschool)
                    .HasColumnName("DS_ELEMENTARYSCHOOL")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposureExcreta)
                    .HasColumnName("DS_EXPOSURE_EXCRETA")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsFoodRestaurant)
                    .HasColumnName("DS_FOOD_RESTAURANT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsGroupMeal)
                    .HasColumnName("DS_GROUP_MEAL")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsLiveInstitution)
                    .HasColumnName("DS_LIVE_INSTITUTION")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherfacility)
                    .HasColumnName("DS_OTHERFACILITY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPrepareFoodSymptomatic)
                    .HasColumnName("DS_PREPARE_FOOD_SYMPTOMATIC")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsPreschool)
                    .HasColumnName("DS_PRESCHOOL")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRawProduce)
                    .HasColumnName("DS_RAW_PRODUCE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRecreationalWater)
                    .HasColumnName("DS_RECREATIONAL_WATER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRecreationalWaterName)
                    .HasColumnName("DS_RECREATIONAL_WATER_NAME")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRecreationalWaterOther)
                    .HasColumnName("DS_RECREATIONAL_WATER_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsSexualContact)
                    .HasColumnName("DS_SEXUAL_CONTACT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InCamp)
                    .HasColumnName("IN_CAMP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactDiapered)
                    .HasColumnName("IN_CONTACT_DIAPERED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactHealthcare)
                    .HasColumnName("IN_CONTACT_HEALTHCARE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrhea)
                    .HasColumnName("IN_CONTACTS_DIARRHEA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrhea24hAfter)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_24H_AFTER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrhea24hBefore)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_24H_BEFORE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrheaHousehold)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_HOUSEHOLD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrheaUnk)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_UNK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactsDiarrheaWithin24h)
                    .HasColumnName("IN_CONTACTS_DIARRHEA_WITHIN_24H")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDaycare)
                    .HasColumnName("IN_DAYCARE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrinkUntreatedWater)
                    .HasColumnName("IN_DRINK_UNTREATED_WATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrinkUntreatedWaterOther)
                    .HasColumnName("IN_DRINK_UNTREATED_WATER_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrinkUntreatedWaterPrivate)
                    .HasColumnName("IN_DRINK_UNTREATED_WATER_PRIVATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrinkUntreatedWaterShared)
                    .HasColumnName("IN_DRINK_UNTREATED_WATER_SHARED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InElementaryschool)
                    .HasColumnName("IN_ELEMENTARYSCHOOL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InExposureExcreta)
                    .HasColumnName("IN_EXPOSURE_EXCRETA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InFoodRestaurant)
                    .HasColumnName("IN_FOOD_RESTAURANT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGroupMeal)
                    .HasColumnName("IN_GROUP_MEAL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLiveInstitution)
                    .HasColumnName("IN_LIVE_INSTITUTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherfacility)
                    .HasColumnName("IN_OTHERFACILITY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPrepareFoodSymptomatic)
                    .HasColumnName("IN_PREPARE_FOOD_SYMPTOMATIC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPreschool)
                    .HasColumnName("IN_PRESCHOOL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawProduce)
                    .HasColumnName("IN_RAW_PRODUCE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWater)
                    .HasColumnName("IN_RECREATIONAL_WATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterBoating)
                    .HasColumnName("IN_RECREATIONAL_WATER_BOATING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterFountain)
                    .HasColumnName("IN_RECREATIONAL_WATER_FOUNTAIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterKidPool)
                    .HasColumnName("IN_RECREATIONAL_WATER_KID_POOL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterOcean)
                    .HasColumnName("IN_RECREATIONAL_WATER_OCEAN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterOther)
                    .HasColumnName("IN_RECREATIONAL_WATER_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterPark)
                    .HasColumnName("IN_RECREATIONAL_WATER_PARK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterPool)
                    .HasColumnName("IN_RECREATIONAL_WATER_POOL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterRiver)
                    .HasColumnName("IN_RECREATIONAL_WATER_RIVER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterSpa)
                    .HasColumnName("IN_RECREATIONAL_WATER_SPA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRecreationalWaterWadPool)
                    .HasColumnName("IN_RECREATIONAL_WATER_WAD_POOL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSexualContact)
                    .HasColumnName("IN_SEXUAL_CONTACT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravel)
                    .HasColumnName("IN_TRAVEL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelInState)
                    .HasColumnName("IN_TRAVEL_IN_STATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelOutCountry)
                    .HasColumnName("IN_TRAVEL_OUT_COUNTRY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelOutState)
                    .HasColumnName("IN_TRAVEL_OUT_STATE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelOvernight)
                    .HasColumnName("IN_TRAVEL_OVERNIGHT")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Snomed>(entity =>
            {
                entity.HasKey(e => e.CdSnomed);

                entity.ToTable("SNOMED");

                entity.Property(e => e.CdSnomed)
                    .HasColumnName("CD_SNOMED")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CdBiogroup)
                    .HasColumnName("CD_BIOGROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdBiotype)
                    .HasColumnName("CD_BIOTYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdBiovar)
                    .HasColumnName("CD_BIOVAR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdDescriptor)
                    .HasColumnName("CD_DESCRIPTOR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdFluHeader)
                    .HasColumnName("CD_FLU_HEADER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdGroup)
                    .HasColumnName("CD_GROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdResistance)
                    .HasColumnName("CD_RESISTANCE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdResult)
                    .HasColumnName("CD_RESULT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdRsvHeader)
                    .HasColumnName("CD_RSV_HEADER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerogroup)
                    .HasColumnName("CD_SEROGROUP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerotype)
                    .HasColumnName("CD_SEROTYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerovar)
                    .HasColumnName("CD_SEROVAR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecies)
                    .HasColumnName("CD_SPECIES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdStrain)
                    .HasColumnName("CD_STRAIN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSubspecies)
                    .HasColumnName("CD_SUBSPECIES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdType)
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdVar)
                    .HasColumnName("CD_VAR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsGenus)
                    .HasColumnName("DS_GENUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsSnomed)
                    .HasColumnName("DS_SNOMED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdPanel).HasColumnName("ID_PANEL");

                entity.Property(e => e.InDoiflag).HasColumnName("IN_DOIFLAG");

                entity.Property(e => e.InIncludeOnAmr)
                    .HasColumnName("IN_INCLUDE_ON_AMR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");
            });

            modelBuilder.Entity<Specimen>(entity =>
            {
                entity.HasKey(e => e.IdSpecimen);

                entity.ToTable("SPECIMEN");

                entity.Property(e => e.IdSpecimen).HasColumnName("ID_SPECIMEN");

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecimen)
                    .HasColumnName("CD_SPECIMEN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdSpecimenStatus)
                    .HasColumnName("CD_SPECIMEN_STATUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAccession)
                    .HasColumnName("DS_ACCESSION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsIdentifier)
                    .HasColumnName("DS_IDENTIFIER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsNotes)
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCollected)
                    .HasColumnName("DT_COLLECTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdArea).HasColumnName("ID_AREA");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdLab).HasColumnName("ID_LAB");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.HasOne(d => d.IdProfileNavigation)
                    .WithMany(p => p.Specimen)
                    .HasForeignKey(d => d.IdProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PROFILE_SPECIMEN");
            });

            modelBuilder.Entity<StarhsManifest>(entity =>
            {
                entity.HasKey(e => e.IdManifest);

                entity.ToTable("STARHS_MANIFEST");

                entity.Property(e => e.IdManifest).HasColumnName("ID_MANIFEST");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmManifest)
                    .IsRequired()
                    .HasColumnName("NM_MANIFEST")
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StarhsManifestRow>(entity =>
            {
                entity.HasKey(e => e.IdManifestRow);

                entity.ToTable("STARHS_MANIFEST_ROW");

                entity.Property(e => e.IdManifestRow).HasColumnName("ID_MANIFEST_ROW");

                entity.Property(e => e.IdLrv).HasColumnName("ID_LRV");

                entity.Property(e => e.IdManifest).HasColumnName("ID_MANIFEST");

                entity.HasOne(d => d.IdLrvNavigation)
                    .WithMany(p => p.StarhsManifestRow)
                    .HasForeignKey(d => d.IdLrv)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__STARHS_MA__ID_LR__2533F28B");

                entity.HasOne(d => d.IdManifestNavigation)
                    .WithMany(p => p.StarhsManifestRow)
                    .HasForeignKey(d => d.IdManifest)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__STARHS_MA__ID_MA__243FCE52");
            });

            modelBuilder.Entity<StrepPneumoExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("STREP_PNEUMO_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.DsCity)
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsCountry)
                    .HasColumnName("DS_COUNTRY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsFacility)
                    .HasColumnName("DS_FACILITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsInfectOrganism)
                    .HasColumnName("DS_INFECT_ORGANISM")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsMedicalCondition)
                    .HasColumnName("DS_MEDICAL_CONDITION")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DsMedicalOther)
                    .HasColumnName("DS_MEDICAL_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsOrganismOther)
                    .HasColumnName("DS_ORGANISM_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InConjuPneuVax)
                    .HasColumnName("IN_CONJU_PNEU_VAX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDeath)
                    .HasColumnName("IN_DEATH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InForeign)
                    .HasColumnName("IN_FOREIGN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHospitalized)
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLongTermFacility)
                    .HasColumnName("IN_LONG_TERM_FACILITY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPersistent)
                    .HasColumnName("IN_PERSISTENT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPolyPneuVax)
                    .HasColumnName("IN_POLY_PNEU_VAX")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPriorMedical)
                    .HasColumnName("IN_PRIOR_MEDICAL")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.StrepPneumoExt)
                    .HasForeignKey<StrepPneumoExt>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_STREP_PNEUMO_EXT_EPI_CASE");
            });

            modelBuilder.Entity<Survey>(entity =>
            {
                entity.HasKey(e => e.IdSurvey);

                entity.ToTable("SURVEY");

                entity.HasIndex(e => e.UidLayout)
                    .HasName("idx_id_layout");

                entity.Property(e => e.IdSurvey)
                    .HasColumnName("ID_SURVEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdLevel)
                    .HasColumnName("CD_LEVEL")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdSurveyType)
                    .HasColumnName("CD_SURVEY_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsEntity)
                    .HasColumnName("DS_ENTITY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOutbreak).HasColumnName("ID_OUTBREAK");

                entity.Property(e => e.IdSurveyVersion).HasColumnName("ID_SURVEY_VERSION");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InClosedYearEdit).HasColumnName("IN_CLOSED_YEAR_EDIT");

                entity.Property(e => e.InSimpleSurvey).HasColumnName("IN_SIMPLE_SURVEY");

                entity.Property(e => e.NmSurvey)
                    .HasColumnName("NM_SURVEY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UidLayout)
                .HasColumnName("UID_LAYOUT");

                entity.Property(e => e.UID)
                .HasColumnName("UID_SURVEY");

            });

            modelBuilder.Entity<SurveyAnswers>(entity =>
            {
                entity.HasKey(e => e.IdAnswer);

                entity.ToTable("SURVEY_ANSWERS");

                entity.HasIndex(e => e.IdCase)
                    .HasName("IDX_SURVEY_ANSWERS_ID_CASE");

                entity.HasIndex(e => new { e.DsAnswer, e.IdSurveyInstance })
                    .HasName("IDX_SURVEY_ANSWERS_INSTANCE_ANSWER");

                entity.HasIndex(e => new { e.IdQuestionSub, e.DsAnswer, e.IdSurveyInstance, e.IdQuestion })
                    .HasName("IDX_SURVEY_ANSWERS_INSTANCE_QUESTION");

                entity.Property(e => e.IdAnswer)
                    .HasColumnName("ID_ANSWER")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdValue)
                    .HasColumnName("CD_VALUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAnswer)
                    .HasColumnName("DS_ANSWER")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdQuestion)
                    .HasColumnName("ID_QUESTION")
                    .IsUnicode(false);

                entity.Property(e => e.IdQuestionSub).HasColumnName("ID_QUESTION_SUB");

                entity.Property(e => e.IdSurveyInstance).HasColumnName("ID_SURVEY_INSTANCE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmShort)
                    .HasColumnName("NM_SHORT")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SurveyDisplay>(entity =>
            {
                entity.HasKey(e => e.IdSurveyDisplay);

                entity.ToTable("SURVEY_DISPLAY");

                entity.HasIndex(e => new { e.IdQuestion, e.DtEffective, e.DtExpired })
                    .HasName("IDX_SURVEY_DISPLAY");

                entity.Property(e => e.IdSurveyDisplay)
                    .HasColumnName("ID_SURVEY_DISPLAY")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmHeight).HasColumnName("AM_HEIGHT");

                entity.Property(e => e.AmWidth).HasColumnName("AM_WIDTH");

                entity.Property(e => e.AmX).HasColumnName("AM_X");

                entity.Property(e => e.AmY).HasColumnName("AM_Y");

                entity.Property(e => e.DsActivatedFrom)
                    .HasColumnName("DS_ACTIVATED_FROM")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsHeader)
                    .HasColumnName("DS_HEADER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsMatchValues)
                    .HasColumnName("DS_MATCH_VALUES")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsQuestionLabel)
                    .HasColumnName("DS_QUESTION_LABEL")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");

                entity.Property(e => e.IdSurvey).HasColumnName("ID_SURVEY");
            });

            modelBuilder.Entity<SurveyEntity>(entity =>
            {
                entity.HasKey(e => e.IdAnswer);

                entity.ToTable("SURVEY_ENTITY");

                entity.Property(e => e.IdAnswer)
                    .HasColumnName("ID_ANSWER")
                    .ValueGeneratedNever();

                entity.Property(e => e.NmEntity)
                    .IsRequired()
                    .HasColumnName("NM_ENTITY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAnswerNavigation)
                    .WithOne(p => p.SurveyEntity)
                    .HasForeignKey<SurveyEntity>(d => d.IdAnswer)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SURVEY_ANSWER");
            });

            modelBuilder.Entity<SurveyEntityAttribute>(entity =>
            {
                entity.HasKey(e => new { e.IdAnswer, e.NmAttribute });

                entity.ToTable("SURVEY_ENTITY_ATTRIBUTE");

                entity.Property(e => e.IdAnswer).HasColumnName("ID_ANSWER");

                entity.Property(e => e.NmAttribute)
                    .HasColumnName("NM_ATTRIBUTE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsValue)
                    .HasColumnName("DS_VALUE")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAnswerNavigation)
                    .WithMany(p => p.SurveyEntityAttribute)
                    .HasForeignKey(d => d.IdAnswer)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SURVEY_ENTITY");
            });

            modelBuilder.Entity<SurveyInstance>(entity =>
            {
                entity.HasKey(e => e.IdSurveyInstance);

                entity.ToTable("SURVEY_INSTANCE");

                entity.HasIndex(e => new { e.CdEntityType, e.IdEntity })
                    .HasName("IDX_SURVEY_INSTANCE_ENTITY");

                entity.HasIndex(e => new { e.IdSurveyInstance, e.IdSurvey, e.IdEntity })
                    .HasName("IDX_SURVEY_INSTANCE_SURVEY_INSTANCE_ENTITY");

                entity.Property(e => e.IdSurveyInstance)
                    .HasColumnName("ID_SURVEY_INSTANCE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdEntityType)
                    .HasColumnName("CD_ENTITY_TYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdEntity).HasColumnName("ID_ENTITY");

                entity.Property(e => e.IdProfile).HasColumnName("ID_PROFILE");

                entity.Property(e => e.IdSurvey).HasColumnName("ID_SURVEY");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmSurveyInstance)
                    .HasColumnName("NM_SURVEY_INSTANCE")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SurveyLayout>(entity =>
            {
                entity.HasKey(e => e.UID);

                entity.ToTable("SURVEY_LAYOUT");

                entity.Property(e => e.UID)
                .HasColumnName("UID_LAYOUT")
                .ValueGeneratedNever();

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.JsLayout)
                    .HasColumnName("JS_LAYOUT")
                    .IsUnicode(false);

                entity.Property(e => e.NmLayout)
                    .IsRequired()
                    .HasColumnName("NM_LAYOUT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasMany(e => e.Surveys)
                .WithOne()
                .HasForeignKey(e => e.UidLayout);
            });

            modelBuilder.Entity<SurveyNotes>(entity =>
            {
                entity.HasKey(e => new { e.IdNote, e.IdOrder });

                entity.ToTable("SURVEY_NOTES");

                entity.Property(e => e.IdNote).HasColumnName("ID_NOTE");

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.DsNotes)
                    .HasColumnName("DS_NOTES")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");

                entity.Property(e => e.IdQuestionSub).HasColumnName("ID_QUESTION_SUB");

                entity.Property(e => e.IdSurveyInstance).HasColumnName("ID_SURVEY_INSTANCE");

                entity.Property(e => e.IdUpdated)
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SurveyObjectMapping>(entity =>
            {
                entity.HasKey(e => new { e.IdQuestion, e.CdMappingtype });

                entity.ToTable("SURVEY_OBJECT_MAPPING");

                entity.Property(e => e.IdQuestion)
                    .HasColumnName("ID_QUESTION")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdMappingtype)
                    .HasColumnName("CD_MAPPINGTYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NmMapvalue)
                    .IsRequired()
                    .HasColumnName("NM_MAPVALUE")
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SurveyQuestion>(entity =>
            {
                entity.HasKey(e => e.IdQuestion);

                entity.ToTable("SURVEY_QUESTION");

                entity.HasIndex(e => e.DsQuestion)
                    .HasName("idx_question_text");

                entity.Property(e => e.IdQuestion)
                    .HasColumnName("ID_QUESTION")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmHeight).HasColumnName("AM_HEIGHT");

                entity.Property(e => e.AmSize).HasColumnName("AM_SIZE");

                entity.Property(e => e.AmWidth).HasColumnName("AM_WIDTH");

                entity.Property(e => e.AmX).HasColumnName("AM_X");

                entity.Property(e => e.AmY).HasColumnName("AM_Y");

                entity.Property(e => e.CdDisplayType)
                    .HasColumnName("CD_DISPLAY_TYPE")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CdEntityType)
                    .HasColumnName("CD_ENTITY_TYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdQuestionType)
                    .IsRequired()
                    .HasColumnName("CD_QUESTION_TYPE")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsAction)
                    .HasColumnName("DS_ACTION")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsActivatedFrom)
                    .HasColumnName("DS_ACTIVATED_FROM")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DsAdmin)
                    .HasColumnName("DS_ADMIN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsAttributes)
                    .HasColumnName("DS_ATTRIBUTES")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsChoices)
                    .HasColumnName("DS_CHOICES")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsDefaultValue)
                    .HasColumnName("DS_DEFAULT_VALUE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsEnabled)
                    .HasColumnName("DS_ENABLED")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.DsEntity)
                    .HasColumnName("DS_ENTITY")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsExtColumn)
                    .HasColumnName("DS_EXT_COLUMN")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.DsExtFormatIn)
                    .HasColumnName("DS_EXT_FORMAT_IN")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.DsExtFormatOut)
                    .HasColumnName("DS_EXT_FORMAT_OUT")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.DsExtTable)
                    .HasColumnName("DS_EXT_TABLE")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.DsHeader)
                    .HasColumnName("DS_HEADER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsMatchValues)
                    .HasColumnName("DS_MATCH_VALUES")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsQuestion)
                    .IsRequired()
                    .HasColumnName("DS_QUESTION")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsQuestionLabel)
                    .HasColumnName("DS_QUESTION_LABEL")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DsSqlSelect)
                    .HasColumnName("DS_SQL_SELECT")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsSqlUpdate)
                    .HasColumnName("DS_SQL_UPDATE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsValidation)
                    .HasColumnName("DS_VALIDATION")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdContainer).HasColumnName("ID_CONTAINER");

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.IdQuestionGroup).HasColumnName("ID_QUESTION_GROUP");

                entity.Property(e => e.IdSurvey).HasColumnName("ID_SURVEY");

                entity.Property(e => e.IdUpdated)
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InRequired)
                    .HasColumnName("IN_REQUIRED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmShort)
                    .HasColumnName("NM_SHORT")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MessageQueue>(entity =>
            {
                entity.HasKey(e => e.UID)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("MESSAGE_QUEUE");

                entity.Property(e => e.Message)
                    .HasColumnName("JS_MESSAGE")
                    .IsUnicode(false)
                    .IsRequired();
            });

            modelBuilder.Entity<SurveyQuestionBank>(entity =>
            {
                entity.HasKey(e => e.IdQuestion)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("SURVEY_QUESTION_BANK");

                entity.HasIndex(e => e.UID)
                    .HasName("idx_UID")
                    .IsUnique()
                    .ForSqlServerIsClustered();

                entity.Property(e => e.IdQuestion)
                    .HasColumnName("ID_QUESTION")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UID)
                    .HasColumnName("UID_QUESTION");

                entity.Property(e => e.CdCodeType)
                    .HasColumnName("CD_CODE_TYPE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CdQuestionType)
                    .IsRequired()
                    .HasColumnName("CD_QUESTION_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsQuestion)
                    .IsRequired()
                    .HasColumnName("DS_QUESTION")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("datetime");

                entity.Property(e => e.InBankQuestion)
                    .HasColumnName("IN_BANK_QUESTION");

                entity.Property(e => e.InAnswered)
                    .HasColumnName("IN_ANSWERED");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.HasMany(e => e.SurveyObjectMapping)
                    .WithOne()
                    .HasForeignKey(e => e.IdQuestion);

            });

            modelBuilder.Entity<SurveyQuestionValidation>(entity =>
            {
                entity.HasKey(e => new { e.IdSurvey, e.IdQuestion, e.NmShort, e.IdValidation });

                entity.ToTable("SURVEY_QUESTION_VALIDATION");

                entity.Property(e => e.IdSurvey).HasColumnName("ID_SURVEY");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");

                entity.Property(e => e.NmShort)
                    .HasColumnName("NM_SHORT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdValidation).HasColumnName("ID_VALIDATION");

                entity.Property(e => e.DsAltErrorMsg)
                    .HasColumnName("DS_ALT_ERROR_MSG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdQuestionNavigation)
                    .WithMany(p => p.SurveyQuestionValidation)
                    .HasForeignKey(d => d.IdQuestion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SURVEY_QUESTION_ID_QUESTION");

                entity.HasOne(d => d.IdSurveyNavigation)
                    .WithMany(p => p.SurveyQuestionValidation)
                    .HasForeignKey(d => d.IdSurvey)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SURVEY_ID_SURVEY");

                entity.HasOne(d => d.IdValidationNavigation)
                    .WithMany(p => p.SurveyQuestionValidation)
                    .HasForeignKey(d => d.IdValidation)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SURVEY_VALIDATION_ID_VALIDATION");
            });

            modelBuilder.Entity<SurveyValidation>(entity =>
            {
                entity.HasKey(e => e.IdValidation);

                entity.ToTable("SURVEY_VALIDATION");

                entity.Property(e => e.IdValidation).HasColumnName("ID_VALIDATION");

                entity.Property(e => e.DsDefaultErrorMsg)
                    .IsRequired()
                    .HasColumnName("DS_DEFAULT_ERROR_MSG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DsTargetType)
                    .IsRequired()
                    .HasColumnName("DS_TARGET_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NmValidation)
                    .IsRequired()
                    .HasColumnName("NM_VALIDATION")
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Symptom>(entity =>
            {
                entity.HasKey(e => e.CdSymptom)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("SYMPTOM");

                entity.Property(e => e.CdSymptom)
                    .HasColumnName("CD_SYMPTOM")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdSeverity)
                    .HasColumnName("CD_SEVERITY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NmSymptom)
                    .IsRequired()
                    .HasColumnName("NM_SYMPTOM")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<SymptomIcd9>(entity =>
            {
                entity.HasKey(e => e.IdSymptomIcd9Set);

                entity.ToTable("SYMPTOM_ICD9");

                entity.Property(e => e.IdSymptomIcd9Set)
                    .HasColumnName("ID_SYMPTOM_ICD9_SET")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdSymptom)
                    .HasColumnName("CD_SYMPTOM")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdPriority).HasColumnName("ID_PRIORITY");

                entity.Property(e => e.IdSymptomSet).HasColumnName("ID_SYMPTOM_SET");

                entity.Property(e => e.InPrimary)
                    .HasColumnName("IN_PRIMARY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSymptomSetNavigation)
                    .WithMany(p => p.SymptomIcd9)
                    .HasForeignKey(d => d.IdSymptomSet)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ID_SYMPTOM_SET");
            });

            modelBuilder.Entity<SymptomSet>(entity =>
            {
                entity.HasKey(e => e.IdSymptomSet);

                entity.ToTable("SYMPTOM_SET");

                entity.Property(e => e.IdSymptomSet)
                    .HasColumnName("ID_SYMPTOM_SET")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEffective)
                    .HasColumnName("DT_EFFECTIVE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('01/01/1900')");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CdIcd9Navigation)
                    .WithMany(p => p.SymptomSet)
                    .HasForeignKey(d => d.CdIcd9)
                    .HasConstraintName("FK_ID_SYMPTOM_SET_CD_ICD9");
            });

            modelBuilder.Entity<TableHistory>(entity =>
            {
                entity.HasKey(e => e.IdHistory);

                entity.ToTable("TABLE_HISTORY");

                entity.Property(e => e.IdHistory).HasColumnName("ID_HISTORY");

                entity.Property(e => e.CdEntityType)
                    .HasColumnName("CD_ENTITY_TYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DsValue)
                    .HasColumnName("DS_VALUE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DtDropped)
                    .HasColumnName("DT_DROPPED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdEntity).HasColumnName("ID_ENTITY");

                entity.Property(e => e.NmColumn)
                    .HasColumnName("NM_COLUMN")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TaskListCounts>(entity =>
            {
                entity.HasKey(e => e.CdCounty);

                entity.ToTable("TASK_LIST_COUNTS");

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AmTotalEcr).HasColumnName("AM_TOTAL_ECR");

                entity.Property(e => e.AmTotalElr).HasColumnName("AM_TOTAL_ELR");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TblFluActivityLevel>(entity =>
            {
                entity.HasKey(e => e.IdKey);

                entity.ToTable("tblFluActivityLevel");

                entity.HasIndex(e => new { e.IdCounty, e.DtCreated })
                    .HasName("idx_tblFluActivityLevel_County_Dt_Created");

                entity.Property(e => e.IdKey).HasColumnName("ID_KEY");

                entity.Property(e => e.AmWeek).HasColumnName("AM_WEEK");

                entity.Property(e => e.AmYear).HasColumnName("AM_YEAR");

                entity.Property(e => e.DtCreated)
                    .HasColumnName("DT_CREATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReported)
                    .HasColumnName("DT_REPORTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdCounty).HasColumnName("ID_COUNTY");
            });

            modelBuilder.Entity<Template>(entity =>
            {
                entity.HasKey(e => e.IdTemplate);

                entity.ToTable("TEMPLATE");

                entity.Property(e => e.IdTemplate)
                    .HasColumnName("ID_TEMPLATE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdIcd9)
                    .HasColumnName("CD_ICD9")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsTemplate)
                    .IsRequired()
                    .HasColumnName("DS_TEMPLATE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdUpdated)
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TemplateSurvey>(entity =>
            {
                entity.HasKey(e => new { e.IdTemplate, e.IdQuestion });

                entity.ToTable("TEMPLATE_SURVEY");

                entity.Property(e => e.IdTemplate).HasColumnName("ID_TEMPLATE");

                entity.Property(e => e.IdQuestion).HasColumnName("ID_QUESTION");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtExpired)
                    .HasColumnName("DT_EXPIRED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtUpdated)
                    .HasColumnName("DT_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdOrder).HasColumnName("ID_ORDER");

                entity.Property(e => e.IdUpdated)
                    .HasColumnName("ID_UPDATED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TetanusExt>(entity =>
            {
                entity.HasKey(e => e.IdCase)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("TETANUS_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdAnatomic)
                    .IsRequired()
                    .HasColumnName("CD_ANATOMIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdAssocCondt)
                    .IsRequired()
                    .HasColumnName("CD_ASSOC_CONDT")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdBirthAttendt)
                    .IsRequired()
                    .HasColumnName("CD_BIRTH_ATTENDT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdBirthPlace)
                    .IsRequired()
                    .HasColumnName("CD_BIRTH_PLACE")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdDebrTime)
                    .IsRequired()
                    .HasColumnName("CD_DEBR_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdEnvironment)
                    .IsRequired()
                    .HasColumnName("CD_ENVIRONMENT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdMotherTt)
                    .IsRequired()
                    .HasColumnName("CD_MOTHER_TT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdOutcome)
                    .IsRequired()
                    .HasColumnName("CD_OUTCOME")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTetanusDisease)
                    .IsRequired()
                    .HasColumnName("CD_TETANUS_DISEASE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTigAftOnset)
                    .IsRequired()
                    .HasColumnName("CD_TIG_AFT_ONSET")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTigTime)
                    .IsRequired()
                    .HasColumnName("CD_TIG_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTtHistory)
                    .IsRequired()
                    .HasColumnName("CD_TT_HISTORY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdTtTime)
                    .IsRequired()
                    .HasColumnName("CD_TT_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdWoundType)
                    .IsRequired()
                    .HasColumnName("CD_WOUND_TYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAssocCondt)
                    .IsRequired()
                    .HasColumnName("DS_ASSOC_CONDT")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsBirthAttendt)
                    .HasColumnName("DS_BIRTH_ATTENDT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCircumstance)
                    .IsRequired()
                    .HasColumnName("DS_CIRCUMSTANCE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDaysIcu)
                    .IsRequired()
                    .HasColumnName("DS_DAYS_ICU")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDaysVentil)
                    .IsRequired()
                    .HasColumnName("DS_DAYS_VENTIL")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDosage)
                    .IsRequired()
                    .HasColumnName("DS_DOSAGE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsHospitalized)
                    .IsRequired()
                    .HasColumnName("DS_HOSPITALIZED")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsLastDose)
                    .IsRequired()
                    .HasColumnName("DS_LAST_DOSE")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsMilatary)
                    .IsRequired()
                    .HasColumnName("DS_MILATARY")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsMotherAge)
                    .IsRequired()
                    .HasColumnName("DS_MOTHER_AGE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsMotherTt)
                    .IsRequired()
                    .HasColumnName("DS_MOTHER_TT")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOccupation)
                    .IsRequired()
                    .HasColumnName("DS_OCCUPATION")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOutcome)
                    .HasColumnName("DS_OUTCOME")
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsParentDrug)
                    .IsRequired()
                    .HasColumnName("DS_PARENT_DRUG")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTotalDose)
                    .IsRequired()
                    .HasColumnName("DS_TOTAL_DOSE")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAcuteWound)
                    .HasColumnName("DT_ACUTE_WOUND")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtDeath)
                    .HasColumnName("DT_DEATH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtMotherArrivedUsa)
                    .HasColumnName("DT_MOTHER_ARRIVED_USA")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtMotherDob)
                    .HasColumnName("DT_MOTHER_DOB")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdReporter)
                    .IsRequired()
                    .HasColumnName("ID_REPORTER")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAcute)
                    .IsRequired()
                    .HasColumnName("IN_ACUTE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InContaminated)
                    .IsRequired()
                    .HasColumnName("IN_CONTAMINATED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDiabetes)
                    .IsRequired()
                    .HasColumnName("IN_DIABETES")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InHospitalized)
                    .IsRequired()
                    .HasColumnName("IN_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InInfected)
                    .IsRequired()
                    .HasColumnName("IN_INFECTED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InInsulin)
                    .IsRequired()
                    .HasColumnName("IN_INSULIN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMedicalCare)
                    .IsRequired()
                    .HasColumnName("IN_MEDICAL_CARE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMilitary)
                    .IsRequired()
                    .HasColumnName("IN_MILITARY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMotherTravel)
                    .IsRequired()
                    .HasColumnName("IN_MOTHER_TRAVEL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InParentDrug)
                    .IsRequired()
                    .HasColumnName("IN_PARENT_DRUG")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTigProph)
                    .IsRequired()
                    .HasColumnName("IN_TIG_PROPH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTigTherapy)
                    .IsRequired()
                    .HasColumnName("IN_TIG_THERAPY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTissue)
                    .IsRequired()
                    .HasColumnName("IN_TISSUE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTtAdmin)
                    .IsRequired()
                    .HasColumnName("IN_TT_ADMIN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InWoundDebr)
                    .IsRequired()
                    .HasColumnName("IN_WOUND_DEBR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InWoundDepth)
                    .IsRequired()
                    .HasColumnName("IN_WOUND_DEPTH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InWrkRelated)
                    .IsRequired()
                    .HasColumnName("IN_WRK_RELATED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<TravelHistory>(entity =>
            {
                entity.HasKey(e => e.IdTravelHistory);

                entity.ToTable("TRAVEL_HISTORY");

                entity.Property(e => e.IdTravelHistory)
                    .HasColumnName("id_travel_history")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdCountry)
                    .HasColumnName("cd_country")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdCounty)
                    .HasColumnName("CD_COUNTY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdRegion)
                    .HasColumnName("CD_REGION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdState)
                    .HasColumnName("cd_state")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CdTravelType)
                    .HasColumnName("cd_travel_type")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdTraveler)
                    .HasColumnName("CD_TRAVELER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddress1)
                    .HasColumnName("ds_address1")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.DsAddress2)
                    .HasColumnName("ds_address2")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.DsCity)
                    .HasColumnName("ds_city")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("ds_comments")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsPhone)
                    .HasColumnName("ds_phone")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DsRoomNumber)
                    .HasColumnName("ds_room_number")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DsZip)
                    .HasColumnName("ds_zip")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("dt_added")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("dt_changed")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStayBegin)
                    .HasColumnName("dt_stay_begin")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtStayEnd)
                    .HasColumnName("dt_stay_end")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("id_added")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("id_case");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("id_changed")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InHottubSpa)
                    .HasColumnName("in_hottub_spa")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMostLikely)
                    .HasColumnName("IN_MOST_LIKELY")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InUsAddress)
                    .HasColumnName("IN_US_ADDRESS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NmFacility)
                    .IsRequired()
                    .HasColumnName("nm_facility")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.TravelHistory)
                    .HasForeignKey(d => d.IdCase)
                    .HasConstraintName("FK_ID_CASE_TRAVEL_HISTORY");
            });

            modelBuilder.Entity<Treatment>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.CdTreatment });

                entity.ToTable("TREATMENT");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.CdTreatment)
                    .HasColumnName("CD_TREATMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CdUnit)
                    .HasColumnName("CD_UNIT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsDose)
                    .HasColumnName("DS_DOSE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsTreatment)
                    .HasColumnName("DS_TREATMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBegin)
                    .HasColumnName("DT_BEGIN")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEnd)
                    .HasColumnName("DT_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InDuration).HasColumnName("IN_DURATION");
            });

            modelBuilder.Entity<TyphoidExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("TYPHOID_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmDaysHospitalized).HasColumnName("AM_DAYS_HOSPITALIZED");

                entity.Property(e => e.CdAmpicillan)
                    .HasColumnName("CD_AMPICILLAN")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdAntibioticTesting)
                    .HasColumnName("CD_ANTIBIOTIC_TESTING")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdCaseTraced)
                    .HasColumnName("CD_CASE_TRACED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdChloramphenicol)
                    .HasColumnName("CD_CHLORAMPHENICOL")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdCitizenship)
                    .HasColumnName("CD_CITIZENSHIP")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdFluoroquinolones)
                    .HasColumnName("CD_FLUOROQUINOLONES")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdPreviouslyKnown)
                    .HasColumnName("CD_PREVIOUSLY_KNOWN")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTravelBusiness)
                    .HasColumnName("CD_TRAVEL_BUSINESS")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTravelImmigration)
                    .HasColumnName("CD_TRAVEL_IMMIGRATION")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTravelOther)
                    .HasColumnName("CD_TRAVEL_OTHER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTravelTourism)
                    .HasColumnName("CD_TRAVEL_TOURISM")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTravelVisiting)
                    .HasColumnName("CD_TRAVEL_VISITING")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdTrimethoprim)
                    .HasColumnName("CD_TRIMETHOPRIM")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CdTyphoidVaccination)
                    .HasColumnName("CD_TYPHOID_VACCINATION")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DsCitizenship)
                    .HasColumnName("DS_CITIZENSHIP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DsComments)
                    .HasColumnName("DS_COMMENTS")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsPfge)
                    .HasColumnName("DS_PFGE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsTravelOther)
                    .HasColumnName("DS_TRAVEL_OTHER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtUsReturn)
                    .HasColumnName("DT_US_RETURN")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserRegion>(entity =>
            {
                entity.HasKey(e => new { e.IdUser, e.IdCode });

                entity.ToTable("USER_REGION");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCode).HasColumnName("ID_CODE");

                entity.HasOne(d => d.IdCodeNavigation)
                    .WithMany(p => p.UserRegion)
                    .HasForeignKey(d => d.IdCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__USER_REGI__ID_CO__5EA17A11");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.UserRegion)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__USER_REGI__ID_US__5F959E4A");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(e => new { e.IdUser, e.IdCode });

                entity.ToTable("USER_ROLE");

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_USER")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCode).HasColumnName("ID_CODE");

                entity.HasOne(d => d.IdCodeNavigation)
                    .WithMany(p => p.UserRole)
                    .HasForeignKey(d => d.IdCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__USER_ROLE__ID_CO__62720AF5");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.UserRole)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__USER_ROLE__ID_US__63662F2E");
            });

            modelBuilder.Entity<VaersExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("VAERS_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmBirthWtLb).HasColumnName("AM_BIRTH_WT_LB");

                entity.Property(e => e.AmBirthWtOz).HasColumnName("AM_BIRTH_WT_OZ");

                entity.Property(e => e.AmDaysHospitalized).HasColumnName("AM_DAYS_HOSPITALIZED");

                entity.Property(e => e.AmSiblingCount).HasColumnName("AM_SIBLING_COUNT");

                entity.Property(e => e.CdRelation)
                    .IsRequired()
                    .HasColumnName("CD_RELATION")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdReportType)
                    .IsRequired()
                    .HasColumnName("CD_REPORT_TYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CdState)
                    .IsRequired()
                    .HasColumnName("CD_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAddr1Name)
                    .HasColumnName("DS_ADDR1_NAME")
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsAddr2)
                    .IsRequired()
                    .HasColumnName("DS_ADDR2")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCity)
                    .IsRequired()
                    .HasColumnName("DS_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsFormCompletedBy)
                    .IsRequired()
                    .HasColumnName("DS_FORM_COMPLETED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsFundOther)
                    .IsRequired()
                    .HasColumnName("DS_FUND_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsIllness)
                    .IsRequired()
                    .HasColumnName("DS_ILLNESS")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherAdverseEvent)
                    .IsRequired()
                    .HasColumnName("DS_OTHER_ADVERSE_EVENT")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsOtherMedication)
                    .IsRequired()
                    .HasColumnName("DS_OTHER_MEDICATION")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPhone)
                    .IsRequired()
                    .HasColumnName("DS_PHONE")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPreExistingCondition)
                    .IsRequired()
                    .HasColumnName("DS_PRE_EXISTING_CONDITION")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsPrjReportNum)
                    .IsRequired()
                    .HasColumnName("DS_PRJ_REPORT_NUM")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsTreatment)
                    .IsRequired()
                    .HasColumnName("DS_TREATMENT")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsVaccineAdminBy)
                    .IsRequired()
                    .HasColumnName("DS_VACCINE_ADMIN_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsVaccineAtOther)
                    .IsRequired()
                    .HasColumnName("DS_VACCINE_AT_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsZip)
                    .IsRequired()
                    .HasColumnName("DS_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtAdverseEvent)
                    .HasColumnName("DT_ADVERSE_EVENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFormCompleted)
                    .HasColumnName("DT_FORM_COMPLETED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPatientDied)
                    .HasColumnName("DT_PATIENT_DIED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtPrjReportReceived)
                    .HasColumnName("DT_PRJ_REPORT_RECEIVED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVaccination)
                    .HasColumnName("DT_VACCINATION")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.In15Day)
                    .IsRequired()
                    .HasColumnName("IN_15_DAY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEncephPostVaccine)
                    .IsRequired()
                    .HasColumnName("IN_ENCEPH_POST_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEventReported)
                    .IsRequired()
                    .HasColumnName("IN_EVENT_REPORTED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEventReportedDept)
                    .IsRequired()
                    .HasColumnName("IN_EVENT_REPORTED_DEPT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEventReportedDoctor)
                    .IsRequired()
                    .HasColumnName("IN_EVENT_REPORTED_DOCTOR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEventReportedMfr)
                    .IsRequired()
                    .HasColumnName("IN_EVENT_REPORTED_MFR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InFundMilitary)
                    .IsRequired()
                    .HasColumnName("IN_FUND_MILITARY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InFundOther)
                    .IsRequired()
                    .HasColumnName("IN_FUND_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InFundPrivate)
                    .IsRequired()
                    .HasColumnName("IN_FUND_PRIVATE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InFundPublic)
                    .IsRequired()
                    .HasColumnName("IN_FUND_PUBLIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InGenVaccine)
                    .IsRequired()
                    .HasColumnName("IN_GEN_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InInfection)
                    .IsRequired()
                    .HasColumnName("IN_INFECTION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InKeralitisConjunct)
                    .IsRequired()
                    .HasColumnName("IN_KERALITIS_CONJUNCT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InKeralitisSuperficial)
                    .IsRequired()
                    .HasColumnName("IN_KERALITIS_SUPERFICIAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InLifeThreatIllness)
                    .IsRequired()
                    .HasColumnName("IN_LIFE_THREAT_ILLNESS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InMedicineEffect)
                    .IsRequired()
                    .HasColumnName("IN_MEDICINE_EFFECT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InNoneOfAbove)
                    .IsRequired()
                    .HasColumnName("IN_NONE_OF_ABOVE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InOtherAdverseEvent)
                    .IsRequired()
                    .HasColumnName("IN_OTHER_ADVERSE_EVENT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPatientDied)
                    .IsRequired()
                    .HasColumnName("IN_PATIENT_DIED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPatientRecovery)
                    .IsRequired()
                    .HasColumnName("IN_PATIENT_RECOVERY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPermDisability)
                    .IsRequired()
                    .HasColumnName("IN_PERM_DISABILITY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InProlongedHospitalized)
                    .IsRequired()
                    .HasColumnName("IN_PROLONGED_HOSPITALIZED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReqEmergencyVisit)
                    .IsRequired()
                    .HasColumnName("IN_REQ_EMERGENCY_VISIT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InReqHospitalization)
                    .IsRequired()
                    .HasColumnName("IN_REQ_HOSPITALIZATION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccineAtMilitaryClinic)
                    .IsRequired()
                    .HasColumnName("IN_VACCINE_AT_MILITARY_CLINIC")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccineAtOther)
                    .IsRequired()
                    .HasColumnName("IN_VACCINE_AT_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccineAtPrivateDoctor)
                    .IsRequired()
                    .HasColumnName("IN_VACCINE_AT_PRIVATE_DOCTOR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccineAtPublicHealth)
                    .IsRequired()
                    .HasColumnName("IN_VACCINE_AT_PUBLIC_HEALTH")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.VaersExt)
                    .HasForeignKey<VaersExt>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VAERS_EXT_ID_CASE ");
            });

            modelBuilder.Entity<VaersFollowup>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("VAERS_FOLLOWUP");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdVaccineeState)
                    .IsRequired()
                    .HasColumnName("CD_VACCINEE_STATE")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsContraindication)
                    .IsRequired()
                    .HasColumnName("DS_CONTRAINDICATION")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDiagnosis)
                    .IsRequired()
                    .HasColumnName("DS_DIAGNOSIS")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsDisposition)
                    .IsRequired()
                    .HasColumnName("DS_DISPOSITION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsEreportNum)
                    .IsRequired()
                    .HasColumnName("DS_EREPORT_NUM")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsExpOther)
                    .IsRequired()
                    .HasColumnName("DS_EXP_OTHER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsReviewer)
                    .IsRequired()
                    .HasColumnName("DS_REVIEWER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsVaccinationNum)
                    .IsRequired()
                    .HasColumnName("DS_VACCINATION_NUM")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsVaccineeAddr1Name)
                    .HasColumnName("DS_VACCINEE_ADDR1_NAME")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.DsVaccineeAddr2)
                    .IsRequired()
                    .HasColumnName("DS_VACCINEE_ADDR2")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsVaccineeCity)
                    .IsRequired()
                    .HasColumnName("DS_VACCINEE_CITY")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsVaccineeNm)
                    .IsRequired()
                    .HasColumnName("DS_VACCINEE_NM")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsVaccineePhone)
                    .IsRequired()
                    .HasColumnName("DS_VACCINEE_PHONE")
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsVaccineeZip)
                    .IsRequired()
                    .HasColumnName("DS_VACCINEE_ZIP")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsVaersId)
                    .IsRequired()
                    .HasColumnName("DS_VAERS_ID")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpEnd)
                    .HasColumnName("DT_EXP_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtExpStart)
                    .HasColumnName("DT_EXP_START")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFollowUp)
                    .HasColumnName("DT_FOLLOW_UP")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtVaccination)
                    .HasColumnName("DT_VACCINATION")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .IsRequired()
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InAllergy)
                    .IsRequired()
                    .HasColumnName("IN_ALLERGY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InCidofovir)
                    .IsRequired()
                    .HasColumnName("IN_CIDOFOVIR")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InContacts)
                    .IsRequired()
                    .HasColumnName("IN_CONTACTS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InContraindication)
                    .IsRequired()
                    .HasColumnName("IN_CONTRAINDICATION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDiagnosis)
                    .IsRequired()
                    .HasColumnName("IN_DIAGNOSIS")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InDisposition)
                    .IsRequired()
                    .HasColumnName("IN_DISPOSITION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExpDressing)
                    .IsRequired()
                    .HasColumnName("IN_EXP_DRESSING")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExpHealthcare)
                    .IsRequired()
                    .HasColumnName("IN_EXP_HEALTHCARE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExpNeedle)
                    .IsRequired()
                    .HasColumnName("IN_EXP_NEEDLE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExpNursing)
                    .IsRequired()
                    .HasColumnName("IN_EXP_NURSING")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExpObject)
                    .IsRequired()
                    .HasColumnName("IN_EXP_OBJECT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExpOther)
                    .IsRequired()
                    .HasColumnName("IN_EXP_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExpSexual)
                    .IsRequired()
                    .HasColumnName("IN_EXP_SEXUAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExpSkin)
                    .IsRequired()
                    .HasColumnName("IN_EXP_SKIN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InExposure)
                    .IsRequired()
                    .HasColumnName("IN_EXPOSURE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InEyeDisease)
                    .IsRequired()
                    .HasColumnName("IN_EYE_DISEASE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InImmunosuppression)
                    .IsRequired()
                    .HasColumnName("IN_IMMUNOSUPPRESSION")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InLocationHome)
                    .IsRequired()
                    .HasColumnName("IN_LOCATION_HOME")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InLocationHospital)
                    .IsRequired()
                    .HasColumnName("IN_LOCATION_HOSPITAL")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InLocationOther)
                    .IsRequired()
                    .HasColumnName("IN_LOCATION_OTHER")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InLocationUnknown)
                    .IsRequired()
                    .HasColumnName("IN_LOCATION_UNKNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InLocationWorkplace)
                    .IsRequired()
                    .HasColumnName("IN_LOCATION_WORKPLACE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InPregnancy)
                    .IsRequired()
                    .HasColumnName("IN_PREGNANCY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InSkinDisease)
                    .IsRequired()
                    .HasColumnName("IN_SKIN_DISEASE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InTimingKnown)
                    .IsRequired()
                    .HasColumnName("IN_TIMING_KNOWN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccinatedBefore)
                    .IsRequired()
                    .HasColumnName("IN_VACCINATED_BEFORE")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccinatedChildhood)
                    .IsRequired()
                    .HasColumnName("IN_VACCINATED_CHILDHOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccinatedLaboratory)
                    .IsRequired()
                    .HasColumnName("IN_VACCINATED_LABORATORY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccinatedMilitary)
                    .IsRequired()
                    .HasColumnName("IN_VACCINATED_MILITARY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVaccinatedRecently)
                    .IsRequired()
                    .HasColumnName("IN_VACCINATED_RECENTLY")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InVigUsed)
                    .IsRequired()
                    .HasColumnName("IN_VIG_USED")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithOne(p => p.VaersFollowup)
                    .HasForeignKey<VaersFollowup>(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VAERS_FOLLOWUP_ID_CASE ");
            });

            modelBuilder.Entity<VaersPrevEvent>(entity =>
            {
                entity.HasKey(e => new { e.IdCase, e.CdRelation });

                entity.ToTable("VAERS_PREV_EVENT");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.CdRelation)
                    .HasColumnName("CD_RELATION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AmDoseCount).HasColumnName("AM_DOSE_COUNT");

                entity.Property(e => e.AmOnsetAge).HasColumnName("AM_ONSET_AGE");

                entity.Property(e => e.DsAdverseEvent)
                    .HasColumnName("DS_ADVERSE_EVENT")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsVaccineType)
                    .IsRequired()
                    .HasColumnName("DS_VACCINE_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InAdverseEvent)
                    .IsRequired()
                    .HasColumnName("IN_ADVERSE_EVENT")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.VaersPrevEvent)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VAERS_PREV_EVENT_ID_CASE ");
            });

            modelBuilder.Entity<VaersVaccine>(entity =>
            {
                entity.HasKey(e => e.InKey);

                entity.ToTable("VAERS_VACCINE");

                entity.Property(e => e.InKey).HasColumnName("IN_KEY");

                entity.Property(e => e.AmPrevDoseCount).HasColumnName("AM_PREV_DOSE_COUNT");

                entity.Property(e => e.CdVaccineTime)
                    .IsRequired()
                    .HasColumnName("CD_VACCINE_TIME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DsLotNumber)
                    .IsRequired()
                    .HasColumnName("DS_LOT_NUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsManufacturer)
                    .IsRequired()
                    .HasColumnName("DS_MANUFACTURER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DsSite)
                    .IsRequired()
                    .HasColumnName("DS_SITE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DsVaccineType)
                    .IsRequired()
                    .HasColumnName("DS_VACCINE_TYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DtDose)
                    .HasColumnName("DT_DOSE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.HasOne(d => d.IdCaseNavigation)
                    .WithMany(p => p.VaersVaccine)
                    .HasForeignKey(d => d.IdCase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VAERS_VACCINE_ID_CASE ");
            });

            modelBuilder.Entity<ValidationRule>(entity =>
            {
                entity.ToTable("VALIDATION_RULE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CdType)
                    .IsRequired()
                    .HasColumnName("CD_TYPE")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.DsDefaultError)
                    .IsRequired()
                    .HasColumnName("DS_DEFAULT_ERROR")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NmValidation)
                    .IsRequired()
                    .HasColumnName("NM_VALIDATION")
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VaricellaExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("VARICELLA_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdHistDisease)
                    .HasColumnName("CD_HIST_DISEASE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CdHistVaccine)
                    .IsRequired()
                    .HasColumnName("CD_HIST_VACCINE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAdded)
                    .IsRequired()
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<VibrioExt>(entity =>
            {
                entity.HasKey(e => e.IdCase);

                entity.ToTable("VIBRIO_EXT");

                entity.Property(e => e.IdCase)
                    .HasColumnName("ID_CASE")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmBittenStungTime)
                    .HasColumnName("AM_BITTEN_STUNG_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmBoatingSkiingTime)
                    .HasColumnName("AM_BOATING_SKIING_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmConstructionRepairsTime)
                    .HasColumnName("AM_CONSTRUCTION_REPAIRS_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmConsumeClamsLot).HasColumnName("AM_CONSUME_CLAMS_LOT");

                entity.Property(e => e.AmConsumeCrabLot).HasColumnName("AM_CONSUME_CRAB_LOT");

                entity.Property(e => e.AmConsumeCrawfishLot).HasColumnName("AM_CONSUME_CRAWFISH_LOT");

                entity.Property(e => e.AmConsumeFishLot).HasColumnName("AM_CONSUME_FISH_LOT");

                entity.Property(e => e.AmConsumeLobsterLot).HasColumnName("AM_CONSUME_LOBSTER_LOT");

                entity.Property(e => e.AmConsumeMusselsLot).HasColumnName("AM_CONSUME_MUSSELS_LOT");

                entity.Property(e => e.AmConsumeOystersLot).HasColumnName("AM_CONSUME_OYSTERS_LOT");

                entity.Property(e => e.AmConsumeShellfishLot).HasColumnName("AM_CONSUME_SHELLFISH_LOT");

                entity.Property(e => e.AmConsumeShrimpLot).HasColumnName("AM_CONSUME_SHRIMP_LOT");

                entity.Property(e => e.AmContactMarineLifeTime)
                    .HasColumnName("AM_CONTACT_MARINE_LIFE_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmHandlingSeafoodTime)
                    .HasColumnName("AM_HANDLING_SEAFOOD_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmSwimmingDivingTime)
                    .HasColumnName("AM_SWIMMING_DIVING_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmWalkingOnBeachTime)
                    .HasColumnName("AM_WALKING_ON_BEACH_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CdBiotype)
                    .HasColumnName("CD_BIOTYPE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdCholeraVaccine)
                    .HasColumnName("CD_CHOLERA_VACCINE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposedWaterType)
                    .HasColumnName("CD_EXPOSED_WATER_TYPE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdExposedWound)
                    .HasColumnName("CD_EXPOSED_WOUND")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdPreventionMeasure)
                    .HasColumnName("CD_PREVENTION_MEASURE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdReasonTravel)
                    .HasColumnName("CD_REASON_TRAVEL")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdSerotype)
                    .HasColumnName("CD_SEROTYPE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdToxigenic)
                    .HasColumnName("CD_TOXIGENIC")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsAntacids)
                    .HasColumnName("DS_ANTACIDS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsAntibiotic1)
                    .HasColumnName("DS_ANTIBIOTIC1")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsAntibiotic1Other)
                    .HasColumnName("DS_ANTIBIOTIC1_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsAntibiotic2)
                    .HasColumnName("DS_ANTIBIOTIC2")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsAntibiotic2Other)
                    .HasColumnName("DS_ANTIBIOTIC2_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsAntibiotic3)
                    .HasColumnName("DS_ANTIBIOTIC3")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsAntibiotic3Other)
                    .HasColumnName("DS_ANTIBIOTIC3_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsAntibiotics)
                    .HasColumnName("DS_ANTIBIOTICS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsBodyWaterLocation)
                    .HasColumnName("DS_BODY_WATER_LOCATION")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsChemotherapy)
                    .HasColumnName("DS_CHEMOTHERAPY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeClamsWhere)
                    .HasColumnName("DS_CONSUME_CLAMS_WHERE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeCrabWhere)
                    .HasColumnName("DS_CONSUME_CRAB_WHERE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeCrawfishWhere)
                    .HasColumnName("DS_CONSUME_CRAWFISH_WHERE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeFishSpecify)
                    .HasColumnName("DS_CONSUME_FISH_SPECIFY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeFishWhere)
                    .HasColumnName("DS_CONSUME_FISH_WHERE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeLobsterWhere)
                    .HasColumnName("DS_CONSUME_LOBSTER_WHERE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeMusselsWhere)
                    .HasColumnName("DS_CONSUME_MUSSELS_WHERE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeOystersWhere)
                    .HasColumnName("DS_CONSUME_OYSTERS_WHERE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeShellfishSpecify)
                    .HasColumnName("DS_CONSUME_SHELLFISH_SPECIFY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeShellfishWhere)
                    .HasColumnName("DS_CONSUME_SHELLFISH_WHERE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumeShrimpWhere)
                    .HasColumnName("DS_CONSUME_SHRIMP_WHERE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsContactMarineLife)
                    .HasColumnName("DS_CONTACT_MARINE_LIFE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposedWaterComments)
                    .HasColumnName("DS_EXPOSED_WATER_COMMENTS")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposedWaterTypeOther)
                    .HasColumnName("DS_EXPOSED_WATER_TYPE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExposedWound)
                    .HasColumnName("DS_EXPOSED_WOUND")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsGastricSurgery)
                    .HasColumnName("DS_GASTRIC_SURGERY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsH2Blocker)
                    .HasColumnName("DS_H2_BLOCKER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsHematologicDisease)
                    .HasColumnName("DS_HEMATOLOGIC_DISEASE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsImmunodeficiency)
                    .HasColumnName("DS_IMMUNODEFICIENCY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsImmunosuppressants)
                    .HasColumnName("DS_IMMUNOSUPPRESSANTS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsLiverDisease)
                    .HasColumnName("DS_LIVER_DISEASE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsMalignancy)
                    .HasColumnName("DS_MALIGNANCY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherCondition)
                    .HasColumnName("DS_OTHER_CONDITION")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherOrganism)
                    .HasColumnName("DS_OTHER_ORGANISM")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsOtherRisk)
                    .HasColumnName("DS_OTHER_RISK")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsOutbreakCase)
                    .HasColumnName("DS_OUTBREAK_CASE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsPreventionMeasureOther)
                    .HasColumnName("DS_PREVENTION_MEASURE_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRadiotherapy)
                    .HasColumnName("DS_RADIOTHERAPY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsReasonTravelOther)
                    .HasColumnName("DS_REASON_TRAVEL_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRenalDisease)
                    .HasColumnName("DS_RENAL_DISEASE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsSequelae)
                    .HasColumnName("DS_SEQUELAE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsSystemicSteroids)
                    .HasColumnName("DS_SYSTEMIC_STEROIDS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsToxigenicOther)
                    .HasColumnName("DS_TOXIGENIC_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAntacids)
                    .HasColumnName("DT_ANTACIDS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAntibiotics)
                    .HasColumnName("DT_ANTIBIOTICS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBeganAntibiotic1)
                    .HasColumnName("DT_BEGAN_ANTIBIOTIC1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBeganAntibiotic2)
                    .HasColumnName("DT_BEGAN_ANTIBIOTIC2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBeganAntibiotic3)
                    .HasColumnName("DT_BEGAN_ANTIBIOTIC3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBittenStung)
                    .HasColumnName("DT_BITTEN_STUNG")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtBoatingSkiing)
                    .HasColumnName("DT_BOATING_SKIING")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChemotherapy)
                    .HasColumnName("DT_CHEMOTHERAPY")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtCholeraVaccine)
                    .HasColumnName("DT_CHOLERA_VACCINE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConstructionRepairs)
                    .HasColumnName("DT_CONSTRUCTION_REPAIRS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumeClams)
                    .HasColumnName("DT_CONSUME_CLAMS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumeCrab)
                    .HasColumnName("DT_CONSUME_CRAB")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumeCrawfish)
                    .HasColumnName("DT_CONSUME_CRAWFISH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumeFish)
                    .HasColumnName("DT_CONSUME_FISH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumeLobster)
                    .HasColumnName("DT_CONSUME_LOBSTER")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumeMussels)
                    .HasColumnName("DT_CONSUME_MUSSELS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumeOysters)
                    .HasColumnName("DT_CONSUME_OYSTERS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumeShellfish)
                    .HasColumnName("DT_CONSUME_SHELLFISH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumeShrimp)
                    .HasColumnName("DT_CONSUME_SHRIMP")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtContactMarineLife)
                    .HasColumnName("DT_CONTACT_MARINE_LIFE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEndedAntibiotic1)
                    .HasColumnName("DT_ENDED_ANTIBIOTIC1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEndedAntibiotic2)
                    .HasColumnName("DT_ENDED_ANTIBIOTIC2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtEndedAntibiotic3)
                    .HasColumnName("DT_ENDED_ANTIBIOTIC3")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtH2Blocker)
                    .HasColumnName("DT_H2_BLOCKER")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHandlingSeafood)
                    .HasColumnName("DT_HANDLING_SEAFOOD")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtImmunosuppressants)
                    .HasColumnName("DT_IMMUNOSUPPRESSANTS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRadiotherapy)
                    .HasColumnName("DT_RADIOTHERAPY")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSwimmingDiving)
                    .HasColumnName("DT_SWIMMING_DIVING")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSystemicSteroids)
                    .HasColumnName("DT_SYSTEMIC_STEROIDS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtWalkingOnBeach)
                    .HasColumnName("DT_WALKING_ON_BEACH")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InAlcoholism)
                    .HasColumnName("IN_ALCOHOLISM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAntacids)
                    .HasColumnName("IN_ANTACIDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAntibioticTreatment)
                    .HasColumnName("IN_ANTIBIOTIC_TREATMENT")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InAntibiotics)
                    .HasColumnName("IN_ANTIBIOTICS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBittenStung)
                    .HasColumnName("IN_BITTEN_STUNG")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBoatingSkiing)
                    .HasColumnName("IN_BOATING_SKIING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InBodyWater)
                    .HasColumnName("IN_BODY_WATER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InChemotherapy)
                    .HasColumnName("IN_CHEMOTHERAPY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCholeraVaccine)
                    .HasColumnName("IN_CHOLERA_VACCINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConstructionRepairs)
                    .HasColumnName("IN_CONSTRUCTION_REPAIRS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeClams)
                    .HasColumnName("IN_CONSUME_CLAMS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeClamsRaw)
                    .HasColumnName("IN_CONSUME_CLAMS_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeCrab)
                    .HasColumnName("IN_CONSUME_CRAB")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeCrabRaw)
                    .HasColumnName("IN_CONSUME_CRAB_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeCrawfish)
                    .HasColumnName("IN_CONSUME_CRAWFISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeCrawfishRaw)
                    .HasColumnName("IN_CONSUME_CRAWFISH_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeFish)
                    .HasColumnName("IN_CONSUME_FISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeFishRaw)
                    .HasColumnName("IN_CONSUME_FISH_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeLobster)
                    .HasColumnName("IN_CONSUME_LOBSTER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeLobsterRaw)
                    .HasColumnName("IN_CONSUME_LOBSTER_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeMussels)
                    .HasColumnName("IN_CONSUME_MUSSELS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeMusselsRaw)
                    .HasColumnName("IN_CONSUME_MUSSELS_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeOysters)
                    .HasColumnName("IN_CONSUME_OYSTERS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeOystersRaw)
                    .HasColumnName("IN_CONSUME_OYSTERS_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeShellfish)
                    .HasColumnName("IN_CONSUME_SHELLFISH")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeShellfishRaw)
                    .HasColumnName("IN_CONSUME_SHELLFISH_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeShrimp)
                    .HasColumnName("IN_CONSUME_SHRIMP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InConsumeShrimpRaw)
                    .HasColumnName("IN_CONSUME_SHRIMP_RAW")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InContactMarineLife)
                    .HasColumnName("IN_CONTACT_MARINE_LIFE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InCookedSeafood)
                    .HasColumnName("IN_COOKED_SEAFOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDiabetes)
                    .HasColumnName("IN_DIABETES")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDiabetesInsuline)
                    .HasColumnName("IN_DIABETES_INSULINE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InDrippingsSeafood)
                    .HasColumnName("IN_DRIPPINGS_SEAFOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InForeingTravel)
                    .HasColumnName("IN_FOREING_TRAVEL")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InGastricSurgery)
                    .HasColumnName("IN_GASTRIC_SURGERY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InH2Blocker)
                    .HasColumnName("IN_H2_BLOCKER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHandlingSeafood)
                    .HasColumnName("IN_HANDLING_SEAFOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHeartDisease)
                    .HasColumnName("IN_HEART_DISEASE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHeartFailure)
                    .HasColumnName("IN_HEART_FAILURE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InHematologicDisease)
                    .HasColumnName("IN_HEMATOLOGIC_DISEASE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InImmunodeficiency)
                    .HasColumnName("IN_IMMUNODEFICIENCY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InImmunosuppressants)
                    .HasColumnName("IN_IMMUNOSUPPRESSANTS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InLiverDisease)
                    .HasColumnName("IN_LIVER_DISEASE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InMalignancy)
                    .HasColumnName("IN_MALIGNANCY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherCondition)
                    .HasColumnName("IN_OTHER_CONDITION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherOrganism)
                    .HasColumnName("IN_OTHER_ORGANISM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherPersonCholera)
                    .HasColumnName("IN_OTHER_PERSON_CHOLERA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InOtherRisk)
                    .HasColumnName("IN_OTHER_RISK")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPepticUlcer)
                    .HasColumnName("IN_PEPTIC_ULCER")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InPreventionMeasure)
                    .HasColumnName("IN_PREVENTION_MEASURE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRadiotherapy)
                    .HasColumnName("IN_RADIOTHERAPY")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRawSeafood)
                    .HasColumnName("IN_RAW_SEAFOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRenalDisease)
                    .HasColumnName("IN_RENAL_DISEASE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSequelae)
                    .HasColumnName("IN_SEQUELAE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSpeciesConfirmed)
                    .HasColumnName("IN_SPECIES_CONFIRMED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InStreetVendedFood)
                    .HasColumnName("IN_STREET_VENDED_FOOD")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSwimmingDiving)
                    .HasColumnName("IN_SWIMMING_DIVING")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InSystemicSteroids)
                    .HasColumnName("IN_SYSTEMIC_STEROIDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InToxigenic)
                    .HasColumnName("IN_TOXIGENIC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InTravelOutside)
                    .HasColumnName("IN_TRAVEL_OUTSIDE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InWalkingOnBeach)
                    .HasColumnName("IN_WALKING_ON_BEACH")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VibrioSeafood>(entity =>
            {
                entity.HasKey(e => e.IdSeafood);

                entity.ToTable("VIBRIO_SEAFOOD");

                entity.Property(e => e.IdSeafood)
                    .HasColumnName("ID_SEAFOOD")
                    .ValueGeneratedNever();

                entity.Property(e => e.AmAmbientTemp).HasColumnName("AM_AMBIENT_TEMP");

                entity.Property(e => e.AmConsumed)
                    .HasColumnName("AM_CONSUMED")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AmConsumedTime)
                    .HasColumnName("AM_CONSUMED_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AmFecalColiform).HasColumnName("AM_FECAL_COLIFORM");

                entity.Property(e => e.AmRainfall).HasColumnName("AM_RAINFALL");

                entity.Property(e => e.AmSalinity).HasColumnName("AM_SALINITY");

                entity.Property(e => e.AmSurfaceWaterTemp).HasColumnName("AM_SURFACE_WATER_TEMP");

                entity.Property(e => e.CdAmbientTempGrade)
                    .HasColumnName("CD_AMBIENT_TEMP_GRADE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CdDistributed)
                    .HasColumnName("CD_DISTRIBUTED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdHarvestStatus1)
                    .HasColumnName("CD_HARVEST_STATUS1")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdHarvestStatus2)
                    .HasColumnName("CD_HARVEST_STATUS2")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdObtained)
                    .HasColumnName("CD_OBTAINED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdPrepared)
                    .HasColumnName("CD_PREPARED")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdSeafood)
                    .HasColumnName("CD_SEAFOOD")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CdSurfaceWaterTempGrade)
                    .HasColumnName("CD_SURFACE_WATER_TEMP_GRADE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DsAmbientTemp)
                    .HasColumnName("DS_AMBIENT_TEMP")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsConsumed)
                    .HasColumnName("DS_CONSUMED")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsDistributedOther)
                    .HasColumnName("DS_DISTRIBUTED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsExportingCountry)
                    .HasColumnName("DS_EXPORTING_COUNTRY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsFecalColiform)
                    .HasColumnName("DS_FECAL_COLIFORM")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsHarvestSite1)
                    .HasColumnName("DS_HARVEST_SITE1")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsHarvestSite2)
                    .HasColumnName("DS_HARVEST_SITE2")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsHarvestStatusOther1)
                    .HasColumnName("DS_HARVEST_STATUS_OTHER1")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsHarvestStatusOther2)
                    .HasColumnName("DS_HARVEST_STATUS_OTHER2")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsImproperStorage)
                    .HasColumnName("DS_IMPROPER_STORAGE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsObtainedOther)
                    .HasColumnName("DS_OBTAINED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsPreparedOther)
                    .HasColumnName("DS_PREPARED_OTHER")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRainfall)
                    .HasColumnName("DS_RAINFALL")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRestaurantAddress)
                    .HasColumnName("DS_RESTAURANT_ADDRESS")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsRestaurantTelephone)
                    .HasColumnName("DS_RESTAURANT_TELEPHONE")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsSalinity)
                    .HasColumnName("DS_SALINITY")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DsShippersHandled)
                    .HasColumnName("DS_SHIPPERS_HANDLED")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsSource)
                    .HasColumnName("DS_SOURCE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DsSurfaceWaterTemp)
                    .HasColumnName("DS_SURFACE_WATER_TEMP")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DtAdded)
                    .HasColumnName("DT_ADDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtAmbientTemp)
                    .HasColumnName("DT_AMBIENT_TEMP")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtChanged)
                    .HasColumnName("DT_CHANGED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtConsumed)
                    .HasColumnName("DT_CONSUMED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtFecalColiform)
                    .HasColumnName("DT_FECAL_COLIFORM")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHarvest1)
                    .HasColumnName("DT_HARVEST1")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtHarvest2)
                    .HasColumnName("DT_HARVEST2")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtRainfall)
                    .HasColumnName("DT_RAINFALL")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtReceived)
                    .HasColumnName("DT_RECEIVED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSalinity)
                    .HasColumnName("DT_SALINITY")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtSurfaceWaterTemp)
                    .HasColumnName("DT_SURFACE_WATER_TEMP")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdAdded)
                    .HasColumnName("ID_ADDED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdCase).HasColumnName("ID_CASE");

                entity.Property(e => e.IdChanged)
                    .HasColumnName("ID_CHANGED")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InHarvested)
                    .HasColumnName("IN_HARVESTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InImported)
                    .HasColumnName("IN_IMPORTED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InImproperStorage)
                    .HasColumnName("IN_IMPROPER_STORAGE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InRestaurantInvestigated)
                    .HasColumnName("IN_RESTAURANT_INVESTIGATED")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InShippingTags)
                    .HasColumnName("IN_SHIPPING_TAGS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NmRestaurant)
                    .HasColumnName("NM_RESTAURANT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NmSeafood)
                    .HasColumnName("NM_SEAFOOD")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WeekNumber>(entity =>
            {
                entity.HasKey(e => new { e.AmWeek, e.DtFrom, e.DtTo });

                entity.ToTable("WEEK_NUMBER");

                entity.HasIndex(e => new { e.AmYear, e.DtTo })
                    .HasName("idx_WEEK_NUMBER_DT_TO");

                entity.Property(e => e.AmWeek).HasColumnName("AM_WEEK");

                entity.Property(e => e.DtFrom)
                    .HasColumnName("DT_FROM")
                    .HasColumnType("datetime");

                entity.Property(e => e.DtTo)
                    .HasColumnName("DT_TO")
                    .HasColumnType("datetime");

                entity.Property(e => e.AmYear).HasColumnName("AM_YEAR");
            });

            modelBuilder.Entity<SurveyLayoutQuestion>(entity =>
            {
                entity.HasKey(e => new { e.UidLayout, e.IdQuestion });

                entity.ToTable("SURVEY_LAYOUT_QUESTION");

                entity.Property(e => e.IdQuestion)
                    .HasColumnName("ID_QUESTION")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UidLayout)
                    .HasColumnName("UID_LAYOUT"); ;

                entity.HasOne(d => d.Layout)
                    .WithMany(p => p.SurveyLayoutQuestion)
                    .HasForeignKey(d => d.UidLayout)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_layout_uid");
            });

            modelBuilder.Entity<SurveyLayoutTag>(entity =>
            {
                entity.HasKey(e => new { e.UidLayout, e.DsTag })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("SURVEY_LAYOUT_TAG");

                entity.HasIndex(e => new { e.UidLayout, e.DsTag })
                    .HasName("idx_tag");

                entity.HasIndex(e => new { e.DsTag, e.UidLayout })
                    .HasName("idx_layout");

                entity.Property(e => e.DsTag)
                    .HasColumnName("DS_TAG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UidLayout)
                    .HasColumnName("UID_LAYOUT");

                //navigation property not needed
                entity.HasOne(d => d.Layout)
                    .WithMany(p => p.SurveyLayoutTag)
                    .HasForeignKey(d => d.UidLayout)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LAYOUT");
            });

            modelBuilder.HasSequence("SEQ_ANIMAL_OWNER_ID").StartsAt(6807);

            modelBuilder.HasSequence("SEQ_ANIMAL_PROFILE_ID").StartsAt(6597);

            modelBuilder.HasSequence("SEQ_ANIMAL_VICTIM_ID").StartsAt(334);

            modelBuilder.HasSequence("SEQ_AUTO_SCENARIO").StartsAt(107);

            modelBuilder.HasSequence("SEQ_CASE").StartsAt(180900);

            modelBuilder.HasSequence("SEQ_CASE_ANTIBIOTIC").StartsAt(116);

            modelBuilder.HasSequence("SEQ_CASE_CONTACT").StartsAt(150);

            modelBuilder.HasSequence("SEQ_CASE_CORRESPONDENCE").StartsAt(141);

            modelBuilder.HasSequence("SEQ_CASE_DEF").StartsAt(360);

            modelBuilder.HasSequence("SEQ_CASE_DEF_ITEM").StartsAt(3404);

            modelBuilder.HasSequence("SEQ_CASE_DEF_ORDER").StartsAt(7672);

            modelBuilder.HasSequence("SEQ_CASE_DEF_OUTCOME").StartsAt(1543);

            modelBuilder.HasSequence("SEQ_CASE_DEF_QUESTION").StartsAt(573);

            modelBuilder.HasSequence("SEQ_CASE_SCENARIO").StartsAt(101);

            modelBuilder.HasSequence("SEQ_CHRONIC_SCENARIO").StartsAt(137);

            modelBuilder.HasSequence("SEQ_CRF_FILTER_EVENT").StartsAt(471);

            modelBuilder.HasSequence("SEQ_CULTURE_CONFIRMATION").StartsAt(103);

            modelBuilder.HasSequence("SEQ_ELR_FILTER_EVENT").StartsAt(1169);

            modelBuilder.HasSequence("SEQ_ELR_FILTER_RULES").StartsAt(1953);

            modelBuilder.HasSequence("SEQ_ELR_FLU_FILTER_RULES").StartsAt(355);

            modelBuilder.HasSequence("SEQ_EMAIL_QUEUE").StartsAt(24294);

            modelBuilder.HasSequence("SEQ_EMAIL_QUEUE_HISTORY").StartsAt(1183);

            modelBuilder.HasSequence("SEQ_EPI_CASE_HOSPITAL").StartsAt(39569);

            modelBuilder.HasSequence("SEQ_EPI_DOCUMENT").StartsAt(583);

            modelBuilder.HasSequence("SEQ_EPI_USER_ALERT").StartsAt(32727);

            modelBuilder.HasSequence("SEQ_FACILITY_EXPOSURE").StartsAt(101);

            modelBuilder.HasSequence("SEQ_ICD9_MEASURES_SET").StartsAt(116);

            modelBuilder.HasSequence("SEQ_ICD9_SURVEY").StartsAt(3014);

            modelBuilder.HasSequence("SEQ_ICD9NOTE").StartsAt(102);

            modelBuilder.HasSequence("SEQ_ID_CASE_DEF_SEQ").StartsAt(287);

            modelBuilder.HasSequence("SEQ_ID_LRV").StartsAt(233394);

            modelBuilder.HasSequence("SEQ_ID_LRV_OUTBREAK").StartsAt(1036);

            modelBuilder.HasSequence("SEQ_ID_REPORT").StartsAt(62032);

            modelBuilder.HasSequence("SEQ_LAB").StartsAt(234189);

            modelBuilder.HasSequence("SEQ_LAB_TEST_ICD9").StartsAt(315);

            modelBuilder.HasSequence("SEQ_LAB_TEST_ICD9_SET").StartsAt(3070);

            modelBuilder.HasSequence("SEQ_LAB_TEST_TYPE_VALUE").StartsAt(167);

            modelBuilder.HasSequence("SEQ_LEAD_EXT_ADD").StartsAt(101);

            modelBuilder.HasSequence("SEQ_LEAD_EXT_ENVIRON").StartsAt(130);

            modelBuilder.HasSequence("SEQ_MERLIN_CODE_MATCH_ID").StartsAt(736);

            modelBuilder.HasSequence("SEQ_NOTE").StartsAt(85499);

            modelBuilder.HasSequence("SEQ_OB_LAB_ID").StartsAt(2054);

            modelBuilder.HasSequence("SEQ_OB_POTENTIAL").StartsAt(1101);

            modelBuilder.HasSequence("SEQ_OB_SEQNC").StartsAt(10931);

            modelBuilder.HasSequence("SEQ_OB_SETNG").StartsAt(546);

            modelBuilder.HasSequence("SEQ_OUT_LAB_SPECIMEN").StartsAt(210);

            modelBuilder.HasSequence("SEQ_OUTBREAK").StartsAt(1721);

            modelBuilder.HasSequence("SEQ_OUTBREAK_EVENTS").StartsAt(2090);

            modelBuilder.HasSequence("SEQ_OUTBREAK_LAB_RESULTS").StartsAt(1101);

            modelBuilder.HasSequence("SEQ_PAGE").StartsAt(328);

            modelBuilder.HasSequence("SEQ_PAGE_MESSAGE_TEXT").StartsAt(754);

            modelBuilder.HasSequence("SEQ_PANEL").StartsAt(53395);

            modelBuilder.HasSequence("SEQ_PROFILE").StartsAt(178146);

            modelBuilder.HasSequence("SEQ_QI_ASSESSMENT").StartsAt(2423);

            modelBuilder.HasSequence("SEQ_RESOURCE").StartsAt(39114);

            modelBuilder.HasSequence("SEQ_SUCEPT_FAMILY").StartsAt(668);

            modelBuilder.HasSequence("SEQ_SURVEY").StartsAt(1033);

            modelBuilder.HasSequence("SEQ_SURVEY_ANSWERS").StartsAt(243611);

            modelBuilder.HasSequence("SEQ_SURVEY_DISPLAY").StartsAt(112437);

            modelBuilder.HasSequence("SEQ_SURVEY_INSTANCE").StartsAt(31666);

            modelBuilder.HasSequence("SEQ_SURVEY_NOTES").StartsAt(143);

            modelBuilder.HasSequence("SEQ_SURVEY_QUESTION").StartsAt(20743);

            modelBuilder.HasSequence("SEQ_SYMPTOM_ICD9_SET").StartsAt(1305);

            modelBuilder.HasSequence("SEQ_SYMPTOM_SET").StartsAt(239);

            modelBuilder.HasSequence("SEQ_TEMPLATE").StartsAt(255);

            modelBuilder.HasSequence("SEQ_TRAVEL_HISTORY").StartsAt(360);

            modelBuilder.HasSequence("SEQ_VIBRIO_SEAFOOD").StartsAt(108);
        }
    }
}
