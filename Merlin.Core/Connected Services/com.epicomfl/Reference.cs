//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.epicomfl
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://epicom.globalsecurecorp.biz/", ConfigurationName="com.epicomfl.PostsSoap")]
    public interface PostsSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epicom.globalsecurecorp.biz/GetAllForumNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<com.epicomfl.GetAllForumNamesResponseGetAllForumNamesResult> GetAllForumNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epicom.globalsecurecorp.biz/GetAllTopicsByForumId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<com.epicomfl.GetAllTopicsByForumIdResponseGetAllTopicsByForumIdResult> GetAllTopicsByForumIdAsync(int forumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epicom.globalsecurecorp.biz/CreatePendingMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> CreatePendingMessageAsync(int topicID, string title, string message, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epicom.globalsecurecorp.biz/GetEpicomPosts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetEpicomPostsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epicom.globalsecurecorp.biz/GetEpicomPostDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetEpicomPostDetailAsync(int intPostID);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://epicom.globalsecurecorp.biz/")]
    public partial class GetAllForumNamesResponseGetAllForumNamesResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://epicom.globalsecurecorp.biz/")]
    public partial class GetAllTopicsByForumIdResponseGetAllTopicsByForumIdResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface PostsSoapChannel : com.epicomfl.PostsSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class PostsSoapClient : System.ServiceModel.ClientBase<com.epicomfl.PostsSoap>, com.epicomfl.PostsSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PostsSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(PostsSoapClient.GetBindingForEndpoint(endpointConfiguration), PostsSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostsSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress, bool useSSL = false) : 
                base(PostsSoapClient.GetBindingForEndpoint(endpointConfiguration, useSSL), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostsSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PostsSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostsSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<com.epicomfl.GetAllForumNamesResponseGetAllForumNamesResult> GetAllForumNamesAsync()
        {
            return base.Channel.GetAllForumNamesAsync();
        }
        
        public System.Threading.Tasks.Task<com.epicomfl.GetAllTopicsByForumIdResponseGetAllTopicsByForumIdResult> GetAllTopicsByForumIdAsync(int forumID)
        {
            return base.Channel.GetAllTopicsByForumIdAsync(forumID);
        }
        
        public System.Threading.Tasks.Task<int> CreatePendingMessageAsync(int topicID, string title, string message, int userID)
        {
            return base.Channel.CreatePendingMessageAsync(topicID, title, message, userID);
        }
        
        public System.Threading.Tasks.Task<string> GetEpicomPostsAsync()
        {
            return base.Channel.GetEpicomPostsAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetEpicomPostDetailAsync(int intPostID)
        {
            return base.Channel.GetEpicomPostDetailAsync(intPostID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration, bool useSSL = false)
        {
            if (useSSL)
            {
                if ((endpointConfiguration == EndpointConfiguration.PostsSoap))
                {
                    System.ServiceModel.BasicHttpsBinding result = new System.ServiceModel.BasicHttpsBinding();
                    result.MaxBufferSize = int.MaxValue;
                    result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                    result.MaxReceivedMessageSize = int.MaxValue;
                    result.AllowCookies = true;
                    return result;
                }
                if ((endpointConfiguration == EndpointConfiguration.PostsSoap12))
                {
                    System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                    System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                    textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                    result.Elements.Add(textBindingElement);
                    System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                    httpsBindingElement.AllowCookies = true;
                    httpsBindingElement.MaxBufferSize = int.MaxValue;
                    httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                    result.Elements.Add(httpsBindingElement);
                    return result;
                }
            }
            else
            {
                if ((endpointConfiguration == EndpointConfiguration.PostsSoap))
                {
                    System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                    result.MaxBufferSize = int.MaxValue;
                    result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                    result.MaxReceivedMessageSize = int.MaxValue;
                    result.AllowCookies = true;
                    return result;
                }
                if ((endpointConfiguration == EndpointConfiguration.PostsSoap12))
                {
                    System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                    System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                    textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                    result.Elements.Add(textBindingElement);
                    System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                    httpBindingElement.AllowCookies = true;
                    httpBindingElement.MaxBufferSize = int.MaxValue;
                    httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                    result.Elements.Add(httpBindingElement);
                    return result;
                }
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.PostsSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://66.129.90.55:8080/services/posts.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.PostsSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://66.129.90.55:8080/services/posts.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            PostsSoap,
            
            PostsSoap12,
        }
    }
}
